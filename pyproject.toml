[project]
name = "brand-yaml"
version = "0.0.1"
description = "Read brand yaml files, a unified way to store brand information."
readme = "pkg-py/README.md"
requires-python = ">=3.9"
dependencies = [
    "ruamel-yaml>=0.18.6",
    "pydantic>=2.8.2",
    "eval-type-backport>=0.2.0",
]

[project.optional-dependencies]
test = [
    "pyright>=1.1.379",
    "pytest>=8.3.2",
    "syrupy>=4.7.1",
]

[tool.uv]
dev-dependencies = [
    # Actual dev deps
    "coverage>=7.6.1",
    "jsonschema>=4.23.0",
    "ruff>=0.6.5",
    "tox-uv>=1.11.4",
    # Docs
    "quartodoc>=0.7.6",
    # Dev work with Quarto + Positron
    "ipykernel>=6.29.5",
    "nbclient>=0.10.0",
    "nbformat>=5.10.4",
    "pyyaml>=6.0.2",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
skip-excluded-dirs = true

[tool.hatch.build.targets.wheel]
packages = ["pkg-py/src/brand_yaml"]

[tool.pyright]
include = ["pkg-py"]
exclude = ["pkg-py/_dev", "pkg-py/.venv"]

[tool.coverage.paths]
source = [
  "pkg-py/src/brand_yaml",
]

[tool.coverage.run]
branch = true
source = [
  "pkg-py/src/brand_yaml",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "cover: for type checker",
  "raise NotImplementedError",
  "pass",
]

[tool.tox]
legacy_tox_ini = """
[tox]
env_list = type-py3{9,10,11,12}, py3{9,10,11,12}
isolated_build = True

[testenv]
package = wheel
wheel_build_env = .pkg
commands = pytest

[testenv:type]
deps = 
  pyright
  pytest
  syrupy
commands = pyright
"""

[tool.ruff]
src = ["pkg-py"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "_dev",
]

line-length = 80
indent-width = 4

target-version = "py39"

[tool.ruff.lint]
select = ['E', 'F', 'W', 'A', 'PLC', 'PLE', 'PLW', 'I']
ignore = ["E501"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"
