[
  {
    "objectID": "index.html#introducing-brand.yml",
    "href": "index.html#introducing-brand.yml",
    "title": "brand.yml",
    "section": "Introducing brand.yml",
    "text": "Introducing brand.yml\nbrand.yml is a simple, portable YAML file that codifies your company’s brand guidelines into a format that can be used by Quarto, Python and R tooling to create branded outputs. Our goal is to support unified, branded theming for all of Posit’s open source tools—from web applications to printed reports to dashboards and presentations—with a consistent look and feel.\nWith a single _brand.yml file you can collect brand logos, colors, fonts and typographic choices, typically found in your company’s brand guidelines. This _brand.yml can be used Quarto and Shiny for Python1 to instantly basic themes that match the brand guidelines.",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "index.html#brand.yml-support",
    "href": "index.html#brand.yml-support",
    "title": "brand.yml",
    "section": "brand.yml support",
    "text": "brand.yml support\nbrand.yml is currently supported in Quarto websites, presentations, dashboards, and Typst documents, as well as via the brand_yml Python package. Support for themed branding is in progress for Shiny for Python.\n\n\n\n\n\n---\nconfig:\n  look: handDrawn\n  theme: neutral\n---\nflowchart LR\n    by{brand.yml}\n    by--&gt;quarto[Quarto]\n    quarto--&gt;quarto-html\n    quarto--&gt;quarto-pdf\n    quarto-html--&gt;quarto-websites[Websites]\n    quarto-html--&gt;quarto-presentations[Presentations]\n    quarto-html--&gt;quarto-dashboards[Dashboards]\n    quarto-html--&gt;quarto-emails[Emails]\n    quarto-pdf--&gt;quarto-typst[Typst]\n\n    by--&gt;R\n    R--&gt;r-bslib[\"{bslib}\"]\n    R--&gt;r-thematic[\"{thematic}\"]\n    r-bslib--&gt;r-shiny[\"Shiny for R\"]\n    r-bslib--&gt;r-rmd[\"R Markdown\"]\n    r-thematic--&gt;r-ggplot2[\"{ggplot2}\"]\n    r-thematic--&gt;r-plot[\"{plot}\"]\n\n    by--&gt;Python\n    Python--&gt;py-brand_yml[\"brand_yml\"]\n    py-brand_yml--&gt;py-shiny[Shiny for Python]\n    py-brand_yml--&gt;py-seaborn[seaborn, matplotlib, etc.]\n\n    classDef implemented fill:#8CE3A0,stroke:#0A2911,color:#0A2911;\n    class quarto-websites,quarto-presentations,quarto-dashboards,quarto-typst,py-brand_yml implemented;\n    classDef in-progress fill:#B3D7FF,stroke:#00254D,color:#00254D;\n    class py-shiny in-progress;\n    classDef highlighted fill:#FFE8DB,stroke:#612200,color:#612200;\n    class by highlighted;\n\n    click quarto href \"https://quarto.org/\"\n    click quarto-typst href \"https://quarto.org/docs/output-formats/typst.html\" \"Typst in Quarto\"\n    click quarto-presentations href \"https://quarto.org/docs/presentations/revealjs/\" \"Reveal.js in Quarto\"\n    click quarto-dashboards href \"https://quarto.org/docs/dashboards/\" \"Dashboards in Quarto\"\n    click r-shiny href \"https://shiny.posit.co/\"\n    click r-bslib href \"https://rstudio.github.io/bslib/\"\n    click r-thematic href \"https://rstudio.github.io/thematic/\"\n    click r-ggplot2 href \"https://ggplot2.tidyverse.org/\"\n    click r-rmd href \"https://rmarkdown.rstudio.com/\"\n    click py-shiny href \"https://shiny.posit.co/py/\"\n    click py-brand_yml href \"pkg/py/\"",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "index.html#learn-more",
    "href": "index.html#learn-more",
    "title": "brand.yml",
    "section": "Learn more",
    "text": "Learn more\nJump to Structure to learn about the brand.yml syntax and how to write a _brand.yml file.\nYou can explore some inspiring examples of brand guidelines found in the wild.\nIf you’re a Python developer or are interested in using _brand.yml to adapt a Python package to use brand.yml for theming, check out the brand_yml Python package documentation to get started.",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "index.html#user-stories",
    "href": "index.html#user-stories",
    "title": "brand.yml",
    "section": "User stories",
    "text": "User stories\nJordan Ellis and Sofia Torres are data scientists at Genewise Therapeutics, a biotech company that uses AI to create tailored treatment plans based on personal genetic makeup and biomarkers.\n\n\n\n\n\n\nJordan Ellis\n\n\n\n\n\nJordan Ellis is a data scientist with a strong academic background in bioinformatics, in particular biology, genetics and statistical analysis. They frequently collaborate with bioligists and chemists to analyze data and present results in a clear an digestible format.\nJordan uses both R and Python and has recently started using Quarto to create their reports, which they share with non-scientific stakeholders. They noticed that their reports garnered more attention when they started using Quarto, but they suspect that their reports would be even more impactful if they matched the look and feel of the company’s branded reports.\nOn the other hand, Jordan doesn’t want to spend too much time having to rely on design teams for their reports, which often need to be re-created when data changes. Once, they tried to learn CSS but found it too complex and intimidating to learn in a few hours, so they settled on a Bootswatch theme that’s “close enough” to Genewise’s brand.\n\n\n\n\n\n\n\n\n\nSofia Torres\n\n\n\n\n\nSofia Torres leads a team of data scientists, including Jordan, at Genewise. She’s noticed that Jordan isn’t the only person on their small team who could benefit from branded reporting. She has been considering talking to a designer she knows on the marketing department, but it’s been hard to coordinate a time to meet and the designer sounded confused when he heard about Quarto.\nToday, Sofia was copied on emails from two of her reports who each used Quarto to create attached reports. But when she opened the reports, she was a little embarrassed that her team had sent out two reports with wildly different styles.\nSofia wants to get everyone on her team on the same page. She started collected snippets of code and settings in a page on her department’s Confluence space, but she can tell that very few people have even seen it, let alone have been using it.\n\n\n\nUsers like Jordan and Sofia will interact with brand.yml in three primary ways:\n\nCreating a _brand.yml file. Jordan has found Genewise’s internal branding guidelines. As they’re reading through these guidelines, they notice that the guidelines recommend a specific set of colors and fonts. They also find copies of their company’s logo, along with several pages of do this not that examples.\nAt this stage, Jordan wants to codify the best practices mentioned in the brand guidelines into a simple, human readable format. They’re excited that they only need to do this once, but they do make a note of the link to brand guidelines, just in case.\nWhile they have the brand guidelines open, they download the logo files and store them next in the same folder as the brand.yml file they’re working on.\nUsing and sharing the brand.yml file. When Jordan shared their new report style with their manager, Sofia was thrilled. Immediately, she asked everyone on her team to start using the new branded styles. Thanks to Quarto’s simple interface, everyone on the team could run a single command to bring the brand assets into their projects and documents, including the logos that Jordan downloaded.\nThe next time two members of her team sent out reports on the same day, both attachments looked coherent and professional. She’s just as thrilled when she opens up the experiment-tracking Shiny dashboard her team built for a biology group and the Shiny app looks custom-built for Genewise.\nUpdating branding tweaks and format settings. After a few weeks of using the branded theme for her reports, Sofia needs to present to the C suite. She uses the new brand files to create her presentation, but it’s just a little off. Thankfully she’s able to grab some time with the designer, who gives her a small CSS file that really brings the design home.\nKnowing that the rest of her team would like to use the same slide styles, she saves the CSS file in their brand.yml repository. She also realizes that everyone else would likely also want to use her settings for slide-number and title-slide-attributes, so she updates the brand.yml with these new values for the revealjs format.",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "index.html#design-considerations",
    "href": "index.html#design-considerations",
    "title": "brand.yml",
    "section": "Design considerations",
    "text": "Design considerations\nbrand.yml was designed with the following considerations in mind:\n\nIt needs to be easy to translate brand guidelines into the structured format of a _brand.yml file.\nWe aim for Good Enough theming. A _brand.yml is a great place to start and for most people will be all they need.\nA YAML file alone isn’t enough. Brands have additional assets, like logos and font files.\nUsers will want to create new documents, projects or apps with the _brand.yml and related assets.\nUsers will want to incorporate the branded theme into existing documents, projects and apps.\nUsing _brand.yml should not impede localized customizations.\nBecause the _brand.yml is by design incomplete for any given output format, it needs to fit into a workflow that makes specific outputs formats shareable and reproducible.\n\nThis could mean that _brand.yml tooling is flexible enough to store format-specific options, e.g. to encompass additional assets used in Shiny apps or Quarto websites, or format-specific options for Quarto PDF documents, etc.\nAlternatively, _brand.yml tooling could fit into larger, existing tools for sharing settings and formats, like R packages, Quarto custom formats, or a Shiny html_dependency().",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "brand.yml",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSupport for Shiny for R is expected to arrive in the very near future.↩︎",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "pkg/py/logo.html#attributes",
    "href": "pkg/py/logo.html#attributes",
    "title": "Logos and Images",
    "section": "Attributes",
    "text": "Attributes\n\nimages\n\ndict[str, BrandLogoResource] | None\nA dictionary containing any number of logos or brand images. You can refer to these images by their key name in small, medium or large. Local file paths should be relative to the _brand.yml source file. Remote files are also permitted; please use a full URL to the image.\nlogo:\n  images:\n    white: pandas_white.svg\n    white_online: \"https://upload.wikimedia.org/wikipedia/commons/e/ed/Pandas_logo.svg\"\n  small: white\n\nsmall\n\nBrandLogoFileType | None\nA small logo, typically used as an favicon or mobile app icon.\n\nmedium\n\nBrandLogoFileType | None\nA medium-sized logo, typically used in the header of a website.\n\nlarge\n\nBrandLogoFileType | None\nA large logo, typically used in a larger format such as a title slide or in marketing materials.",
    "crumbs": [
      "About",
      "Brand Components",
      "Logos and Images"
    ]
  },
  {
    "objectID": "pkg/py/logo.html#examples",
    "href": "pkg/py/logo.html#examples",
    "title": "Logos and Images",
    "section": "Examples",
    "text": "Examples\n\nSingle LogoMinimalLight/Dark VariantsCompleteComplete with Alt Text\n\n\n\n\n_brand.yml\n\nlogo: posit.png\n\n\n\n\n\n_brand.yml\n\nlogo:\n  small: logos/pandas/pandas_mark.svg\n  medium: logos/pandas/pandas_secondary.svg\n  large: logos/pandas/pandas.svg\n\n\n\n\n\n_brand.yml\n\nlogo:\n  small: logos/pandas/pandas_mark.svg\n  medium:\n    light: logos/pandas/pandas_secondary.svg\n    dark: logos/pandas/pandas_secondary_white.svg\n  large: logos/pandas/pandas.svg\n\n\n\n\n\n_brand.yml\n\nlogo:\n  images:\n    mark: logos/pandas/pandas_mark.svg\n    mark-white: logos/pandas/pandas_mark_white.svg\n    secondary: logos/pandas/pandas_secondary.svg\n    secondary-white: logos/pandas/pandas_secondary_white.svg\n    pandas: logos/pandas/pandas.svg\n    pandas-white: logos/pandas/pandas_white.svg\n  small: mark\n  medium:\n    light: logos/pandas/pandas_secondary.svg\n    dark: secondary-white\n  large: pandas\n\n\n\n\n\n_brand.yml\n\nlogo:\n  images:\n    mark:\n      path: logos/pandas/pandas_mark.svg\n      alt: pandas logo with blue bars and yellow and pink dots\n    mark-white: logos/pandas/pandas_mark_white.svg\n    secondary: logos/pandas/pandas_secondary.svg\n    secondary-white:\n      path: logos/pandas/pandas_secondary_white.svg\n      alt: pandas logo with bars and dots over the word \"pandas\"\n    pandas: logos/pandas/pandas.svg\n    pandas-white: logos/pandas/pandas_white.svg\n  small: mark\n  medium:\n    light:\n      path: logos/pandas/pandas_secondary.svg\n      alt: pandas logo with bars and dots over the word \"pandas\"\n    dark: secondary-white\n  large:\n    path: logos/pandas/pandas.svg\n    alt: pandas bars and dots to the right of the word \"pandas\"",
    "crumbs": [
      "About",
      "Brand Components",
      "Logos and Images"
    ]
  },
  {
    "objectID": "pkg/py/logo.html#attributes-1",
    "href": "pkg/py/logo.html#attributes-1",
    "title": "Logos and Images",
    "section": "Attributes",
    "text": "Attributes\n\n\n\nName\nDescription\n\n\n\n\nalt\nAlterative text for the image, used for accessibility.\n\n\npath\nThe path to the logo resource. This can be a local file or a URL.",
    "crumbs": [
      "About",
      "Brand Components",
      "Logos and Images"
    ]
  },
  {
    "objectID": "pkg/py/logo.html#attributes-2",
    "href": "pkg/py/logo.html#attributes-2",
    "title": "Logos and Images",
    "section": "Attributes",
    "text": "Attributes\n\n\n\nName\nDescription\n\n\n\n\ndark\nValue in dark mode.\n\n\nlight\nValue in light mode.",
    "crumbs": [
      "About",
      "Brand Components",
      "Logos and Images"
    ]
  },
  {
    "objectID": "pkg/py/logo.html#methods",
    "href": "pkg/py/logo.html#methods",
    "title": "Logos and Images",
    "section": "Methods",
    "text": "Methods\n\n\n\nName\nDescription\n\n\n\n\nabsolute\nAbsolute path of the file location, relative to the root directory.\n\n\nexists\nCheck that the file exists at its absolute path.\n\n\nrelative\nRelative path of the file location.\n\n\nset_root_dir\nUpdate the root directory of this file location.\n\n\nvalidate_exists\nValidate that the file exists at its absolute path.\n\n\n\n\nabsolute\nFileLocationLocal.absolute()\nAbsolute path of the file location, relative to the root directory.\nReturns the absolute path to the file, relative to the root directory, which is most typically the directory containing the _brand.yml file.\n\n\nexists\nFileLocationLocal.exists()\nCheck that the file exists at its absolute path.\n\n\nrelative\nFileLocationLocal.relative()\nRelative path of the file location.\nReturns the relative path to the file as it would appear in the source _brand.yml file.\n\n\nset_root_dir\nFileLocationLocal.set_root_dir(root_dir)\nUpdate the root directory of this file location.\nIn general, the root directory is the parent directory containing the source brand_yml file. If you relocate the file, this method can be used to update the new local file location.\n\n\nvalidate_exists\nFileLocationLocal.validate_exists()\nValidate that the file exists at its absolute path.\n\nRaises\n\n\n\nName\nType\nDescription\n\n\n\n\n\nFileNotFoundError\nRaises a FileNotFoundError if the file does not exist at its absolute path location.",
    "crumbs": [
      "About",
      "Brand Components",
      "Logos and Images"
    ]
  },
  {
    "objectID": "pkg/py/api.html",
    "href": "pkg/py/api.html",
    "title": "brand_yml Python Package Reference",
    "section": "",
    "text": "Read a _brand.yml file or create an instance of a Brand.\n\n\n\nBrand\nBrand guidelines in a class.\n\n\nread_brand_yml\nRead a Brand YAML file.\n\n\n\n\n\n\nIndividual brand components.\n\n\n\nMetadata\n\n\n\nLogos and Images\n\n\n\nColor Palette and Theme\n\n\n\nTypography"
  },
  {
    "objectID": "pkg/py/api.html#read-or-create-a-brand",
    "href": "pkg/py/api.html#read-or-create-a-brand",
    "title": "brand_yml Python Package Reference",
    "section": "",
    "text": "Read a _brand.yml file or create an instance of a Brand.\n\n\n\nBrand\nBrand guidelines in a class.\n\n\nread_brand_yml\nRead a Brand YAML file."
  },
  {
    "objectID": "pkg/py/api.html#brand-components",
    "href": "pkg/py/api.html#brand-components",
    "title": "brand_yml Python Package Reference",
    "section": "",
    "text": "Individual brand components.\n\n\n\nMetadata\n\n\n\nLogos and Images\n\n\n\nColor Palette and Theme\n\n\n\nTypography"
  },
  {
    "objectID": "pkg/py/Brand.html",
    "href": "pkg/py/Brand.html",
    "title": "Brand",
    "section": "",
    "text": "Brand()\nBrand guidelines in a class.\nA brand instance encapsulates the color, typography and logo preferences for a given brand, typically found in brand guidelines created by a company’s marketing department. brand_yml.Brand organizes this information in a common, fully-specified class instance that makes it easy to re-use for theming any artifact from websites to data visualizations.\nUnified brand information following the Brand YAML specification. Read brand metadata from a YAML file, typically named _brand.yml, with brand_yml.Brand.from_yaml or from a YAML string with brand_yml.Brand.from_yaml_str. Or create a full brand instance directly via this class.",
    "crumbs": [
      "About",
      "Read or create a brand",
      "Brand"
    ]
  },
  {
    "objectID": "pkg/py/Brand.html#attributes",
    "href": "pkg/py/Brand.html#attributes",
    "title": "Brand",
    "section": "Attributes",
    "text": "Attributes\n\nmeta\n\nBrandMeta | None\nKey identity information, name of the company, links to brand guidelines, etc.\n\nlogo\n\nBrandLogo | BrandLogoResource | None\nFiles or links to the brand’s logo at various sizes.\n\ncolor\n\nBrandColor | None\nNamed colors in the brand’s color palette and semantic colors (e.g., primary, secondary, success, warning).\n\ntypography\n\nBrandTypography | None\nFont definitions, font family, weight, style, color, and line height for key elements (e.g., base, headings, and monospace text).\n\ndefaults\n\ndict[str, Any] | None\nAdditional context-specific settings beyond the basic brand colors and typography.\n\npath\n\nPath | None\nThe file path of the brand configuration. This attribute is excluded from serialization and representation.",
    "crumbs": [
      "About",
      "Read or create a brand",
      "Brand"
    ]
  },
  {
    "objectID": "pkg/py/Brand.html#methods",
    "href": "pkg/py/Brand.html#methods",
    "title": "Brand",
    "section": "Methods",
    "text": "Methods\n\n\n\nName\nDescription\n\n\n\n\nfrom_yaml\nRead a Brand YAML file.\n\n\nfrom_yaml_str\nCreate a Brand instance from a string of YAML.\n\n\nmodel_dump_yaml\nSerialize the Brand object to YAML.\n\n\n\n\nfrom_yaml\nBrand.from_yaml(path)\nRead a Brand YAML file.\nReads a Brand YAML file or finds and reads a _brand.yml file and returns a validated :class:Brand object.\n\nParameters\n\npath: str | Path\n\nThe path to the Brand YAML file or a directory where _brand.yml is expected to be found. Typically, you can pass __file__ from the calling script to find _brand.yml in the current directory or any of its parent directories.\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\n\nA validated brand_yml.Brand object with all fields populated according to the Brand YAML file.\n\n\n\n\n\nRaises\n\n\n\nName\nType\nDescription\n\n\n\n\n\nFileNotFoundError\nRaises a FileNotFoundError if no brand configuration file is found within the given path. Raises ValueError or other validation errors from pydantic if the Brand YAML file is invalid.\n\n\n\n\n\nExamples\nfrom brand_yml import Brand\n\nbrand = Brand.from_yaml(__file__)\nbrand = Brand.from_yaml(\"path/to/_brand.yml\")\n\n\n\nfrom_yaml_str\nBrand.from_yaml_str(text, path=None)\nCreate a Brand instance from a string of YAML.\n\nParameters\n\ntext: str\n\nThe text of the Brand YAML file.\n\npath: str | Path | None = None\n\nThe optional path on disk for supporting files like logos and fonts.\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\n\nA validated brand_yml.Brand object with all fields populated according to the Brand YAML text.\n\n\n\n\n\nRaises\n\n\n\nName\nType\nDescription\n\n\n\n\n\nValueError\nRaises ValueError or other validation errors from pydantic if the Brand YAML file is invalid.\n\n\n\n\n\nExamples\n\nfrom brand_yml import Brand\n\nbrand = Brand.from_yaml_str(\"\"\"\nmeta:\n  name: Brand YAML\ncolor:\n  primary: \"#ff0202\"\ntypography:\n  base: Open Sans\n\"\"\")\n\n\nbrand.meta\n\nBrandMeta(name=BrandMetaName(full='Brand YAML'))\n\n\n\nbrand.color.primary\n\n'#ff0202'\n\n\n\n\n\nmodel_dump_yaml\nBrand.model_dump_yaml(stream=None, *, transform=None)\nSerialize the Brand object to YAML.\nWrite the brand_yml.Brand instance to a string or to a file on disk.\n\nExamples\n\nfrom brand_yml import Brand\n\nbrand = Brand.from_yaml_str(\"\"\"\nmeta:\n  name: Brand YAML\ncolor:\n  palette:\n    orange: \"#ff9a02\"\n  primary: orange\ntypography:\n  headings: Raleway\n\"\"\")\n\n\n\nprint(brand.model_dump_yaml())\n\nmeta:\n  name:\n    full: Brand YAML\ncolor:\n  palette:\n    orange: '#ff9a02'\n  primary: '#ff9a02'\ntypography:\n  fonts:\n    - family: Raleway\n  headings:\n    family: Raleway\n\n\n\n\n\n\nParameters\n\nstream: Any = None\n\nPassed to stream parameter of ruamel.yaml.YAML.dump.\n\ntransform: Any = None\n\nPassed to transform parameter of ruamel.yaml.YAML.dump.\n\n\n\n\nReturns\n\n\n\nName\nType\nDescription\n\n\n\n\n\nAny\nA string with the YAML representation of the brand if stream is None. Otherwise, the YAML representation is written to stream, typically a file. Note that the output YAML may not be 100% identical to the input _brand.yml. The output will contain the fully validated Brand instance where default or computed values may be included as well as any values resolved during validation, such as colors.",
    "crumbs": [
      "About",
      "Read or create a brand",
      "Brand"
    ]
  },
  {
    "objectID": "pkg/py/typography.html#examples",
    "href": "pkg/py/typography.html#examples",
    "title": "Typography",
    "section": "Examples",
    "text": "Examples\n\nMinimalMinimal with System FontSimpleWith FontsWith Color\n\n\nThis minimal example chooses only the font family for the base text, headings and monospace. These fonts will be sourced, by default, from Google Fonts.\n\n\n_brand.yml\n\ntypography:\n  base: Open Sans\n  headings: Roboto Slab\n  monospace: Fira Code\n\n\n\nBy default, fonts are sourced from Google Fonts, but you can also provide font sources in fonts. Here we’re using a system font for “Open Sans” and Google Fonts for the others.\n\n\n_brand.yml\n\ntypography:\n  fonts:\n    - family: Open Sans\n      source: system\n  base: Open Sans\n  headings: Roboto Slab\n  monospace: Fira Code\n\n\n\nIn addition to setting the font family for key elements, you can choose other typographic properties. This example sets the line height and font size for base text, uses the primary accent color for headings and reduces the font size for monospace code, in addition to choosing the font family for each.\n\n\n_brand.yml\n\ncolor:\n  primary: blue\ntypography:\n  base:\n    family: Open Sans\n    line-height: 1.25\n    size: 1rem\n  headings:\n    family: Roboto Slab\n    color: primary\n    weight: semi-bold\n  monospace:\n    family: Fira Code\n    size: 0.9em\n\n\n\nFont files may be sourced in a number of different ways.\n\nLocal or hosted (online) files\nFrom Google Fonts\nOr from Bunny Fonts (a GDPR-compliant) alternative to Google Fonts.\n\nEach font family should be declared in a list item provided to typography.fonts. Local font files can be stored adjacent to the _brand.yml file, and each file for a given family needs to be declared in the files key. Typically these font files cover a specific font weight and style.\n\n\n_brand.yml\n\ncolor:\n  primary: '#f24242'\ntypography:\n  fonts:\n    # Local files\n    - family: Open Sans\n      source: file\n      files:\n        - path: fonts/open-sans/OpenSans-Variable.ttf\n        - path: fonts/open-sans/OpenSans-Variable-Italic.ttf\n          style: italic\n\n    # Online files\n    - family: Closed Sans\n      source: file\n      files:\n        - path: https://example.com/Closed-Sans-Bold.woff2\n          weight: bold\n        - path: https://example.com/Closed-Sans-Italic.woff2\n          style: italic\n\n    # Online Font Foundries\n    - family: Roboto Slab\n      source: google\n      weight: 600..900\n      style: normal\n      display: block\n\n    - family: Fira Code\n      source: bunny\n      # weight: [100, 200, 300, 400, 500, 600, 700, 800, 900]\n      # style: [normal, italic]\n\n  base:\n    family: Open Sans\n    line-height: 1.25\n    size: 1rem\n\n  headings:\n    family: Roboto Slab\n    color: primary\n    weight: 600\n\n  monospace:\n    family: Fira Code\n    size: 0.9em\n\n\n\nColors in the typographic elements—color or background-color—can use the names of colors in color.palette or the theme color names in color.\n\n\n_brand.yml\n\ncolor:\n  palette:\n    red: '#FF6F61'\n  primary: '#87CEEB'\n  secondary: '#50C878'\n  danger: red\n  foreground: '#1b1818'\n  background: '#f7f4f4'\n\ntypography:\n  headings:\n    color: primary\n  monospace-inline:\n    color: background\n    background-color: red\n  monospace-block:\n    color: foreground\n    background-color: background\n  link:\n    color: danger",
    "crumbs": [
      "About",
      "Brand Components",
      "Typography"
    ]
  },
  {
    "objectID": "pkg/py/typography.html#attributes",
    "href": "pkg/py/typography.html#attributes",
    "title": "Typography",
    "section": "Attributes",
    "text": "Attributes\n\nfonts\n\nlist[BrandTypographyFontFamily]\nA list of font family definitions. Each definition in the list describes a font family that is available to the brand. Fonts may be stored in files (either adjacent to _brand.yml or hosted online) or may be provided by Google Fonts or Font Bunny (a GDPR-compliant Google Fonts alternative).\n\nbase\n\nBrandTypographyBase | None\nThe type used as the default text, primarily in the document body.\n\nheadings\n\nBrandTypographyHeadings | None\nThe type used for headings. Note that these settings cover all heading levels (h1, h2, etc.).\n\nmonospace\n\nBrandTypographyMonospace | None\nThe type used for code blocks and other monospaced text.\n\nmonospace_inline\n\nBrandTypographyMonospaceInline | None\nThe type used for inline code; inherits properties from monospace.\n\nmonospace_block\n\nBrandTypographyMonospaceBlock | None\nThe type use for code blocks; inherits properties from monospace.\n\nlink\n\nBrandTypographyLink | None\nType settings used for hyperlinks.",
    "crumbs": [
      "About",
      "Brand Components",
      "Typography"
    ]
  },
  {
    "objectID": "pkg/py/typography.html#methods",
    "href": "pkg/py/typography.html#methods",
    "title": "Typography",
    "section": "Methods",
    "text": "Methods\n\n\n\nName\nDescription\n\n\n\n\ncss_include_fonts\nGenerates CSS include statements for the defined fonts.\n\n\n\n\ncss_include_fonts\nBrandTypography.css_include_fonts()\nGenerates CSS include statements for the defined fonts.\nThis method creates CSS @import or @font-face rules for all fonts defined in the typography configuration.\n\nReturns\n\n\n\nName\nType\nDescription\n\n\n\n\n\nstr\nA string containing CSS include statements for all defined fonts.",
    "crumbs": [
      "About",
      "Brand Components",
      "Typography"
    ]
  },
  {
    "objectID": "pkg/py/typography.html#attributes-1",
    "href": "pkg/py/typography.html#attributes-1",
    "title": "Typography",
    "section": "Attributes",
    "text": "Attributes\n\n\n\nName\nDescription\n\n\n\n\nBrandTypographyFontFamily\nRuntime representation of an annotated type.",
    "crumbs": [
      "About",
      "Brand Components",
      "Typography"
    ]
  },
  {
    "objectID": "pkg/py/typography.html#classes",
    "href": "pkg/py/typography.html#classes",
    "title": "Typography",
    "section": "Classes",
    "text": "Classes\n\n\n\nName\nDescription\n\n\n\n\nBrandTypographyFontSource\nA base class representing a font source.\n\n\nBrandTypographyFontFiles\nA font family defined by a collection of font files.\n\n\nBrandTypographyFontGoogle\nA font family provided by Google Fonts.\n\n\nBrandTypographyFontBunny\nA font family provided by Bunny Fonts.\n\n\nBrandTypographyGoogleFontsApi\nA font source that utilizes the Google Fonts (or a compatible) API.\n\n\nBrandTypographyGoogleFontsWeightRange\nRepresents a range of font weights for Google Fonts.\n\n\nBrandTypographyBase\nTypographic settings for base (or body) text.\n\n\nBrandTypographyHeadings\nTypographic settings for headings and titles.\n\n\nBrandTypographyMonospace\nTypographic settings for monospace text.\n\n\nBrandTypographyMonospaceInline\nTypographic settings for inline monospace text.\n\n\nBrandTypographyMonospaceBlock\nTypographic settings for block monospace text.\n\n\nBrandTypographyLink\nTypographic settings for hyperlinks.\n\n\n\n\nBrandTypographyFontSource\ntypography.BrandTypographyFontSource()\nA base class representing a font source.\nThis class serves as a template for various font sources, encapsulating common properties and behaviors.\n\nAttributes\n\n\n\nName\nDescription\n\n\n\n\nfamily\nThe font family name.\n\n\nsource\nThe source of the font family, one of \"system\", \"file\", \"google\", or \"bunny\".\n\n\n\n\n\nMethods\n\n\n\nName\nDescription\n\n\n\n\nto_css\nCreate the CSS declarations needed to use the font family.\n\n\n\n\nto_css\ntypography.BrandTypographyFontSource.to_css()\nCreate the CSS declarations needed to use the font family.\n\n\n\n\nBrandTypographyFontFiles\ntypography.BrandTypographyFontFiles()\nA font family defined by a collection of font files.\nThis class represents a font family that is specified using individual font files, either from local files or files hosted online. A font family is generally composed of multiple font files for different weights and styles within the same family. Currently, TrueType (.ttf), OpenType (.otf), and WOFF (.woff or .woff2) formats are supported.\n\nExamples\ntypography:\n  fonts:\n    # Local font files\n    - family: Open Sans\n      files:\n        - path: fonts/open-sans/OpenSans-Bold.ttf\n          style: bold\n        - path: fonts/open-sans/OpenSans-Italic.ttf\n          style: italic\n\n    # Online files\n    - family: Closed Sans\n      files:\n        - path: https://example.com/Closed-Sans-Bold.woff2\n          weight: bold\n        - path: https://example.com/Closed-Sans-Italic.woff2\n          style: italic\n\n\n\nBrandTypographyFontGoogle\ntypography.BrandTypographyFontGoogle()\nA font family provided by Google Fonts.\nThis class represents a font family that is sourced from Google Fonts. It allows you to specify the font family name, weight range, and style.\nSubclass of brand_yml.typography.BrandTypographyGoogleFontsApi, the generic Google Fonts API font source.\n\nExamples\nIn this example, the Inter font is imported with all font weights and both normal and italic styles (these are the defaults). Additionally, the Roboto Slab font is sourced from Google Fonts with three specific font weights – 400, 600, 800 – and only the normal style.\nyaml typography:   fonts:     - family: Inter source: google     - family: Roboto Slab source: google weight: [400, 600, 800] style:       normal\n\n\n\nBrandTypographyFontBunny\ntypography.BrandTypographyFontBunny()\nA font family provided by Bunny Fonts.\nThis class represents a font family that is sourced from Bunny Fonts. It allows you to specify the font family name, weight range, and style.\nSubclass of brand_yml.typography.BrandTypographyGoogleFontsApi, the generic Google Fonts API font source.\n\nExamples\nIn this example, the Fira Code font is sourced from Bunny Fonts. By default all available weights and styles will be used.\ntypography:\n  fonts:\n    - family: Fira Code\n      source: bunny\n      # weight: [100, 200, 300, 400, 500, 600, 700, 800, 900]\n      # style: [normal, italic]\n\n\n\nBrandTypographyGoogleFontsApi\ntypography.BrandTypographyGoogleFontsApi()\nA font source that utilizes the Google Fonts (or a compatible) API.\nThis class provides a way to fetch and manage typography assets from Google Fonts, allowing for easy integration with brand-specific typographic styles.\n\nAttributes\n\n\n\nName\nDescription\n\n\n\n\ndisplay\nSpecifies how a font face is displayed based on whether and when it is downloaded and ready to use.\n\n\nstyle\nThe font style(s) (italic or normal) to be imported for the font family.\n\n\nurl\nURL of the Google Fonts-compatible API. (Primarily for internal use.)\n\n\nversion\nGoogle Fonts API version. (Primarily for internal use.)\n\n\nweight\nThe desired front weights to be imported for the font family.\n\n\n\n\n\nMethods\n\n\n\nName\nDescription\n\n\n\n\nto_import_url\nReturns the URL for the font family to be used in a CSS @import statement.\n\n\n\n\nto_import_url\ntypography.BrandTypographyGoogleFontsApi.to_import_url()\nReturns the URL for the font family to be used in a CSS @import statement.\n\n\n\n\nBrandTypographyGoogleFontsWeightRange\ntypography.BrandTypographyGoogleFontsWeightRange()\nRepresents a range of font weights for Google Fonts.\nThis class is used to specify a continuous range of font weights to be imported from Google Fonts for variable fonts that support a range of font weights. The weight range is represented as a list of two integers, where the first integer is the start of the range and the second is the end.\n\nExamples\n\n300..700: Represents a range from light (300) to bold (700)\n100..900: Represents the full range of weights from thin to black\n\n\n\nNote\nWhen serialized, this class will convert the range to a string format (e.g., “300..700”) for compatibility with the Google Fonts API.\n\n\nAttributes\n\nroot\n\nlist[BrandTypographyFontWeightInt]\nA list containing two integers representing the start and end of the weight range.\n\n\n\n\nMethods\n\n\n\nName\nDescription\n\n\n\n\nmodel_dump\nUsage docs: https://docs.pydantic.dev/2.9/concepts/serialization/#modelmodel_dump\n\n\n\n\nmodel_dump\ntypography.BrandTypographyGoogleFontsWeightRange.model_dump(\n    mode='python'\n    include=None\n    exclude=None\n    context=None\n    by_alias=False\n    exclude_unset=False\n    exclude_defaults=False\n    exclude_none=False\n    round_trip=False\n    warnings=True\n    serialize_as_any=False\n)\nUsage docs: https://docs.pydantic.dev/2.9/concepts/serialization/#modelmodel_dump\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\nArgs: mode: The mode in which to_python should run. If mode is ‘json’, the output will only contain JSON serializable types. If mode is ‘python’, the output may contain non-JSON-serializable Python objects. include: A set of fields to include in the output. exclude: A set of fields to exclude from the output. context: Additional context to pass to the serializer. by_alias: Whether to use the field’s alias in the dictionary key if defined. exclude_unset: Whether to exclude fields that have not been explicitly set. exclude_defaults: Whether to exclude fields that are set to their default value. exclude_none: Whether to exclude fields that have a value of None. round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T]. warnings: How to handle serialization errors. False/“none” ignores them, True/“warn” logs errors, “error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError]. serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\nReturns: A dictionary representation of the model.\n\n\n\n\nBrandTypographyBase\ntypography.BrandTypographyBase()\nTypographic settings for base (or body) text.\n\nAttributes\n\nfamily\n\nThe font family to be used. Note that the font family name should match a resource in typography.fonts.\n\nweight\n\nThe font weight (boldness) of the text.\n\nsize\n\nThe font size of the text. Should be a CSS length unit (e.g., 14px).\n\nline_height\n\nThe line height of the text. Line height refers to the vertical space between lines of text.\n\n\n\n\n\nBrandTypographyHeadings\ntypography.BrandTypographyHeadings()\nTypographic settings for headings and titles.\n\nAttributes\n\nfamily\n\nThe font family used for headings. Note that this should match a resource in typography.fonts.\n\nweight\n\nThe font weight (or boldness) of the text.\n\nstyle\n\nThe font style for the heading, i.e., whether it should be styled in a \"normal\" or \"italic\" style.\n\nline_height\n\nThe line height of the heading. Line height refers to the vertical space between lines of text.\n\ncolor\n\nThe color of the text.\n\n\n\n\nExamples\nThis example sets up typography settings for headings using the Inter font at a weight of 600 and with a line height that is 1.2 times the font size.\ntypography:\n  headings:\n    family: Inter\n    weight: 600\n    line_height: 1.2\n\n\n\nBrandTypographyMonospace\ntypography.BrandTypographyMonospace()\nTypographic settings for monospace text.\nThis class defines general typography options for monospace text, typically used for code blocks and other programming-related content. These choices can be further refined for inline and block monospace text using brand_yml.typography.BrandTypographyMonospaceInline and brand_yml.typography.BrandTypographyMonospaceBlock respectively.\n\nAttributes\n\nfamily\n\nThe font family to be used for monospace text. Note that the font family name should match a resource in typography.fonts.\n\nweight\n\nThe font weight (boldness) of the monospace text. Can be a numeric value between 100 and 900, or a string like “normal” or “bold”.\n\nsize\n\nThe font size of the monospace text. Should be a CSS length unit (e.g., “0.9em”, “14px”).\n\n\n\n\nExamples\nThis example sets up typography settings for monospace text using the Fira Code font at a slightly smaller size than the base text:\ntypography:\n  fonts:\n    - family: Fira Code\n      source: bunny\n  monospace:\n    family: Fira Code\n    size: 0.9em\nYou can also specify additional properties like weight:\ntypography:\n  monospace:\n    family: Fira Code\n    size: 0.9em\n    weight: 400\nFor more complex setups, you can define different styles for inline and block monospace text:\ntypography:\n  monospace:\n    family: Fira Code\n    size: 0.9em\n  monospace-inline:\n    color: \"#7d12ba\" # purple\n    background-color: \"#f8f9fa\" # light gray\n  monospace-block:\n    color: foreground\n    background-color: background\n\n\n\nBrandTypographyMonospaceInline\ntypography.BrandTypographyMonospaceInline()\nTypographic settings for inline monospace text.\nThis class defines typography options for inline monospace text, typically used for code snippets or technical terms within regular text. It inherits properties from brand_yml.typography.BrandTypographyMonospace with additional options for foreground and background colors.\n\nAttributes\n\nfamily\n\nThe font family to be used for inline monospace text. Note that the font family name should match a resource in typography.fonts.\n\nweight\n\nThe font weight (boldness) of the inline monospace text. Can be a numeric value between 100 and 900, or a string like “normal” or “bold”.\n\nsize\n\nThe font size of the inline monospace text. Should be a CSS length unit (e.g., “0.9em”, “14px”).\n\ncolor\n\nThe color of the inline monospace text. Can be any CSS-compatible color definition or a reference to a color defined in the brand’s color palette.\n\nbackground_color\n\nThe background color of the inline monospace text. Can be any CSS-compatible color definition or a reference to a color defined in the brand’s color palette.\n\n\n\n\nExamples\nThis example sets up typography settings for inline monospace text using the Fira Code font at a slightly smaller size than the base text, with custom colors:\ntypography:\n  fonts:\n    - family: Fira Code\n      source: bunny\n  monospace:\n    family: Fira Code\n    size: 0.9em\n  monospace-inline:\n    color: \"#7d12ba\"  # purple\n    background-color: \"#f8f9fa\"  # light gray\nYou can also use color names defined in your brand’s color palette:\ncolor:\n  palette:\n    red-light: \"#fff1f0\"\n  primary: \"#FF6F61\"\n  foreground: \"#1b1818\"\n  background: \"#f7f4f4\"\ntypography:\n  monospace-inline:\n    color: red\n    background-color: red-light\n\n\n\nBrandTypographyMonospaceBlock\ntypography.BrandTypographyMonospaceBlock()\nTypographic settings for block monospace text.\nThis class defines typography options for block monospace text, typically used for code blocks or other larger sections of monospaced content. It inherits properties from brand_yml.typography.BrandTypographyMonospace and adds options for line height, foreground color, and background color.\n\nAttributes\n\nfamily\n\nThe font family to be used for block monospace text. Note that the font family name should match a resource in typography.fonts.\n\nweight\n\nThe font weight (boldness) of the block monospace text. Can be a numeric value between 100 and 900, or a string like “normal” or “bold”.\n\nsize\n\nThe font size of the block monospace text. Should be a CSS length unit (e.g., “0.9em”, “14px”).\n\nline_height\n\nThe line height of the block monospace text. Line height refers to the vertical space between lines of text.\n\ncolor\n\nThe color of the block monospace text. Can be any CSS-compatible color definition or a reference to a color defined in the brand’s color palette.\n\nbackground_color\n\nThe background color of the block monospace text. Can be any CSS-compatible color definition or a reference to a color defined in the brand’s color palette.\n\n\n\n\nExamples\nThis example sets up typography settings for block monospace text using the Fira Code font at a slightly smaller size than the base text, with custom colors:\ntypography:\n  fonts:\n    - family: Fira Code\n      source: bunny\n  monospace:\n    family: Fira Code\n    size: 0.9em\n  monospace-block:\n    color: foreground\n    background-color: background\n    line-height: 1.4\n\n\n\nBrandTypographyLink\ntypography.BrandTypographyLink()\nTypographic settings for hyperlinks.\nThis class defines typography options for hyperlinks, allowing customization of font weight, colors, and text decoration.\n\nAttributes\n\nweight\n\nThe font weight (boldness) of the hyperlink text. Can be a numeric value between 100 and 900, or a string like “normal” or “bold”.\n\ncolor\n\nThe color of the hyperlink text. Can be any CSS-compatible color definition or a reference to a color defined in the brand’s color palette.\n\nbackground_color\n\nThe background color of the hyperlink text. Can be any CSS-compatible color definition or a reference to a color defined in the brand’s color palette.\n\ndecoration\n\nstr | None\nThe text decoration for the hyperlink. Common values include “underline”, “none”, or “underline”.\n\n\n\n\nExamples\nThis example sets up typography settings for hyperlinks with a custom color and text decoration:\ntypography:\n  link:\n    weight: 600\n    color: \"#FF6F61\"\n    decoration: underline\nYou can also use color names defined in your brand’s color palette:\ncolor:\n  palette:\n    red: \"#FF6F61\"\ntypography:\n  link:\n    weight: 600\n    color: red\n    decoration: underline",
    "crumbs": [
      "About",
      "Brand Components",
      "Typography"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/posit/index.html",
    "href": "inspiration/brand-guidelines/posit/index.html",
    "title": "Posit",
    "section": "",
    "text": "Posit Brand Guidelines",
    "crumbs": [
      "Posit"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/posit/index.html#highlights",
    "href": "inspiration/brand-guidelines/posit/index.html#highlights",
    "title": "Posit",
    "section": "Highlights",
    "text": "Highlights\n\n\n\nPosit Name Guidance\n\n\n\n\n\nPosit Typography Guidance\n\n\n\n\n\nPosit Color Guidance\n\n\n\n\n\nAdditional Primary Posit Tints\n\n\n\n\n\nAdditional Secondary Posit Tints",
    "crumbs": [
      "Posit"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/posit/index.html#colors",
    "href": "inspiration/brand-guidelines/posit/index.html#colors",
    "title": "Posit",
    "section": "Colors",
    "text": "Colors\nPrimary\n\nPosit Blue #447099\nPosit Orange #EE6331\nPosit Gray #404041\nPure White #FFFFFF\n\nSecondary\n\nPosit Teal #419599\nPosit Green #72994E\nPosit Burgundy #9A4665",
    "crumbs": [
      "Posit"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/posit/index.html#typography",
    "href": "inspiration/brand-guidelines/posit/index.html#typography",
    "title": "Posit",
    "section": "Typography",
    "text": "Typography\n\nPlease use Open Sans, and see the brand guidelines for helpful guidance on font style usage.\nIf you are limited to web-safe fonts, please use Arial. For monospace font use Source Code Pro.",
    "crumbs": [
      "Posit"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/posit/index.html#logo",
    "href": "inspiration/brand-guidelines/posit/index.html#logo",
    "title": "Posit",
    "section": "Logo",
    "text": "Logo\n\n\n\nName\nImage\n\n\n\n\nIcon\n\n\n\nFull\n\n\n\nReverse",
    "crumbs": [
      "Posit"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/home-depot/index.html",
    "href": "inspiration/brand-guidelines/home-depot/index.html",
    "title": "Home Depot",
    "section": "",
    "text": "Home Depot Brand Guidelines\n\n\n\nHome Depot (Foundation) Colors and Typography\n\n\n\n\n\n\n\n\nbrand.yml\n\n\n\n\n\ncolor:\n  palette:\n    orange: \"#F96302\"\n    white: \"#FFFFFF\"\n    black: \"#000000\"\n  theme:\n    primary: orange\n    secondary: \"#747474\"\n    light: white\n    dark: black\n\ntypography:\n  body:\n    family: Helvetica Nueue LT Pro\n  headings:\n    family: Helvetica Nueue LT Pro Condensed\n    weight: bold",
    "crumbs": [
      "Home Depot"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/slack/index.html",
    "href": "inspiration/brand-guidelines/slack/index.html",
    "title": "Slack",
    "section": "",
    "text": "Slack Brand Guidelines",
    "crumbs": [
      "Slack"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/slack/index.html#logos",
    "href": "inspiration/brand-guidelines/slack/index.html#logos",
    "title": "Slack",
    "section": "Logos",
    "text": "Logos\n\n\n\n\n\n\n\n\nName\nVariant\nImage\n\n\n\n\nMark\n\n\n\n\nMark\nBlack\n\n\n\nMark\nWhite\n\n\n\nLogo\nBlack\n\n\n\nLogo\nWhite",
    "crumbs": [
      "Slack"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/slack/index.html#colors",
    "href": "inspiration/brand-guidelines/slack/index.html#colors",
    "title": "Slack",
    "section": "Colors",
    "text": "Colors\n\nCore palette\n\n\n\n\n\n\n\n\n\n\nName\nHex\nRGB\nCMYK\nPMS\n\n\n\n\nAubergine\n#4A154B\nrgb(74 21 75)\n73 100 37 38\n2623 C\n\n\nHorchata\n#F4EDE4\nrgb(244 237 228)\n3 5 9 0\nPMS7604 C at 80%\n\n\nBlack\n#1D1C1D\nrgb(29 28 29)\n0 0 0 100\nBlack\n\n\nWhite\n#FFFFFF\nrgb(255 255 255)\n0 0 0 0\nNA\n\n\nSlack blue\n#36C5F0\nrgb(54 197 240)\n63 0 2 0\n298 C\n\n\nSlack green\n#2EB67D\nrgb(46 182 125)\n74 0 69 0\n2250 C\n\n\nSlack yellow\n#ECB22E\nrgb(236 178 46)\n7 31 95 0\n7409 C\n\n\nSlack red\n#E01E5A\nrgb(224 30 90)\n6 99 51 0\n214 C\n\n\n\n\n\nSecondary palette\n\n\n\n\n\n\n\n\n\n\nName\nHex\nRGB\nCMYK\nPMS\n\n\n\n\nCobalt\n#1E328F\nrgb(30 50 143)\n100 94 9 1\n661 C\n\n\nSky\n#0E9DD3\nrgb(14 157 211)\n76 22 3 0\n7689 C\n\n\nTeal\n#2392A2\nrgb(35 146 162)\n80 26 33 1\n2221 C\n\n\nPool\n#78D7DD\nrgb(120 215 221)\n48 0 16 0\n2225 C\n\n\nEvergreen\n#185F34\nrgb(24 95 52)\n87 37 95 32\n3425 C\n\n\nMoss\n#729C1A\nrgb(114 156 26)\n62 20 100 3\n576 C\n\n\nSandbar\n#FFD57E\nrgb(255 213 126)\n0 16 59 0\n7403 C\n\n\nPeach\n#FED4BE\nrgb(254 212 190)\n0 19 22 0\n489 C\n\n\nSalmon\n#F2606A\nrgb(242 96 106)\n0 78 48 0\n709 C\n\n\nBubblegum\n#FFB6BD\nrgb(225 182 189)\n0 36 13 0\n495 C\n\n\nCrimson\n#921D21\nrgb(146 29 33)\n27 99 95 27\n7623 C\n\n\nTerracotta\n#DE8969\nrgb(222 137 105)\n10 54 61 0\n2439 C\n\n\nBerry\n#7C2852\nrgb(124 40 82)\n45 94 43 25\n7658 C\n\n\nMauve\n#C05B8C\nrgb(192 91 140)\n24 78 19 0\n2060 C",
    "crumbs": [
      "Slack"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/slack/index.html#typography",
    "href": "inspiration/brand-guidelines/slack/index.html#typography",
    "title": "Slack",
    "section": "Typography",
    "text": "Typography\n\nOur brand fonts are Larsseit and Slack Circular. The following tables outline how best to use them.\n\nUse Larsseit for headlines. …\nUse Slack Circular for most other text, including paragraphs. …\nUse Inter for Google Slides presentations\nUse Helvetica Neue for email\n\n\n\n\n\nSlack typography guidelines for headings\n\n\n\n\n\nSlack typography guidelines for content",
    "crumbs": [
      "Slack"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/slack/index.html#shape",
    "href": "inspiration/brand-guidelines/slack/index.html#shape",
    "title": "Slack",
    "section": "Shape",
    "text": "Shape\nFrom https://brand.slackhq.com/brand-shapes\n\n\n\nSlack guidelines for shape\n\n\n\n\n\nSlack guidelines for stroke",
    "crumbs": [
      "Slack"
    ]
  },
  {
    "objectID": "brand/meta.html",
    "href": "brand/meta.html",
    "title": "Metadata",
    "section": "",
    "text": "Warning\n\n\n\nThis section still reflects the brand.yml spec during design. It will be updated shortly to reflect the current brand.yml specification.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Metadata"
    ]
  },
  {
    "objectID": "brand/meta.html#about",
    "href": "brand/meta.html#about",
    "title": "Metadata",
    "section": "About",
    "text": "About\nmeta provides a place to store metadata about the Company described in brand.yml. We should anticipate a few key pieces of information, but authors might want to include data we haven’t accounted for.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Metadata"
    ]
  },
  {
    "objectID": "brand/meta.html#example",
    "href": "brand/meta.html#example",
    "title": "Metadata",
    "section": "Example",
    "text": "Example\n\n\nbrand.yml\n\nmeta:\n  name: Posit\n  link: https://posit.co\n\n\n\nbrand.yml\n\nmeta:\n  name:\n    full: Posit Software, PBC\n    short: Posit\n  link:\n    home: https://posit.co\n    guide: https://positpbc.atlassian.net/wiki/x/AQAgBQ\n    mastodon: https://fosstodon.org/@Posit\n    linkedin: https://www.linkedin.com/company/posit-software/\n    twitter: https://twitter.com/posit_pbc",
    "crumbs": [
      "About",
      "Brand Elements",
      "Metadata"
    ]
  },
  {
    "objectID": "brand/meta.html#spec",
    "href": "brand/meta.html#spec",
    "title": "Metadata",
    "section": "Spec",
    "text": "Spec\n- id: brand-meta\n  description: &gt;\n    Metadata for a brand, including the brand name and important links.\n  object:\n    closed: false\n    properties:\n      name:\n        description: The brand name.\n        anyOf:\n          - string\n          - object:\n              properties:\n                full:\n                  string:\n                    description: The full, official or legal name of the company or brand.\n                short:\n                  string:\n                    description: The short, informal, or common name of the company or brand.\n      link:\n        description: &gt;\n          Important links for the brand, including social media links.\n          If a single string, it is the brand's home page or website.\n          Additional fields are allowed for internal use.\n        anyOf:\n          - string\n          - object:\n              properties:\n                home:\n                  string:\n                    description: The brand's home page or website.\n                mastodon:\n                  string:\n                    description: The brand's Mastodon URL.\n                github:\n                  string:\n                    description: The brand's GitHub URL.\n                linkedin:\n                  string:\n                    description: The brand's LinkedIn URL.\n                twitter:\n                  string:\n                    description: The brand's Twitter URL.\n                facebook:\n                  string:\n                    description: The brand's Facebook URL.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Metadata"
    ]
  },
  {
    "objectID": "brand/index.html",
    "href": "brand/index.html",
    "title": "brand.yml Structure",
    "section": "",
    "text": "brand.yml\n\n1meta:\n  name: brand.yml\n  links:\n    home: https://posit-dev.github.io/brand-yml\n    github: https://github.com/posit-dev/brand-yml\n\n2logo:\n  images:\n    icon-color: logos/icon/brand-yml-icon-color.png\n    wide-color: logos/wide/brand-yml-wide-color.png\n    tall-color: logos/wide/brand-yml-tall-color.png\n  small: icon-color\n  medium: wide-color\n  large: tall-color\n\ncolor:\n3  palette:\n    orange: \"#FF6F20\"\n    pink: \"#FF3D7F\"\n    green: \"#28A745\"\n    yellow: \"#FFC107\"\n4  primary: orange\n  success: green\n  warning: yellow\n  danger: pink\n\ntypography:\n5  fonts:\n    - family: Open Sans\n      source: google\n    - family: IBM Plex Mono\n      source: google\n    - family: Rubik\n      source: google\n6  base:\n    family: Open Sans\n    line-height: 1.6\n  headings:\n    family: Rubik\n    weight: normal\n  link:\n    color: purple\n  monospace:\n    family: IBM Plex Mono\n    size: 1em\n\n7defaults:\n  bootstrap:\n    # bootstrap variable definitions\n  quarto:\n    format:\n      # basic format-specific settings\n      html:\n      revealjs:\n  shiny:\n    # shiny specific settings\n\n\n1\n\nmeta: Key identity information, name of the company, links to brand guidelines, etc.\n\n2\n\nlogo: Files or links to the brand’s logo at various sizes.\n\n3\n\ncolor.palette: Named colors in the brand’s color palette.\n\n4\n\ncolor: Semantic colors, e.g. primary, secondary, success, warning, etc.\n\n5\n\ntypography.fonts: Font definitions for Google, remote or bundled fonts.\n\n6\n\ntypography: Font family, weight, style, color, and line height for key elements, e.g. base, headings and monospace text.\n\n7\n\ndefaults: Additional context-specific settings beyond the basic brand colors and typography. These could be options, for example, that are used by Boostrap in Quarto or Shiny. They could also be folded into existing Quarto yaml fields like format or website, or they could be new fields for other contexts like shiny.",
    "crumbs": [
      "About",
      "Structure"
    ]
  },
  {
    "objectID": "brand/index.html#outline",
    "href": "brand/index.html#outline",
    "title": "brand.yml Structure",
    "section": "",
    "text": "brand.yml\n\n1meta:\n  name: brand.yml\n  links:\n    home: https://posit-dev.github.io/brand-yml\n    github: https://github.com/posit-dev/brand-yml\n\n2logo:\n  images:\n    icon-color: logos/icon/brand-yml-icon-color.png\n    wide-color: logos/wide/brand-yml-wide-color.png\n    tall-color: logos/wide/brand-yml-tall-color.png\n  small: icon-color\n  medium: wide-color\n  large: tall-color\n\ncolor:\n3  palette:\n    orange: \"#FF6F20\"\n    pink: \"#FF3D7F\"\n    green: \"#28A745\"\n    yellow: \"#FFC107\"\n4  primary: orange\n  success: green\n  warning: yellow\n  danger: pink\n\ntypography:\n5  fonts:\n    - family: Open Sans\n      source: google\n    - family: IBM Plex Mono\n      source: google\n    - family: Rubik\n      source: google\n6  base:\n    family: Open Sans\n    line-height: 1.6\n  headings:\n    family: Rubik\n    weight: normal\n  link:\n    color: purple\n  monospace:\n    family: IBM Plex Mono\n    size: 1em\n\n7defaults:\n  bootstrap:\n    # bootstrap variable definitions\n  quarto:\n    format:\n      # basic format-specific settings\n      html:\n      revealjs:\n  shiny:\n    # shiny specific settings\n\n\n1\n\nmeta: Key identity information, name of the company, links to brand guidelines, etc.\n\n2\n\nlogo: Files or links to the brand’s logo at various sizes.\n\n3\n\ncolor.palette: Named colors in the brand’s color palette.\n\n4\n\ncolor: Semantic colors, e.g. primary, secondary, success, warning, etc.\n\n5\n\ntypography.fonts: Font definitions for Google, remote or bundled fonts.\n\n6\n\ntypography: Font family, weight, style, color, and line height for key elements, e.g. base, headings and monospace text.\n\n7\n\ndefaults: Additional context-specific settings beyond the basic brand colors and typography. These could be options, for example, that are used by Boostrap in Quarto or Shiny. They could also be folded into existing Quarto yaml fields like format or website, or they could be new fields for other contexts like shiny.",
    "crumbs": [
      "About",
      "Structure"
    ]
  },
  {
    "objectID": "brand/index.html#description",
    "href": "brand/index.html#description",
    "title": "brand.yml Structure",
    "section": "Description",
    "text": "Description\n\nmeta\n\nKey identity information, name of the company, links to brand guidelines, etc.\n\nlogo\n\nFiles or links to the brand’s logo at various sizes.\n\ncolor\n\nSemantic colors, e.g. primary, secondary, success, warning, etc. color.palette: Named colors in the brand’s color palette.\n\ntypography\n\nFont family, weight, style, color, and line height for key elements, e.g. base, headings and monospace text. typography.fonts: Font definitions for Google, remote or bundled fonts.\n\ndefaults\n\nAdditional context-specific settings beyond the basic brand colors and typography. These could be options, for example, that are used by Boostrap in Quarto or Shiny. They could also be folded into existing Quarto yaml fields like format or website, or they could be new fields for other contexts like shiny.",
    "crumbs": [
      "About",
      "Structure"
    ]
  },
  {
    "objectID": "brand/defaults.html",
    "href": "brand/defaults.html",
    "title": "Defaults",
    "section": "",
    "text": "Warning\n\n\n\nThis section still reflects the brand.yml spec during design. It will be updated shortly to reflect the current brand.yml specification.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Defaults"
    ]
  },
  {
    "objectID": "brand/defaults.html#about",
    "href": "brand/defaults.html#about",
    "title": "Defaults",
    "section": "About",
    "text": "About\nIndividual formats and outputs can expose format-specific variables or options that are relevant to branding. These options are tied to a specific output format or context, so they can’t be included in the core brand specification. But they are still relevant to the brand and need a place within brand.yml.\nFor example, Quarto slides expose a set of Sass variables while HTML documents and Shiny apps use Sass variables set by Bootstrap.\nOn the other hand, some theme-relevant settings are actually format options, or are built on top of a base of format options. For example, when creating a branded Beamer presentation, its often easier to start with a known theme or colortheme. Or similarly, it might be easier in Bootstrap to start with a Bootswatch theme.\nA source of inspiration for this section is pkgdown’s approach to template packaging, where a source template provides the initial values for _pkgdown.yml settings that can be overridden in local instances. In this regard, the template section provides a template for the initial values of format- or output-specific settings. An alternative name for this section could be settings.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Defaults"
    ]
  },
  {
    "objectID": "brand/defaults.html#example",
    "href": "brand/defaults.html#example",
    "title": "Defaults",
    "section": "Example",
    "text": "Example\n\n\nbrand.yml\n\ndefaults:\n  quarto:\n    format:\n      html:\n        toc: true\n        toc-location: left\n      beamer:\n        navigation: horizontal\n        theme: AnnArbor\n        colortheme: lily\n    website:\n      body-footer: Copyright 2022-2024 Posit Software, PBC\n  bootstrap:\n    defaults:\n      enable-rounded: false\n      link-decoration: none",
    "crumbs": [
      "About",
      "Brand Elements",
      "Defaults"
    ]
  },
  {
    "objectID": "brand/defaults.html#spec",
    "href": "brand/defaults.html#spec",
    "title": "Defaults",
    "section": "Spec",
    "text": "Spec\n- id: brand-defaults\n  description: &gt;\n    Additional format or output-specific options, used as a template\n    for these settings in those contexts.\n  object:\n    properties:\n      quarto:\n        object:\n          properties:\n            format:\n              description: Quarto format options.\n              schema: object\n            website:\n              description: Quarto `website` options.\n              schema: object\n            book:\n              description: Quarto `book` options.\n              schema: object\n      bootstrap:\n        description: Bootstrap theme settings, similar to `bslib::bs_theme()`.\n        object:\n          closed: true\n          properties:\n            uses: string\n            functions: string\n            defaults:\n              description: Sass variables.\n              schema: object\n              namingConvention: kebab-case\n            mixins: string\n            rules: string\n      shiny:\n        description: Settings specific to Shiny applications.\n        schema: object",
    "crumbs": [
      "About",
      "Brand Elements",
      "Defaults"
    ]
  },
  {
    "objectID": "brand/defaults.html#sources",
    "href": "brand/defaults.html#sources",
    "title": "Defaults",
    "section": "Sources",
    "text": "Sources\n\nBootstrap\nSome of the most basic non-color concepts found in\n\nhttps://getbootstrap.com/docs/5.3/customize/options/\nhttps://getbootstrap.com/docs/5.3/customize/css-variables/\n\nIf we have a deafults.bootstrap field, it would support the named sections used by theme Sass files in Quarto.\n\nHTML basic options\nExample from Quarto HTML documentation:\n---\ntitle: \"My Document\"\nformat:\n  html:\n    theme: cosmo\n    fontsize: 1.1em\n    linestretch: 1.7\n---\n\n\nBeamer options\nExample from Quarto slides with beamer documentation\n---\nformat:\n  beamer:\n    aspectratio: 32\n    navigation: horizontal\n    theme: AnnArbor\n    colortheme: lily\n---",
    "crumbs": [
      "About",
      "Brand Elements",
      "Defaults"
    ]
  },
  {
    "objectID": "brand/typography.html",
    "href": "brand/typography.html",
    "title": "Typograqphy",
    "section": "",
    "text": "Warning\n\n\n\nThis section still reflects the brand.yml spec during design. It will be updated shortly to reflect the current brand.yml specification.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Typograqphy"
    ]
  },
  {
    "objectID": "brand/typography.html#about",
    "href": "brand/typography.html#about",
    "title": "Typograqphy",
    "section": "About",
    "text": "About\n\nFonts\nThe goal of the with property (may be aliased as font or fonts) is to specify font files that should be included in the brand theme. The primary goal is to provide brand.yml consumers to find and download the fonts used by the brand. brand.yml authors only need to include fonts that are not installed on the system. In general, we support three font sources:\n\nGoogle Fonts\nDirect URLs\nFonts bundled with the brand.yml\n\nbrand.yml tooling will be able to provision fonts from Google and remote fonts to a local directory. Where these fonts are stored might be different depending on the output format.\nFor bundled fonts, we should consider re-using Quarto extension or custom format infrastructure to make it possible to bundle and share brand.yml assets. See Open Questions for more details.\n\n\nTypography\nDetermining which fonts are used for key elements is a separate step. This ensures that the typography settings are independent of the font source, and it makes it easier for us to handle the font-downloading tasks by focusing only on the typography.fonts property.\nThe typography property is used to specify the fonts and some basic typographic settings for key content types:\n\nbase\n\nThe type used as the default text, primarily in the document body.\n\nheadings\n\nThe type used for headings. Note that these settings cover all heading levels (h1, h2, etc.).\n\nmonospace\n\nThe type used for code blocks and other monospaced text.\n\n\nIn the future we can consider adding more types, such as h1, h2, etc., or blockquote, links, etc.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Typograqphy"
    ]
  },
  {
    "objectID": "brand/typography.html#example",
    "href": "brand/typography.html#example",
    "title": "Typograqphy",
    "section": "Example",
    "text": "Example\n\n\nbrand.yml\n\ntypography:\n  with:\n    open-sans:\n      google: \"Open Sans\"\n    fira-code:\n      google: \"Fira Code\"\n    roboto-slab:\n      google:\n        family: \"Roboto Slab\"\n        weight: 600\n        style: normal\n        display: block\n\n  base:\n    family: open-sans\n    line-height: 1.25\n    size: 1rem\n  headings:\n    family: robot-slab\n    color: primary\n    weight: 600\n  monospace:\n    family: fira-code\n    size: 0.9em",
    "crumbs": [
      "About",
      "Brand Elements",
      "Typograqphy"
    ]
  },
  {
    "objectID": "brand/typography.html#spec",
    "href": "brand/typography.html#spec",
    "title": "Typograqphy",
    "section": "Spec",
    "text": "Spec\n- id: brand-typography\n  description: Typography definitions for the brand.\n  object:\n    closed: true\n    properties:\n      with:\n        description: Font files and definitions for the brand.\n        ref: brand-font\n      base:\n        description: &gt;\n          The base font settings for the brand. These are used as the default for all text.\n        ref: brand-typography-options\n      headings:\n        description: &gt;\n          The font settings for headings.\n        ref: brand-typography-options-no-size\n      monospace:\n        description: &gt;\n          The font settings for monospace text. Color in this context refers to inline code.\n        ref: brand-typography-options\n      emphasis:\n        description: The text properties used for emphasized (or emboldened) text.\n        object:\n          closed: true\n          properties:\n            weight:\n              ref: brand-font-weight\n            color:\n              ref: brand-maybe-named-color\n            background-color:\n              ref: brand-maybe-named-color\n      link:\n        description: The text properties used for hyperlinks.\n        object:\n          closed: true\n          properties:\n            weight:\n              ref: brand-font-weight\n            decoration: string\n            color:\n              schema:\n                ref: brand-maybe-named-color\n              default: primary\n            background-color:\n              ref: brand-maybe-named-color\n\n- id: brand-typography-options\n  description: Typographic options.\n  object:\n    closed: true\n    properties:\n      family: string\n      size: string\n      line-height: string\n      weight:\n        ref: brand-font-weight\n      style:\n        ref: brand-font-style\n      color:\n        ref: brand-maybe-named-color\n      background-color:\n        ref: brand-maybe-named-color\n\n- id: brand-typography-options-no-size\n  description: Typographic options without a font size.\n  object:\n    closed: true\n    properties:\n      family: string\n      line-height: string\n      weight:\n        ref: brand-font-weight\n      style:\n        ref: brand-font-style\n      color:\n        ref: brand-maybe-named-color\n      background-color:\n        ref: brand-maybe-named-color\n\n- id: brand-font\n  description: Font files and definitions for the brand.\n  arrayOf:\n    anyOf:\n      - ref: brand-font-google\n      - ref: brand-font-file\n      - ref: brand-font-family\n\n- id: brand-font-weight\n  description: A font weight.\n  enum: [100, 200, 300, 400, 500, 600, 700, 800, 900]\n  default: 400\n\n- id: brand-font-style\n  description: A font style.\n  enum: [normal, italic]\n  default: normal\n\n- id: brand-font-google\n  description: A Google Font definition.\n  object:\n    closed: true\n    properties:\n      google:\n        anyOf:\n          - string\n          - object:\n              closed: true\n              properties:\n                family:\n                  description: The font family name, which must match the name of the font on Google Fonts.\n                  schema: string\n                weight:\n                  description: The font weights to include.\n                  maybeArrayOf:\n                    ref: brand-font-weight\n                  default: [400, 700]\n                style:\n                  description: The font style to include.\n                  maybeArrayOf:\n                    ref: brand-font-style\n                  default: [normal, italic]\n                display:\n                  description: &gt;\n                    The font display method, determines how a font face is font face is shown\n                    depending on its download status and readiness for use.\n                  enum: [auto, block, swap, fallback, optional]\n                  default: swap\n\n- id: brand-font-file\n  description: A method for providing font files directly, either locally or from an online location.\n  object:\n    closed: true\n    properties:\n      family:\n        description: The font family name.\n        schema: string\n      files:\n        maybeArrayOf:\n          anyOf: [path, string]\n        description: &gt;\n          The font files to include. These can be local or online.\n          Local file paths should be relative to the `brand.yml` file.\n          Online paths should be complete URLs.\n\n- id: brand-font-family\n  description: &gt;\n    A locally-installed font family name. When used, the end-user is responsible\n    for ensuring that the font is installed on their system.\n  schema: string",
    "crumbs": [
      "About",
      "Brand Elements",
      "Typograqphy"
    ]
  },
  {
    "objectID": "brand/typography.html#font-customization-in-r-and-quarto",
    "href": "brand/typography.html#font-customization-in-r-and-quarto",
    "title": "Typograqphy",
    "section": "Font Customization in R and Quarto",
    "text": "Font Customization in R and Quarto\n\nBootstrap\n\nBootstrap typography docs\nFont-related variables in scss/_variables.scss\n\n$font-family-sans-serif:  system-ui, -apple-system, \"Segoe UI\", Roboto, \"Helvetica Neue\", \"Noto Sans\", \"Liberation Sans\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\" !default;\n$font-family-monospace:   SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace !default;\n// --\n$font-family-base:        var(--#{$prefix}font-sans-serif) !default;\n$font-family-code:        var(--#{$prefix}font-monospace) !default;\n\n// $font-size-root affects the value of `rem`, which is used for as well font sizes, paddings, and margins\n// $font-size-base affects the font size of the body text\n$font-size-root:          null !default;\n$font-size-base:          1rem !default; // Assumes the browser default, typically `16px`\n// --\n$headings-font-family:    null !default;\n$headings-font-style:     null !default;\n$headings-font-weight:    500 !default;\n$headings-line-height:    1.2 !default;\n$headings-color:          inherit !default;\n// --\n$display-font-family:     null !default;\n$display-font-style:      null !default;\n$display-font-weight:     300 !default;\n$display-line-height:     $headings-line-height !default;\n// --\n$input-btn-font-family:   null !default;\n$input-btn-font-size:     $font-size-base !default;\n$input-btn-line-height:   $line-height-base !default;\n// --\n$btn-font-family:         $input-btn-font-family !default;\n$btn-font-size:           $input-btn-font-size !default;\n$btn-line-height:         $input-btn-line-height !default;\n// --\n$input-font-family:       $input-btn-font-family !default;\n$input-font-size:         $input-btn-font-size !default;\n$input-font-weight:       $font-weight-base !default;\n$input-line-height:       $input-btn-line-height !default;\n\n\nbslib\n\n---\noutput:\n  html_document:\n    theme:\n      base_font:\n        google: \"Inter\"\n      code_font:\n        google: \"Fira Code\"\n      heading_font:\n        google: \"Roboto Slab\"\n---\n\nR Markdown document example (source)\n\n\nbs_theme(\n  base_font = font_google(\"Inter\"),\n  code_font = font_google(\"Fira Code\"),\n  heading_font = font_google(\"Roboto Slab\")\n)\n\nfont_google(\n  family,\n  local = TRUE,\n  cache = sass_file_cache(sass_cache_context_dir()),\n  wght = NULL,\n  ital = NULL,\n  display = c(\"swap\", \"auto\", \"block\", \"fallback\", \"optional\")\n)\n\nfont_google() is exported from sass\n\n\n\n\nDetails\n\n\nfamily\n\nA character string with a single font family name.\n\nlocal\n\nWhether or not download and bundle local (woff2) font files.\n\ncache\n\nA sass_file_cache() object (or, more generally, a file caching class with $get_file() and $set_file() methods). Set this argument to FALSE or NULL to disable caching.\n\nwght\n\nOne of the following:\n\nNULL, the default weight for the family.\nA character string defining an axis range\nA numeric vector of desired font weight(s).\n\n\nital\n\nOne of the following:\n\nNULL, the default font-style for the family.\n0, meaning font-style: normal\n1, meaning font-style: italic\nc(0, 1), meaning both normal and italic\n\n\ndisplay\n\nA character vector for the font-display @font-face property.\n\n\n\n\n\npkgdown\n\ntemplate:\n  bootstrap: 5\n  bslib:\n    base_font: {google: \"Roboto\"}\n    heading_font: {google: \"Roboto Slab\"}\n    code_font: {google: \"JetBrains Mono\"}\n\nBasic pkgdown example (source)\n\n\n\ntemplate:\n  bslib:\n    base_font:\n      google:\n        family: Open Sans\n        wght: [300, 400, 500]\n    code_font:\n      google: Source Code Pro\n    sans_font: Open Sans\n    heading_font: Open Sans\n    headings-font-weight: 300\n\nComplicated font example (source)\n\n\n\n\nQuarto\n\nHTML\nProvides mainfont and monofont in Basic Options. These are used by src/resources/foramts/html/pandoc/styles.html. Note that a corresponding setting for headings is not included.\n\n@import 'https://fonts.googleapis.com/css?family=Lato';\n\nh1, h2, h3, h4, p {\n  font-family: 'Lato', Arial, sans-serif;\n}\n\nQuarto in-the-wild example (nhsr-quarto)\n\n\n\n\nPresentations\nSimilar to HTML documents, it appears that Boostrap Sass variables have been replicated for revealjs, with some Sass variables of their own:\n\n$font-family-sans-serif\n$font-family-monospace\n$presentation-heading-font\n\n// fonts\n$font-family-sans-serif: \"Palatino Linotype\", \"Book Antiqua\", Palatino,\n  FreeSerif, serif !default;\n\n$presentation-heading-font: \"Palatino Linotype\", \"Book Antiqua\", Palatino,\n  FreeSerif, serif !default;\n$presentation-heading-color: #383d3d !default;\n\n\nTypst\nTypst only supports mainfont\nformat:\n  typst:\n    mainfont: \"Agbalumo\"\n    font-paths: myfonts\n\n\nPDF\nUses mainfont, sansfont and monofont, which, for xelatex (the default LaTeX engine), need to be installed on the system. (Source)",
    "crumbs": [
      "About",
      "Brand Elements",
      "Typograqphy"
    ]
  },
  {
    "objectID": "brand/typography.html#appendix---variations",
    "href": "brand/typography.html#appendix---variations",
    "title": "Typograqphy",
    "section": "Appendix - Variations",
    "text": "Appendix - Variations\n\n\nbrand.yml (simple)\n\nfont:\n  base: \"Open Sans\"\n  headings:\n    google: \"Roboto Slab\"\n  monospace:\n    google: \"Fira Code\"\n\n\n\nbrand.yml (full)\n\nfont:\n  base: \"Open Sans\"\n  headings:\n    google:\n      family: \"Roboto Slab\"\n      weight: [600, 800]\n      style: normal\n      display: block\n  monospace:\n    google:\n      family: \"Fira Code\"\n      weight: 300\n  galada:\n    family: \"Galada\"\n    files: \"fonts/Galada-Regular.ttf\"\n  oswald:\n    family: \"Oswald\"\n    files:\n      - https://github.com/vernnobile/OswaldFont/raw/master/3.0/Roman/700/Oswald-Bold.ttf\n      - https://github.com/vernnobile/OswaldFont/raw/master/3.0/Roman/400/Oswald-Regular.ttf\n\nAlternatively, the font property could be limited to just defining the fonts that should be installed on the system.\n\n\nbrand.yml (separate font and typography)\n\nfont:\n  - google: \"Fira Code\"\n  - google:\n      family: \"Roboto Slab\"\n      weight: [600, 800]\n      style: normal\n      display: block\n  - family: \"Galada\"\n    files: \"fonts/Galada-Regular.ttf\"\n  - family: \"Oswald\"\n    files:\n      - https://github.com/vernnobile/OswaldFont/raw/master/3.0/Roman/700/Oswald-Bold.ttf\n      - https://github.com/vernnobile/OswaldFont/raw/master/3.0/Roman/400/Oswald-Regular.ttf\n\ntypography:\n  base:\n    family: \"Open Sans\"\n  headings:\n    family: \"Roboto Slab\"\n  monospace:\n    family: \"Fira Code\"\n\nAnother approach would be to nest fonts under typography:\n\n\nbrand.yml (nested font and typography)\n\ntypography:\n  fonts:\n    - google: \"Fira Code\"\n    - google:\n        family: \"Roboto Slab\"\n        weight: [600, 800]\n        style: normal\n        display: block\n    - family: \"Galada\"\n      files: \"fonts/Galada-Regular.ttf\"\n    - family: \"Oswald\"\n      files:\n        - https://github.com/vernnobile/OswaldFont/raw/master/3.0/Roman/700/Oswald-Bold.ttf\n        - https://github.com/vernnobile/OswaldFont/raw/master/3.0/Roman/400/Oswald-Regular.ttf\n  base:\n    family: \"Open Sans\"\n    weight: 400\n    line-height: 1.5\n  headings:\n    family: \"Roboto Slab\"\n    color: \"--primary\"\n  monospace:\n    family: \"Fira Code\"\n\n\n\nbrand.yml (nested font and typography)\n\ntypography:\n  fonts:\n    - google: \"Fira Code\"\n    - google: \"Roboto Slab\"\n    - google: \"Open Sans\"\n  base:\n    family: \"Open Sans\"\n    weight: 400\n    line-height: 1.5\n  headings:\n    family: \"Roboto Slab\"\n    color: \"--primary\"\n  monospace:\n    family: \"Fira Code\"\n\n\n\nbrand.yml (nested font and typography)\n\ntypography:\n  base:\n    family:\n      google: \"Open Sans\"\n    location: google\n    weight: 400\n    line-height: 1.5\n  headings:\n    family:\n      google: \"Roboto Slab\"\n    location:\n      - fonts/Roboto Slab Regular.ttf\n      - fonts/Roboto Slab Bold.ttf\n    color: \"--brand-primary\"\n  monospace:\n    family:\n      google: \"Fira Code\"\n  h2:\n    family: Open Sans\n    weight: 300\n    color: black\n\nOr font could be a property of any typography element. This makes font- properties more consistent, e.g. font.family, font.weight, etc., but it also makes typography items more complex (which properties are nested under font and which aren’t?).\n\n\nbrand.yml (font in typography)\n\ntypography:\n  base:\n    font:\n      family: \"Open Sans\"\n      weight: 400\n    line-height: 1.5\n  headings:\n    font:\n      google:\n        family: \"Roboto Slab\"\n        weight: [600, 800]\n        style: normal\n        display: block\n    color: \"--primary\"\n  monospace:\n    font:\n      google: \"Fira Code\"",
    "crumbs": [
      "About",
      "Brand Elements",
      "Typograqphy"
    ]
  },
  {
    "objectID": "brand/color.html",
    "href": "brand/color.html",
    "title": "Color",
    "section": "",
    "text": "Warning\n\n\n\nThis section still reflects the brand.yml spec during design. It will be updated shortly to reflect the current brand.yml specification.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Color"
    ]
  },
  {
    "objectID": "brand/color.html#about",
    "href": "brand/color.html#about",
    "title": "Color",
    "section": "About",
    "text": "About\ncolor:\n  with:\n    # user-provided named colors\n  # semantic theme colors\n  primary: ...\n  secondary ...\n\nPalette (with)\nBrand guidelines often include color palette definitions, ranging from one or two colors to entire palettes. Often, these colors are given names with specific meaning to the brand.\nThe color.with section gives brand.yml authors a chance to codify their brand’s palette with minimal overhead. These colors can be used by name for the semantic theme colors under color.\nwith may be aliased as palette.\n\n\nColor Theme\nWhile brand guidelines might provide a set of unique colors, the goal of color is to provide color values for a key set of semantic theme fields. These fields follow Bootstrap conventions closely but are universal and are easily mapped to any themable output format.\n\nInspiration\nDirectly themable\n\nBootstrap theme colors\nQuarto HTML basic theme options\nQuarto revealjs Sass variables\n\nIndirectly themable\n\nOffice templates\n\nQuarto Word documents\nQuarto PowerPoint slides\nGenerally users would provide a reference-doc.\n\nQuarto PDF outputs\nQuarto Typst custom formats",
    "crumbs": [
      "About",
      "Brand Elements",
      "Color"
    ]
  },
  {
    "objectID": "brand/color.html#example",
    "href": "brand/color.html#example",
    "title": "Color",
    "section": "Example",
    "text": "Example\n\nHome Depot\n\n\nbrand_home-depot.yml\n\ncolor:\n  with:\n    orange: \"#F96302\"\n    white: \"#FFFFFF\"\n    black: \"#000000\"\n    warm-gray-dark: \"#747474\"\n    warm-gray-light: \"#f5f5f5\"\n    warm-gray-medium: \"#c4c4c4\"\n  primary: \"#F96302\"\n  secondary: \"#747474\"\n  tertiary: \"#C4C4C4\"\n  light: \"#F5F5F5\"\n  dark: \"#747474\"\n\n\n\nAlternate syntax\n\n\n\nbrand_home-depot.yml\n\ncolor:\n  with:\n    orange: \"#F96302\"\n    white: \"#FFFFFF\"\n    black: \"#000000\"\n    warm-gray-dark: \"#747474\"\n    warm-gray-light: \"#f5f5f5\"\n    warm-gray-medium: \"#c4c4c4\"\n  primary: orange\n  secondary: warm-gray-dark\n  tertiary: warm-gray-medium\n  light: warm-gray-light\n  dark: warm-gray-dark\n\n\nSee Home Depot brand guidelines.\n\n\nPosit\n\n\nbrand.yml (Posit)\n\ncolor:\n  with:\n    blue: \"#447099\"\n    orange: \"#EE6331\"\n    gray: \"#404041\"\n    white: \"#FFFFFF\"\n    teal: \"#419599\"\n    green: \"#72994E\"\n    burgundy: \"#9A4665\"\n  foreground: \"#151515\"\n  background: \"#FFFFFF\"\n  primary: \"#447099\"\n  secondary: \"#707073\"\n  tertiary: \"#C2C2C4\"\n  success: \"#72994E\"\n  info: \"#419599\"\n  warning: \"#EE6331\"\n  danger: \"#9A4665\"\n  light: \"#FFFFFF\"\n  dark: \"#404041\"\n\n\n\nAlternate syntax\n\n\n\nbrand.yml (Posit)\n\ncolor:\n  with:\n    blue: \"#447099\"\n    orange: \"#EE6331\"\n    gray: \"#404041\"\n    white: \"#FFFFFF\"\n    teal: \"#419599\"\n    green: \"#72994E\"\n    burgundy: \"#9A4665\"\n  foreground: \"#151515\"\n  background: white\n  primary: blue\n  secondary: \"#707073\"\n  tertiary: \"#C2C2C4\"\n  success: green\n  info: teal\n  warning: orange\n  danger: burgundy\n  light: white\n  dark: gray\n\n\nSee Posit brand guidelines.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Color"
    ]
  },
  {
    "objectID": "brand/color.html#spec",
    "href": "brand/color.html#spec",
    "title": "Color",
    "section": "Spec",
    "text": "Spec\n- id: brand-color-value\n  schema: string\n\n- id: brand-color\n  description: &gt;\n    The brand's custom color palette and theme.\n  object:\n    closed: true\n    properties:\n      with:\n        description: &gt;\n          The brand's custom color palette. Any number of colors can be defined,\n          each color having a custom name.\n        object:\n          closed: false\n          # We don't know the exact properties yet, but we do know they'll all be strings.\n          # I'm not sure how to express that in the spec.\n          additionalProperties:\n            schema:\n              ref: brand-color-value\n      foreground:\n        description: The foreground color, used for text.\n        schema:\n          ref: brand-color-value\n        default: black\n      background:\n        description: The background color, used for the page background.\n        schema:\n          ref: brand-color-value\n        default: white\n      primary:\n        description: &gt;\n          The primary accent color, i.e. the main theme color. Typically used for\n          hyperlinks, active states, primary action buttons, etc.\n        schema:\n          ref: brand-color-value\n      secondary:\n        description: &gt;\n          The secondary accent color. Typically used for lighter text or disabled states.\n        schema:\n          ref: brand-color-value\n      tertiary:\n        description: &gt;\n          The tertiary accent color. Typically an even lighter color, used for hover states,\n          accents, and wells.\n        schema:\n          ref: brand-color-value\n      success:\n        description: The color used for positive or successful actions and information.\n        schema:\n          ref: brand-color-value\n      info:\n        description: The color used for neutral or informational actions and information.\n        schema:\n          ref: brand-color-value\n      warning:\n        description: The color used for warning or cautionary actions and information.\n        schema:\n          ref: brand-color-value\n      danger:\n        description: The color used for errors, dangerous actions, or negative information.\n        schema:\n          ref: brand-color-value\n      light:\n        description: &gt;\n          A bright color, used as a high-contrast foreground color on dark elements\n          or low-contrast background color on light elements.\n        schema:\n          ref: brand-color-value\n      dark:\n        description: &gt;\n          A dark color, used as a high-contrast foreground color on light elements\n          or high-contrast background color on light elements.\n        schema:\n          ref: brand-color-value\n      emphasis:\n        description: &gt;\n          A color used to emphasize or highlight text or elements.\n        schema:\n          ref: brand-color-value\n      link:\n        description: &gt;\n          The color used for hyperlinks. If not defined, the `primary` color is used.\n        schema:\n          ref: brand-color-value\n\n- id: brand-maybe-named-color\n  description: &gt;\n    A color, which may be a named brand color.\n  anyOf:\n    - ref: brand-named-theme-color\n    - schema: string\n\n- id: brand-named-theme-color\n  description: &gt;\n    A named brand color, taken either from `color.theme` or `color.palette` (in that order).\n  enum:\n    [\n      foreground,\n      background,\n      primary,\n      secondary,\n      tertiary,\n      success,\n      info,\n      warning,\n      danger,\n      light,\n      dark,\n      emphasis,\n      link,\n    ]",
    "crumbs": [
      "About",
      "Brand Elements",
      "Color"
    ]
  },
  {
    "objectID": "brand/color.html#additional-color-features",
    "href": "brand/color.html#additional-color-features",
    "title": "Color",
    "section": "Additional color features",
    "text": "Additional color features\n\nAutomatic color definitions\nFor specific outputs formats, we will automatically make the brand color palette available. In HTML/Bootstrap settings, for instance, this would mean creating $brand-{name} (Sass) and --brand-{name} (CSS) variables for each color in color.palette. We could similarly define the brand colors in LaTeX and Typst formats.\nFor example, using the following color palette definition\n\n\nbrand.yml (Posit)\n\ncolor:\n  palette:\n    blue: \"#447099\"\n    orange: \"#EE6331\"\n    gray: \"#404041\"\n    white: \"#FFFFFF\"\n    teal: \"#419599\"\n    green: \"#72994E\"\n    burgundy: \"#9A4665\"\n\nwould result in the following Sass for Bootstrap.\n\n\nbrand.scss\n\n// Brand colors ---------\n$brand-blue: #447099;\n$brand-orange: #EE6331;\n$brand-gray: #404041;\n$brand-white: #FFFFFF;\n$brand-teal: #419599;\n$brand-green: #72994E;\n$brand-burgundy: #9A4665;\n\n:root {\n  --brand-blue: #{$brand-blue};\n  --brand-orange: #{$brand-orange};\n  --brand-gray: #{$brand-gray};\n  --brand-white: #{$brand-white};\n  --brand-teal: #{$brand-teal};\n  --brand-green: #{$brand-green};\n  --brand-burgundy: #{$brand-burgundy};\n}\n\nIn Boostrap, the color.theme variables are already Sass variables, e.g. color.theme.primary maps to the $primary Sass variable or the --bs-primary CSS variable. That said, for consistency we could also map the color.theme definitions to Sass/CSS variables, e.g. $brand-primary and --brand-primary.\n\n\nShades and tints\nWe can imagine extending the spec to help create shades and tints of the brand colors. Users could provide any of mid, light or dark as an anchor point (but best results if only mid or light + dark or all three).\nInitially, we’ll only support mid because this fits Bootstrap conventions to create a range of shades (darker variants) and tints (lighter variants), numbered from 900 (dark) to 100 (light). By default, Bootstrap uses the midpoint to seed the range, e.g. setting $blue-500 changes the range of blue values.\nNote: Bootstrap uses a fixed set of colors for this type of palette – e.g. blue, indigo, red, etc. – because their values pass through Sass variables. For colors in this named list, we’d use mid to set the $*-500 variable. For other colors, we’d directly set CSS variables, replicating Bootstrap’s color logic.\n\nExample: Posit Blue\n\n\nbrand_posit.yml\n\ncolor:\n  with:\n    blue:\n      mid: \"#447099\"\n\n\n  See the Pen \n  Sass lighten() and darken() vs mix() using black and white by Garrick Aden-Buie (@gadenbuie)\n  on CodePen.\n\n\n\n\nExample: Home Depot Warm Gray\n\n\nbrand_home-depot.yml\n\ncolor:\n  with:\n    warm_gray:\n      light: \"#f5f5f5\"\n      mid: \"#c4c4c4\"\n      dark: \"#747474\"\n\n\n  See the Pen \n  Sass lighten() and darken() vs mix() using black and white by Garrick Aden-Buie (@gadenbuie)\n  on CodePen.\n\n\n(This is just a quick example, not the final algorithm.)",
    "crumbs": [
      "About",
      "Brand Elements",
      "Color"
    ]
  },
  {
    "objectID": "brand/color.html#additional-theme-features",
    "href": "brand/color.html#additional-theme-features",
    "title": "Color",
    "section": "Additional theme features",
    "text": "Additional theme features\n\nRe-using fields\nThe above is simple, but it’s easy to imagine that brand.yml authors might want to re-use colors in color.with in the theme colors. In reusing fields in open questions I outlined a possible custom syntax. Here’s an example using the shortcode-style {{&lt; brand color palette ____ &gt;}} syntax:\n\n\nbrand.yml (reusing colors)\n\ncolor:\n  with:\n    blue: \"#447099\"\n    orange: \"#EE6331\"\n    gray: \"#404041\"\n    white: \"#FFFFFF\"\n    teal: \"#419599\"\n    green: \"#72994E\"\n    burgundy: \"#9A4665\"\n  theme:\n    foreground: \"#151515\"\n    background: \"{{&lt; brand color palette white &gt;}}\"\n    primary: \"{{&lt; brand color palette blue &gt;}}\"\n    secondary: \"#707073\"\n    tertiary: \"#C2C2C4\"\n    success: \"{{&lt; brand color palette green &gt;}}\"\n    info: \"{{&lt; brand color palette teal &gt;}}\"\n    warning: \"{{&lt; brand color palette orange &gt;}}\"\n    danger: \"{{&lt; brand color palette burgundy &gt;}}\"\n    light: \"{{&lt; brand color palette white &gt;}}\"\n    dark: \"{{&lt; brand color palette gray &gt;}}\"\n\nAlternatively, assuming that all the colors in color.palette become top-level Sass variables (maybe an only okay idea), we could use Sass-alike custom syntax, with a brand- prefix to avoid global namespace conflicts.\n\n\nbrand.yml (reusing colors)\n\ncolor:\n  palette:\n    blue: \"#447099\"\n    orange: \"#EE6331\"\n    gray: \"#404041\"\n    white: \"#FFFFFF\"\n    teal: \"#419599\"\n    green: \"#72994E\"\n    burgundy: \"#9A4665\"\n  theme:\n    foreground: \"#151515\"\n    background: \"$brand-white\"\n    primary: \"$brand-blue\"\n    secondary: \"#707073\"\n    tertiary: \"#C2C2C4\"\n    success: \"$brand-green\"\n    info: \"$brand-teal\"\n    warning: \"$brand-orange\"\n    danger: \"$brand-burgundy\"\n    light: \"$brand-white\"\n    dark: \"$brand-gray\"\n\nOr, possibly just as good, we could use CSS variable declarations.\n\n\nbrand.yml (reusing colors)\n\ncolor:\n  palette:\n    blue: \"#447099\"\n    orange: \"#EE6331\"\n    gray: \"#404041\"\n    white: \"#FFFFFF\"\n    teal: \"#419599\"\n    green: \"#72994E\"\n    burgundy: \"#9A4665\"\n  theme:\n    foreground: \"#151515\"\n    background: --brand-white\n    primary: \"--brand-blue\"\n    secondary: \"#707073\"\n    tertiary: \"#C2C2C4\"\n    success: \"--brand-green\"\n    info: \"--brand-teal\"\n    warning: \"--brand-orange\"\n    danger: \"--brand-burgundy\"\n    light: \"--brand-white\"\n    dark: \"--brand-gray\"\n\nFinally, without a custom re-usable field implementation, expert YAML users could use native YAML anchor and alias features.\n\n\nbrand.yml (native yaml)\n\ncolor:\n  palette:\n    blue: &blue \"#447099\"\n    orange: &orange \"#EE6331\"\n    gray: &gray \"#404041\"\n    white: &white \"#FFFFFF\"\n    teal: &teal \"#419599\"\n    green: &green \"#72994E\"\n    burgundy: &burgundy \"#9A4665\"\n  theme:\n    foreground: \"#151515\"\n    background: *white\n    primary: *blue\n    secondary: \"#707073\"\n    tertiary: \"#C2C2C4\"\n    success: *green\n    info: *teal\n    warning: *orange\n    danger: *burgundy\n    light: *white\n    dark: *gray",
    "crumbs": [
      "About",
      "Brand Elements",
      "Color"
    ]
  },
  {
    "objectID": "brand/logo.html",
    "href": "brand/logo.html",
    "title": "Logo",
    "section": "",
    "text": "Warning\n\n\n\nThis section still reflects the brand.yml spec during design. It will be updated shortly to reflect the current brand.yml specification.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Logo"
    ]
  },
  {
    "objectID": "brand/logo.html#about",
    "href": "brand/logo.html#about",
    "title": "Logo",
    "section": "About",
    "text": "About\nProvide a logo and an icon for the company.\nBrand guidelines may include many logo files; not all will be used for small, medium or large. The images field can be used to provide a list of logo image files with convenient names that may be re-used in the logo field.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Logo"
    ]
  },
  {
    "objectID": "brand/logo.html#example",
    "href": "brand/logo.html#example",
    "title": "Logo",
    "section": "Example",
    "text": "Example\n\n\nbrand.yml (simple)\n\nlogo: posit.png\n\n\n\nbrand.yml (full)\n\nlogo:\n  small: posit-icon.png\n  medium: posit.png\n  large: posit.svg\n\n\n\nbrand.yml (light/dark)\n\nlogo:\n  small: posit-icon.png\n  medium:\n    light: posit.png\n    dark: posit-reverse.png\n  large: posit.svg\n\n\n\nbrand.yml (with files)\n\nlogo:\n  images:\n    primary: posit-full-color.png\n    primary-svg: posit-full-color.svg\n    reverse: posit-full-color-reverse.png\n    black: posit-black.png\n    white: posit-white.png\n    icon: posit-favicon.png\n  small: icon\n  medium: primary\n  large: primrary-svg",
    "crumbs": [
      "About",
      "Brand Elements",
      "Logo"
    ]
  },
  {
    "objectID": "brand/logo.html#spec",
    "href": "brand/logo.html#spec",
    "title": "Logo",
    "section": "Spec",
    "text": "Spec\n- id: brand-logo\n  description: &gt;\n    Provide definitions and defaults for brand's logo in various formats and sizes.\n  anyOf:\n    - string\n    - object:\n        closed: true\n        properties:\n          images:\n            schema:\n              object:\n                additionalProperties:\n                  schema:\n                    ref: brand-string-light-dark\n          small:\n            description: &gt;\n              A link or path to the brand's small-sized logo or icon, or a link or path\n              to both the light and dark versions.\n            schema:\n              ref: brand-string-light-dark\n          medium:\n            description: &gt;\n              A link or path to the brand's medium-sized logo, or a link or path\n              to both the light and dark versions.\n            schema:\n              ref: brand-string-light-dark\n          large:\n            description: &gt;\n              A link or path to the brand's large- or full-sized logo, or a link or path\n              to both the light and dark versions.\n            schema:\n              ref: brand-string-light-dark",
    "crumbs": [
      "About",
      "Brand Elements",
      "Logo"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/indeed/index.html",
    "href": "inspiration/brand-guidelines/indeed/index.html",
    "title": "Indeed",
    "section": "",
    "text": "Indeed Brand Guidelines",
    "crumbs": [
      "Indeed"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/indeed/index.html#logos",
    "href": "inspiration/brand-guidelines/indeed/index.html#logos",
    "title": "Indeed",
    "section": "Logos",
    "text": "Logos\n\nLarge\n\n\n\nBlue Indeed logo\n\n\n\n\n\nWhite Indeed logo\n\n\n\n\nSmall (icon)\n\n\n\nBlue Indeed icon\n\n\n\n\n\nWhite Indeed icon",
    "crumbs": [
      "Indeed"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/indeed/index.html#swatches",
    "href": "inspiration/brand-guidelines/indeed/index.html#swatches",
    "title": "Indeed",
    "section": "Swatches",
    "text": "Swatches",
    "crumbs": [
      "Indeed"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/dell/index.html",
    "href": "inspiration/brand-guidelines/dell/index.html",
    "title": "Dell",
    "section": "",
    "text": "Dell Brand Guidelines\n\n\n\nDell Principle Color Palette\n\n\n\n\n\nDell Supporting Color Palette\n\n\n\n\n\nDell Typography\n\n\n\n\n\n\n\n\nbrand.yml\n\n\n\n\n\ncolor:\n  palette:\n    blue: \"#0085c3\"\n    gray: \"#aaaaaa\"\n    white: \"#FFFFFF\"\n    green: \"#7ab800\"\n    yellow: \"#f2af00\"\n    orange: \"#ff7700\"\n    red: \"#dc5034\"\n    red-dark: \"#ce1126\"\n    purple: \"#6e2585\"\n    teal: \"#71c6c1\"\n    periwinkle: \"#5482ab\"\n    aqua: \"#009bbb\"\n    gray-dark: \"#444444\"\n    gray-light: \"#eeeeee\"\n  theme:\n    primary: blue\n    secondary: gray\n    light: gray-light\n    dark: gray-dark\n\ntypography:\n  body:\n    family: Museo Sans for Dell\n  headings:\n    family: \"Museo for Dell, Trebuchet\"\n    weight: 700",
    "crumbs": [
      "Dell"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/walmart/index.html",
    "href": "inspiration/brand-guidelines/walmart/index.html",
    "title": "Walmart",
    "section": "",
    "text": "Walmart Brand Guidelines",
    "crumbs": [
      "Walmart"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/walmart/index.html#colors",
    "href": "inspiration/brand-guidelines/walmart/index.html#colors",
    "title": "Walmart",
    "section": "Colors",
    "text": "Colors\n\n\n\nWalmart palette\n\n\n\nPrimary color palette\n\nWe are a blue brand with white & yellow. Walmart Blue is the primary color that should be applied across all communications, to uphold brand consistency.\n\nFor .com &/or digital platforms, use digital blue to accommodate readability & legibility needs.\nWhite complements digital blue & is either a background color or a type color.\nSpark Yellow should be used as an accent color. Note: For yellow headlines used online, please refer to the ADA compliance section below.\n\n\n\n\n\nHex\nCMYK\nPMS\nName\n\n\n\n\n#0071DC\nCMYK 100, 45, 0, 0\nPMS 285 C\nWalmart Blue\n\n\n#FFFFFF\nCMYK 0, 0, 0, 0\nWhite\n\n\n\n#FFC220\nCMYK 0, 25, 100, 0\nPMS 1235 C\nSpark Yellow\n\n\n\n\n\nSecondary color palette\n\nOur secondary color palette is an extension of our primary colors & is used as backgrounds & texture for silhouetted product photography. Where primary colors applied to type fail in legibility & compliance, use Ozark Noir.\n\n\n\n\nHex\nCMYK\nName\n\n\n\n\n#F8E6A5\nCMYK 3, 7, 42, 0\nYellow Tone\n\n\n#8CD1FC\nCMYK 39, 5, 0, 0\nBlue Tone 1\n\n\n#D3EFF8\nCMYK 16, 0, 2, 0\nBlue Tone 2\n\n\n#FAFAFA\nCMYK 1, 1, 1, 0\nOff White\n\n\n#041E42\nCMYK 100, 88, 42, 51\nOzark Noir",
    "crumbs": [
      "Walmart"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/walmart/index.html#logos",
    "href": "inspiration/brand-guidelines/walmart/index.html#logos",
    "title": "Walmart",
    "section": "Logos",
    "text": "Logos\nFull logo documentation\n\n\n\n\n\n\n\nName\nImage\n\n\n\n\nPrimary blue logo\n\n\n\nPrimary white logo\n\n\n\nSpark icon",
    "crumbs": [
      "Walmart"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/walmart/index.html#font",
    "href": "inspiration/brand-guidelines/walmart/index.html#font",
    "title": "Walmart",
    "section": "Font",
    "text": "Font\nWalmart uses a custom font named Bogle.",
    "crumbs": [
      "Walmart"
    ]
  },
  {
    "objectID": "inspiration/index.html",
    "href": "inspiration/index.html",
    "title": "Inspiration",
    "section": "",
    "text": "These brand guidelines and design systems served as an inspiration to the design of brand.yml. In the future, we’ll translate these guidelines into _brand.yml example files."
  },
  {
    "objectID": "inspiration/index.html#company-brand-guidelines",
    "href": "inspiration/index.html#company-brand-guidelines",
    "title": "Inspiration",
    "section": "Company Brand Guidelines",
    "text": "Company Brand Guidelines\n\n\n\n\n\n\n\n\nDell\n\n\n\n\n\n\n\n\n\n\n\n\n\nHome Depot\n\n\n\n\n\n\n\n\n\n\n\n\n\nIndeed\n\n\n\n\n\n\n\n\n\n\n\n\n\nPosit\n\n\n\n\n\n\n\n\n\n\n\n\n\nSlack\n\n\n\n\n\n\n\n\n\n\n\n\n\nWalmart\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "inspiration/index.html#design-systems",
    "href": "inspiration/index.html#design-systems",
    "title": "Inspiration",
    "section": "Design Systems",
    "text": "Design Systems\n\n\n\n    \n     \n    \n    \n      \n        gov.uk\n      \n      \n    \n\n\n    \n     \n    \n    \n      \n        Deque\n      \n      \n      Cauldron\n      \n    \n\n\n    \n     \n    \n    \n      \n        US Web Design\n      \n      \n    \n\n\n    \n     \n    \n    \n      \n        Thumbtack\n      \n      \n      Thumbprint\n      \n    \n\n\n    \n     \n    \n    \n      \n        City of Helsinki\n      \n      \n      Helsinki Design System\n      \n    \n\n\n    \n     \n    \n    \n      \n        GitHub\n      \n      \n      Primer\n      \n    \n\n\n    \n     \n    \n    \n      \n        Stack Overflow\n      \n      \n      Stacks\n      \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "pkg/py/color.html",
    "href": "pkg/py/color.html",
    "title": "Color Palette and Theme",
    "section": "",
    "text": "BrandColor()\nBrand Colors\nThe brand’s custom color palette and theme. color.palette is a list of named colors used by the brand and color.theme maps brand colors to common theme elements (described in Attributes).\n\n\n\nMinimalWith palette\n\n\nIn this example, we’ve picked colors from Posit’s brand guidelines and mapped them directory to theme colors. This is a minimal approach to applying brand colors to theme colors.\n\n\n_brand.yml\n\ncolor:\n  foreground: \"#151515\"\n  background: \"#FFFFFF\"\n  primary: \"#447099\"\n  secondary: \"#707073\"\n  tertiary: \"#C2C2C4\"\n  success: \"#72994E\"\n  info: \"#419599\"\n  warning: \"#EE6331\"\n  danger: \"#9A4665\"\n  light: \"#FFFFFF\"\n  dark: \"#404041\"\n\n\n\nThis example first defines a color palette from Posit’s brand guidelines and then maps them to theme colors by reference. With this approach, not all brand colors need to be used in the theme, but are still available via the brand.color.palette dictionary. This approach also reduces duplication in brand.color.\n\n\n_brand.yml\n\ncolor:\n  palette:\n    white: \"#FFFFFF\"\n    black: \"#151515\"\n    blue: \"#447099\"\n    orange: \"#EE6331\"\n    green: \"#72994E\"\n    teal: \"#419599\"\n    burgundy: \"#9A4665\"\n\n  foreground: black\n  background: white\n  primary: blue\n  secondary: \"#707073\"\n  tertiary: \"#C2C2C4\"\n  success: green\n  info: teal\n  warning: orange\n  danger: burgundy\n  light: white\n  dark: \"#404041\"\n\n\n\n\n\n\n\nOnce defined in color.palette, you can re-use color definitions in any of the color fields. For example:\n\n\n_brand.yml\n\ncolor:\n  palette:\n    purple: \"#6339E0\"\n  primary: purple\n\nOnce imported via brand_yml.Brand.from_yaml(), you can access the named color palette via brand.color.palette[\"purple\"] and the primary field will be ready for use.\n\n\nbrand.color.palette[\"purple\"]\n\n'#6339E0'\n\n\n\nbrand.color.primary\n\n'#6339E0'\n\n\n\nThis same principle of reuse applies to the color and background-color fields of brand_yml.typography.BrandTypography, where you can refer to any of the colors in color.palette or the theme colors directly.\n\n\n_brand.yml\n\ncolor:\n  palette:\n    purple: \"#6339E0\"\n  primary: purple\ntypography:\n  headings:\n    color: primary\n  link:\n    color: purple\n\nWith this Brand YAML, both headings and links will ultimately be styled with the brand’s purple color.\n\n\nbrand.typography.headings.color\n\n'#6339E0'\n\n\n\nbrand.typography.link.color\n\n'#6339E0'\n\n\n\n\n\n\n\npalette\n\ndict[str, str] | None\nA dictionary of brand colors where each key is a color name and the value is a color string (hex colors are recommended but no specific format is required at this time). These values can be referred to, by name, in the other theme properties\n\nforeground\n\nOptional[str]\nThe foreground color, used for text.\n\nbackground\n\nOptional[str]\nThe background color, used for the page or main background.\n\nprimary\n\nOptional[str]\nThe primary accent color, i.e. the main theme color. Typically used for hyperlinks, active states, primary action buttons, etc.\n\nsecondary\n\nOptional[str]\nThe secondary accent color. Typically used for lighter text or disabled states.\n\ntertiary\n\nOptional[str]\nThe tertiary accent color. Typically an even lighter color, used for hover states, accents, and wells.\n\nsuccess\n\nOptional[str]\nThe color used for positive or successful actions and information.\n\ninfo\n\nOptional[str]\nThe color used for neutral or informational actions and information.\n\nwarning\n\nOptional[str]\nThe color used for warning or cautionary actions and information.\n\ndanger\n\nOptional[str]\nThe color used for errors, dangerous actions, or negative information.\n\nlight\n\nOptional[str]\nA bright color, used as a high-contrast foreground color on dark elements or low-contrast background color on light elements.\n\ndark\n\nOptional[str]\nA dark color, used as a high-contrast foreground color on light elements or high-contrast background color on light elements.",
    "crumbs": [
      "About",
      "Brand Components",
      "Color Palette and Theme"
    ]
  },
  {
    "objectID": "pkg/py/color.html#examples",
    "href": "pkg/py/color.html#examples",
    "title": "Color Palette and Theme",
    "section": "",
    "text": "MinimalWith palette\n\n\nIn this example, we’ve picked colors from Posit’s brand guidelines and mapped them directory to theme colors. This is a minimal approach to applying brand colors to theme colors.\n\n\n_brand.yml\n\ncolor:\n  foreground: \"#151515\"\n  background: \"#FFFFFF\"\n  primary: \"#447099\"\n  secondary: \"#707073\"\n  tertiary: \"#C2C2C4\"\n  success: \"#72994E\"\n  info: \"#419599\"\n  warning: \"#EE6331\"\n  danger: \"#9A4665\"\n  light: \"#FFFFFF\"\n  dark: \"#404041\"\n\n\n\nThis example first defines a color palette from Posit’s brand guidelines and then maps them to theme colors by reference. With this approach, not all brand colors need to be used in the theme, but are still available via the brand.color.palette dictionary. This approach also reduces duplication in brand.color.\n\n\n_brand.yml\n\ncolor:\n  palette:\n    white: \"#FFFFFF\"\n    black: \"#151515\"\n    blue: \"#447099\"\n    orange: \"#EE6331\"\n    green: \"#72994E\"\n    teal: \"#419599\"\n    burgundy: \"#9A4665\"\n\n  foreground: black\n  background: white\n  primary: blue\n  secondary: \"#707073\"\n  tertiary: \"#C2C2C4\"\n  success: green\n  info: teal\n  warning: orange\n  danger: burgundy\n  light: white\n  dark: \"#404041\"",
    "crumbs": [
      "About",
      "Brand Components",
      "Color Palette and Theme"
    ]
  },
  {
    "objectID": "pkg/py/color.html#referencing-colors-in-the-brands-color-palette",
    "href": "pkg/py/color.html#referencing-colors-in-the-brands-color-palette",
    "title": "Color Palette and Theme",
    "section": "",
    "text": "Once defined in color.palette, you can re-use color definitions in any of the color fields. For example:\n\n\n_brand.yml\n\ncolor:\n  palette:\n    purple: \"#6339E0\"\n  primary: purple\n\nOnce imported via brand_yml.Brand.from_yaml(), you can access the named color palette via brand.color.palette[\"purple\"] and the primary field will be ready for use.\n\n\nbrand.color.palette[\"purple\"]\n\n'#6339E0'\n\n\n\nbrand.color.primary\n\n'#6339E0'\n\n\n\nThis same principle of reuse applies to the color and background-color fields of brand_yml.typography.BrandTypography, where you can refer to any of the colors in color.palette or the theme colors directly.\n\n\n_brand.yml\n\ncolor:\n  palette:\n    purple: \"#6339E0\"\n  primary: purple\ntypography:\n  headings:\n    color: primary\n  link:\n    color: purple\n\nWith this Brand YAML, both headings and links will ultimately be styled with the brand’s purple color.\n\n\nbrand.typography.headings.color\n\n'#6339E0'\n\n\n\nbrand.typography.link.color\n\n'#6339E0'",
    "crumbs": [
      "About",
      "Brand Components",
      "Color Palette and Theme"
    ]
  },
  {
    "objectID": "pkg/py/color.html#attributes",
    "href": "pkg/py/color.html#attributes",
    "title": "Color Palette and Theme",
    "section": "",
    "text": "palette\n\ndict[str, str] | None\nA dictionary of brand colors where each key is a color name and the value is a color string (hex colors are recommended but no specific format is required at this time). These values can be referred to, by name, in the other theme properties\n\nforeground\n\nOptional[str]\nThe foreground color, used for text.\n\nbackground\n\nOptional[str]\nThe background color, used for the page or main background.\n\nprimary\n\nOptional[str]\nThe primary accent color, i.e. the main theme color. Typically used for hyperlinks, active states, primary action buttons, etc.\n\nsecondary\n\nOptional[str]\nThe secondary accent color. Typically used for lighter text or disabled states.\n\ntertiary\n\nOptional[str]\nThe tertiary accent color. Typically an even lighter color, used for hover states, accents, and wells.\n\nsuccess\n\nOptional[str]\nThe color used for positive or successful actions and information.\n\ninfo\n\nOptional[str]\nThe color used for neutral or informational actions and information.\n\nwarning\n\nOptional[str]\nThe color used for warning or cautionary actions and information.\n\ndanger\n\nOptional[str]\nThe color used for errors, dangerous actions, or negative information.\n\nlight\n\nOptional[str]\nA bright color, used as a high-contrast foreground color on dark elements or low-contrast background color on light elements.\n\ndark\n\nOptional[str]\nA dark color, used as a high-contrast foreground color on light elements or high-contrast background color on light elements.",
    "crumbs": [
      "About",
      "Brand Components",
      "Color Palette and Theme"
    ]
  },
  {
    "objectID": "pkg/py/index.html#installation",
    "href": "pkg/py/index.html#installation",
    "title": "Brand YAML Python Package",
    "section": "Installation",
    "text": "Installation\n\nFrom PyPI\nuv pip install brand_yml\n\n\nFrom GitHub\nuv pip install \"git+https://github.com/posit-dev/brand-yml#subdirectory=pkg-py\"",
    "crumbs": [
      "About",
      "Brand YAML Python Package"
    ]
  },
  {
    "objectID": "pkg/py/index.html#example",
    "href": "pkg/py/index.html#example",
    "title": "Brand YAML Python Package",
    "section": "Example",
    "text": "Example\n\nfrom brand_yml import Brand\n\nbrand = Brand.from_yaml_str(\n    # Typically, this file is stored in `_brand.yml`\n    # and read with `Brand.from_yaml()`.\n    \"\"\"\n    meta:\n      name: Posit Software, PBC\n      link: https://posit.co\n    color:\n      palette:\n        pblue: \"#447099\"\n        green: \"#72994E\"\n        teal: \"#419599\"\n        orange: \"#EE6331\"\n        purple: \"#9A4665\"\n        gray: \"#707073\"\n      primary: blue\n      secondary: gray\n      success: green\n      info: teal\n      warning: orange\n      danger: purple\n    typography:\n      base:\n        family: Open Sans\n        weight: 300\n    \"\"\"\n)\n\n\nbrand.meta.name\n\nBrandMetaName(full='Posit Software, PBC')\n\n\n\nbrand.color.primary\n\n'blue'\n\n\n\nbrand.typography.base.model_dump()\n\n{'family': 'Open Sans', 'weight': 300, 'size': None, 'line_height': None}",
    "crumbs": [
      "About",
      "Brand YAML Python Package"
    ]
  },
  {
    "objectID": "pkg/py/read_brand_yml.html",
    "href": "pkg/py/read_brand_yml.html",
    "title": "read_brand_yml",
    "section": "",
    "text": "read_brand_yml(path, as_data=False)\nRead a Brand YAML file.\nReads a Brand YAML file or finds and reads a project-specific _brand.yml file and returns a validated ~brand_yml.Brand instance.\nTo find a project-specific _brand.yaml file, pass the project directory or __file__ (the path of the current Python script). brand_yml.read_brand_yml will look in that directory or any parent directory for a _brand.yml, brand/_brand.yml or _brand/_brand.yml file. Note that it starts the search in the directory passed in and moves upward to find the Brand YAML file; it does not search into subdirectories of the current directory.\n\n\n\npath: str | Path\n\nThe path to the Brand YAML file or a directory where _brand.yml is expected to be found. Typically, you can pass __file__ from the calling script to find _brand.yml in the current directory or any of its parent directories.\n\nas_data: bool = False\n\nWhen True, returns the raw brand data as a dictionary parsed from the YAML file. When False, returns a validated :class:Brand object.\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nBrand | dict[str, Any]\nA validated :class:brand_yml.Brand object with all fields populated according to the Brand YAML file (as_data=False, default) or the raw brand data as a dictionary (as_data=True).\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nFileNotFoundError\nRaises a FileNotFoundError if no brand configuration file is found within the given path.\n\n\n\nValueError\nValueError or other validation errors are raised from pydantic if the Brand YAML file is invalid.\n\n\n\n\n\n\nfrom brand_yml import read_brand_yml\n\nbrand = read_brand_yml(__file__)\nbrand = read_brand_yml(\"path/to/_brand.yml\")",
    "crumbs": [
      "About",
      "Read or create a brand",
      "read_brand_yml"
    ]
  },
  {
    "objectID": "pkg/py/read_brand_yml.html#parameters",
    "href": "pkg/py/read_brand_yml.html#parameters",
    "title": "read_brand_yml",
    "section": "",
    "text": "path: str | Path\n\nThe path to the Brand YAML file or a directory where _brand.yml is expected to be found. Typically, you can pass __file__ from the calling script to find _brand.yml in the current directory or any of its parent directories.\n\nas_data: bool = False\n\nWhen True, returns the raw brand data as a dictionary parsed from the YAML file. When False, returns a validated :class:Brand object.",
    "crumbs": [
      "About",
      "Read or create a brand",
      "read_brand_yml"
    ]
  },
  {
    "objectID": "pkg/py/read_brand_yml.html#returns",
    "href": "pkg/py/read_brand_yml.html#returns",
    "title": "read_brand_yml",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nBrand | dict[str, Any]\nA validated :class:brand_yml.Brand object with all fields populated according to the Brand YAML file (as_data=False, default) or the raw brand data as a dictionary (as_data=True).",
    "crumbs": [
      "About",
      "Read or create a brand",
      "read_brand_yml"
    ]
  },
  {
    "objectID": "pkg/py/read_brand_yml.html#raises",
    "href": "pkg/py/read_brand_yml.html#raises",
    "title": "read_brand_yml",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nFileNotFoundError\nRaises a FileNotFoundError if no brand configuration file is found within the given path.\n\n\n\nValueError\nValueError or other validation errors are raised from pydantic if the Brand YAML file is invalid.",
    "crumbs": [
      "About",
      "Read or create a brand",
      "read_brand_yml"
    ]
  },
  {
    "objectID": "pkg/py/read_brand_yml.html#examples",
    "href": "pkg/py/read_brand_yml.html#examples",
    "title": "read_brand_yml",
    "section": "",
    "text": "from brand_yml import read_brand_yml\n\nbrand = read_brand_yml(__file__)\nbrand = read_brand_yml(\"path/to/_brand.yml\")",
    "crumbs": [
      "About",
      "Read or create a brand",
      "read_brand_yml"
    ]
  },
  {
    "objectID": "pkg/py/meta.html#attributes",
    "href": "pkg/py/meta.html#attributes",
    "title": "Metadata",
    "section": "Attributes",
    "text": "Attributes\n\nname\n\nBrandMetaName | None\nThe name of the brand. In the YAML, this may be a dictionary with the full and short forms of the brand name.\nmeta:\n  name:\n    full: Very Big Corporation of America\n    short: VBCA\nor a single value as shorthand for meta.name.full.\nmeta:\n  name: Very Big Corporation of America\n\nlink\n\nBrandMetaLink | None\nLinks to additional resources related to the brand, such as its homepage, social media accounts, etc. Like name, this can be a single value or a dictionary with additional keys. If a single value is provided, it is promoted to the home key of brand_yml.meta.BrandMetaLink.\nThese two constructions are equivalent:\nmeta:\n  link: https://www.very-big-corp.com/\nmeta:\n  link:\n    home: https://www.very-big-corp.com/",
    "crumbs": [
      "About",
      "Brand Components",
      "Metadata"
    ]
  },
  {
    "objectID": "pkg/py/meta.html#examples",
    "href": "pkg/py/meta.html#examples",
    "title": "Metadata",
    "section": "Examples",
    "text": "Examples\n\nMinimalFull\n\n\n\n\n_brand.yml\n\nmeta:\n  name: Very Big Corp. of America\n  link: https://very-big-corp.com\n\n\n\n\n\n_brand.yml\n\nmeta:\n  name:\n    full: Very Big Corporation of America\n    short: VBC\n  link:\n    home: https://very-big-corp.com\n    mastodon: https://mastodon.social/@VeryBigCorpOfficial\n    github: https://github.com/Very-Big-Corp\n    linkedin: https://linkedin.com/company/very-big-corp\n    twitter: https://twitter.com/VeryBigCorp\n    facebook: https://facebook.com/Very-Big-Corp",
    "crumbs": [
      "About",
      "Brand Components",
      "Metadata"
    ]
  },
  {
    "objectID": "pkg/py/meta.html#attributes-1",
    "href": "pkg/py/meta.html#attributes-1",
    "title": "Metadata",
    "section": "Attributes",
    "text": "Attributes\n\n\n\nName\nDescription\n\n\n\n\nfull\nFull name of the company or brand.\n\n\nshort\nShort name of the company or brand, for use in space-constrained settings.",
    "crumbs": [
      "About",
      "Brand Components",
      "Metadata"
    ]
  },
  {
    "objectID": "pkg/py/meta.html#attributes-2",
    "href": "pkg/py/meta.html#attributes-2",
    "title": "Metadata",
    "section": "Attributes",
    "text": "Attributes\n\n\n\nName\nDescription\n\n\n\n\nfacebook\nFacebook link for the brand or company.\n\n\ngithub\nGitHub link for the brand or company.\n\n\nhome\nHome website link for the brand or company.\n\n\nlinkedin\nLinkedIn link for the brand or company.\n\n\nmastodon\nMastodon link for the brand or company.\n\n\ntwitter\nTwitter link for the brand or company.",
    "crumbs": [
      "About",
      "Brand Components",
      "Metadata"
    ]
  }
]