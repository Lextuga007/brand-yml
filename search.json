[
  {
    "objectID": "index.html#introducing-brand.yml",
    "href": "index.html#introducing-brand.yml",
    "title": "brand.yml",
    "section": "Introducing brand.yml",
    "text": "Introducing brand.yml\nbrand.yml is a simple, portable YAML file that codifies your company’s brand guidelines into a format that can be used by Quarto, Python and R tooling to create branded outputs. Our goal is to support unified, branded theming for all of Posit’s open source tools—from web applications to printed reports to dashboards and presentations—with a consistent look and feel.\nWith a single _brand.yml file you can collect brand logos, colors, fonts and typographic choices, typically found in your company’s brand guidelines. This _brand.yml can be used Quarto and Shiny for Python1 to instantly basic themes that match the brand guidelines.\n\n\n\n_brand.yml\n\nmeta:\n  name: brand.yml\n  link: https://posit-dev.github.io/brand-yml\n\nlogo: logos/icon/brand-yml-icon-color.svg\n\ncolor:\n  palette:\n    black: \"#1A1A1A\"\n    white: \"#F9F9F9\"\n    orange: \"#FF6F20\"\n    pink: \"#FF3D7F\"\n  foreground: black\n  background: white\n  primary: orange\n  danger: pink\n\ntypography:\n  fonts:\n    - family: Open Sans\n      source: google\n    - family: Rubik\n      source: google\n    - family: IBM Plex Mono\n      source: google\n\n  base: Open Sans\n  headings:\n    family: Rubik\n    weight: 400\n  monospace: IBM Plex Mono",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "index.html#learn-more",
    "href": "index.html#learn-more",
    "title": "brand.yml",
    "section": "Learn more",
    "text": "Learn more\nJump to Structure to learn about the brand.yml syntax and how to write a _brand.yml file.\nYou can explore some inspiring examples of brand guidelines found in the wild.\nIf you’re a Python developer or are interested in using _brand.yml to adapt a Python package to use brand.yml for theming, check out the brand_yml Python package documentation to get started.",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "index.html#support",
    "href": "index.html#support",
    "title": "brand.yml",
    "section": "Support",
    "text": "Support\nbrand.yml is currently supported in Shiny for Python and Quarto websites, presentations, dashboards, and Typst documents, as well as via the brand_yml Python package. \n\n\n\n\n\n\n---\nconfig:\n  look: handDrawn\n  theme: neutral\n---\nflowchart LR\n    by{brand.yml}\n    by--&gt;quarto[Quarto]\n    quarto--&gt;quarto-html\n    quarto--&gt;quarto-pdf\n    quarto-html--&gt;quarto-websites[Websites]\n    quarto-html--&gt;quarto-presentations[Presentations]\n    quarto-html--&gt;quarto-dashboards[Dashboards]\n    quarto-html--&gt;quarto-emails[Emails]\n    quarto-pdf--&gt;quarto-typst[Typst]\n\n    by--&gt;R\n    R--&gt;r-bslib[\"{bslib}\"]\n    R--&gt;r-thematic[\"{thematic}\"]\n    r-bslib--&gt;r-shiny[\"Shiny for R\"]\n    r-bslib--&gt;r-rmd[\"R Markdown\"]\n    r-thematic--&gt;r-ggplot2[\"{ggplot2}\"]\n    r-thematic--&gt;r-plot[\"{plot}\"]\n\n    by--&gt;Python\n    Python--&gt;py-brand_yml[\"brand_yml\"]\n    py-brand_yml--&gt;py-shiny[Shiny for Python]\n    py-brand_yml--&gt;py-seaborn[seaborn, matplotlib, etc.]\n\n    classDef implemented fill:#8CE3A0,stroke:#0A2911,color:#0A2911;\n    class quarto-websites,quarto-presentations,quarto-dashboards,quarto-typst,py-brand_yml implemented;\n    classDef in-progress fill:#B3D7FF,stroke:#00254D,color:#00254D;\n    class py-shiny implemented;\n    classDef highlighted fill:#FFE8DB,stroke:#612200,color:#612200;\n    class by highlighted;\n\n    click quarto href \"https://quarto.org/\"\n    click quarto-typst href \"https://quarto.org/docs/output-formats/typst.html\" \"Typst in Quarto\"\n    click quarto-presentations href \"https://quarto.org/docs/presentations/revealjs/\" \"Reveal.js in Quarto\"\n    click quarto-dashboards href \"https://quarto.org/docs/dashboards/\" \"Dashboards in Quarto\"\n    click r-shiny href \"https://shiny.posit.co/\"\n    click r-bslib href \"https://rstudio.github.io/bslib/\"\n    click r-thematic href \"https://rstudio.github.io/thematic/\"\n    click r-ggplot2 href \"https://ggplot2.tidyverse.org/\"\n    click r-rmd href \"https://rmarkdown.rstudio.com/\"\n    click py-shiny href \"https://shiny.posit.co/py/\"\n    click py-brand_yml href \"pkg/py/\"",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "index.html#design",
    "href": "index.html#design",
    "title": "brand.yml",
    "section": "Design",
    "text": "Design\n\nUser stories\nJordan Ellis and Sofia Torres are data scientists at Genewise Therapeutics, a biotech company that uses AI to create tailored treatment plans based on personal genetic makeup and biomarkers.\n\n\n\n\n\n\nJordan Ellis\n\n\n\n\n\nJordan Ellis is a data scientist with a strong academic background in bioinformatics, in particular biology, genetics and statistical analysis. They frequently collaborate with bioligists and chemists to analyze data and present results in a clear an digestible format.\nJordan uses both R and Python and has recently started using Quarto to create their reports, which they share with non-scientific stakeholders. They noticed that their reports garnered more attention when they started using Quarto, but they suspect that their reports would be even more impactful if they matched the look and feel of the company’s branded reports.\nOn the other hand, Jordan doesn’t want to spend too much time having to rely on design teams for their reports, which often need to be re-created when data changes. Once, they tried to learn CSS but found it too complex and intimidating to learn in a few hours, so they settled on a Bootswatch theme that’s “close enough” to Genewise’s brand.\n\n\n\n\n\n\n\n\n\nSofia Torres\n\n\n\n\n\nSofia Torres leads a team of data scientists, including Jordan, at Genewise. She’s noticed that Jordan isn’t the only person on their small team who could benefit from branded reporting. She has been considering talking to a designer she knows on the marketing department, but it’s been hard to coordinate a time to meet and the designer sounded confused when he heard about Quarto.\nToday, Sofia was copied on emails from two of her reports who each used Quarto to create attached reports. But when she opened the reports, she was a little embarrassed that her team had sent out two reports with wildly different styles.\nSofia wants to get everyone on her team on the same page. She started collected snippets of code and settings in a page on her department’s Confluence space, but she can tell that very few people have even seen it, let alone have been using it.\n\n\n\nUsers like Jordan and Sofia will interact with brand.yml in three primary ways:\n\nCreating a _brand.yml file. Jordan has found Genewise’s internal branding guidelines. As they’re reading through these guidelines, they notice that the guidelines recommend a specific set of colors and fonts. They also find copies of their company’s logo, along with several pages of do this not that examples.\nAt this stage, Jordan wants to codify the best practices mentioned in the brand guidelines into a simple, human readable format. They’re excited that they only need to do this once, but they do make a note of the link to brand guidelines, just in case.\nWhile they have the brand guidelines open, they download the logo files and store them next in the same folder as the brand.yml file they’re working on.\nUsing and sharing the brand.yml file. When Jordan shared their new report style with their manager, Sofia was thrilled. Immediately, she asked everyone on her team to start using the new branded styles. Thanks to Quarto’s simple interface, everyone on the team could run a single command to bring the brand assets into their projects and documents, including the logos that Jordan downloaded.\nThe next time two members of her team sent out reports on the same day, both attachments looked coherent and professional. She’s just as thrilled when she opens up the experiment-tracking Shiny dashboard her team built for a biology group and the Shiny app looks custom-built for Genewise.\nUpdating branding tweaks and format settings. After a few weeks of using the branded theme for her reports, Sofia needs to present to the C suite. She uses the new brand files to create her presentation, but it’s just a little off. Thankfully she’s able to grab some time with the designer, who gives her a small CSS file that really brings the design home.\nKnowing that the rest of her team would like to use the same slide styles, she saves the CSS file in their brand.yml repository. She also realizes that everyone else would likely also want to use her settings for slide-number and title-slide-attributes, so she updates the brand.yml with these new values for the revealjs format.\n\n\n\nGuiding principles\nbrand.yml was designed with the following considerations in mind:\n\nIt needs to be easy to translate brand guidelines into the structured format of a _brand.yml file.\nWe aim for Good Enough theming. A _brand.yml is a great place to start and for most people will be all they need.\nA YAML file alone isn’t enough. Brands have additional assets, like logos and font files.\nUsers will want to create new documents, projects or apps with the _brand.yml and related assets.\nUsers will want to incorporate the branded theme into existing documents, projects and apps.\nUsing _brand.yml should not impede localized customizations.\nBecause the _brand.yml is by design incomplete for any given output format, it needs to fit into a workflow that makes specific outputs formats shareable and reproducible.\n\nThis could mean that _brand.yml tooling is flexible enough to store format-specific options, e.g. to encompass additional assets used in Shiny apps or Quarto websites, or format-specific options for Quarto PDF documents, etc.\nAlternatively, _brand.yml tooling could fit into larger, existing tools for sharing settings and formats, like R packages, Quarto custom formats, or a Shiny html_dependency().",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "brand.yml",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSupport for Shiny for R is expected to arrive in the very near future.↩︎",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "pkg/py/logo.html#attributes",
    "href": "pkg/py/logo.html#attributes",
    "title": "Logos and Images",
    "section": "Attributes",
    "text": "Attributes\n\nimages\n\ndict[str, BrandLogoResource] | None\nA dictionary containing any number of logos or brand images. You can refer to these images by their key name in small, medium or large. Local file paths should be relative to the _brand.yml source file. Remote files are also permitted; please use a full URL to the image.\nlogo:\n  images:\n    white: pandas_white.svg\n    white_online: \"https://upload.wikimedia.org/wikipedia/commons/e/ed/Pandas_logo.svg\"\n  small: white\n\nsmall\n\nBrandLogoFileType | None\nA small logo, typically used as an favicon or mobile app icon.\n\nmedium\n\nBrandLogoFileType | None\nA medium-sized logo, typically used in the header of a website.\n\nlarge\n\nBrandLogoFileType | None\nA large logo, typically used in a larger format such as a title slide or in marketing materials.",
    "crumbs": [
      "About",
      "Reference",
      "Logos and Images"
    ]
  },
  {
    "objectID": "pkg/py/logo.html#examples",
    "href": "pkg/py/logo.html#examples",
    "title": "Logos and Images",
    "section": "Examples",
    "text": "Examples\n\nSingle LogoMinimalLight/Dark VariantsCompleteComplete with Alt Text\n\n\n\n\n_brand.yml\n\nlogo: posit.png\n\n\n\n\n\n_brand.yml\n\nlogo:\n  small: logos/pandas/pandas_mark.svg\n  medium: logos/pandas/pandas_secondary.svg\n  large: logos/pandas/pandas.svg\n\n\n\n\n\n_brand.yml\n\nlogo:\n  small: logos/pandas/pandas_mark.svg\n  medium:\n    light: logos/pandas/pandas_secondary.svg\n    dark: logos/pandas/pandas_secondary_white.svg\n  large: logos/pandas/pandas.svg\n\n\n\n\n\n_brand.yml\n\nlogo:\n  images:\n    mark: logos/pandas/pandas_mark.svg\n    mark-white: logos/pandas/pandas_mark_white.svg\n    secondary: logos/pandas/pandas_secondary.svg\n    secondary-white: logos/pandas/pandas_secondary_white.svg\n    pandas: logos/pandas/pandas.svg\n    pandas-white: logos/pandas/pandas_white.svg\n  small: mark\n  medium:\n    light: logos/pandas/pandas_secondary.svg\n    dark: secondary-white\n  large: pandas\n\n\n\n\n\n_brand.yml\n\nlogo:\n  images:\n    mark:\n      path: logos/pandas/pandas_mark.svg\n      alt: pandas logo with blue bars and yellow and pink dots\n    mark-white: logos/pandas/pandas_mark_white.svg\n    secondary: logos/pandas/pandas_secondary.svg\n    secondary-white:\n      path: logos/pandas/pandas_secondary_white.svg\n      alt: pandas logo with bars and dots over the word \"pandas\"\n    pandas: logos/pandas/pandas.svg\n    pandas-white: logos/pandas/pandas_white.svg\n  small: mark\n  medium:\n    light:\n      path: logos/pandas/pandas_secondary.svg\n      alt: pandas logo with bars and dots over the word \"pandas\"\n    dark: secondary-white\n  large:\n    path: logos/pandas/pandas.svg\n    alt: pandas bars and dots to the right of the word \"pandas\"",
    "crumbs": [
      "About",
      "Reference",
      "Logos and Images"
    ]
  },
  {
    "objectID": "pkg/py/logo.html#attributes-1",
    "href": "pkg/py/logo.html#attributes-1",
    "title": "Logos and Images",
    "section": "Attributes",
    "text": "Attributes\n\n\n\nName\nDescription\n\n\n\n\nalt\nAlterative text for the image, used for accessibility.\n\n\npath\nThe path to the logo resource. This can be a local file or a URL.",
    "crumbs": [
      "About",
      "Reference",
      "Logos and Images"
    ]
  },
  {
    "objectID": "pkg/py/logo.html#attributes-2",
    "href": "pkg/py/logo.html#attributes-2",
    "title": "Logos and Images",
    "section": "Attributes",
    "text": "Attributes\n\n\n\nName\nDescription\n\n\n\n\ndark\nValue in dark mode.\n\n\nlight\nValue in light mode.",
    "crumbs": [
      "About",
      "Reference",
      "Logos and Images"
    ]
  },
  {
    "objectID": "pkg/py/logo.html#methods",
    "href": "pkg/py/logo.html#methods",
    "title": "Logos and Images",
    "section": "Methods",
    "text": "Methods\n\n\n\nName\nDescription\n\n\n\n\nabsolute\nAbsolute path of the file location, relative to the root directory.\n\n\nexists\nCheck that the file exists at its absolute path.\n\n\nrelative\nRelative path of the file location.\n\n\nset_root_dir\nUpdate the root directory of this file location.\n\n\nvalidate_exists\nValidate that the file exists at its absolute path.\n\n\n\n\nabsolute\nFileLocationLocal.absolute()\nAbsolute path of the file location, relative to the root directory.\nReturns the absolute path to the file, relative to the root directory, which is most typically the directory containing the _brand.yml file.\n\n\nexists\nFileLocationLocal.exists()\nCheck that the file exists at its absolute path.\n\n\nrelative\nFileLocationLocal.relative()\nRelative path of the file location.\nReturns the relative path to the file as it would appear in the source _brand.yml file.\n\n\nset_root_dir\nFileLocationLocal.set_root_dir(root_dir)\nUpdate the root directory of this file location.\nIn general, the root directory is the parent directory containing the source brand_yml file. If you relocate the file, this method can be used to update the new local file location.\n\n\nvalidate_exists\nFileLocationLocal.validate_exists()\nValidate that the file exists at its absolute path.\n\nRaises\n\n\n\nName\nType\nDescription\n\n\n\n\n\nFileNotFoundError\nRaises a FileNotFoundError if the file does not exist at its absolute path location.",
    "crumbs": [
      "About",
      "Reference",
      "Logos and Images"
    ]
  },
  {
    "objectID": "pkg/py/index.html#installation",
    "href": "pkg/py/index.html#installation",
    "title": "Brand YAML Python Package",
    "section": "Installation",
    "text": "Installation\n\nFrom PyPI\nuv pip install brand_yml\n\n\nFrom GitHub\nuv pip install \"git+https://github.com/posit-dev/brand-yml\"",
    "crumbs": [
      "About",
      "Brand YAML Python Package"
    ]
  },
  {
    "objectID": "pkg/py/index.html#example",
    "href": "pkg/py/index.html#example",
    "title": "Brand YAML Python Package",
    "section": "Example",
    "text": "Example\n\nfrom brand_yml import Brand\n\nbrand = Brand.from_yaml_str(\n    # Typically, this file is stored in `_brand.yml`\n    # and read with `Brand.from_yaml()`.\n    \"\"\"\n    meta:\n      name: Posit Software, PBC\n      link: https://posit.co\n    color:\n      palette:\n        pblue: \"#447099\"\n        green: \"#72994E\"\n        teal: \"#419599\"\n        orange: \"#EE6331\"\n        purple: \"#9A4665\"\n        gray: \"#707073\"\n      primary: blue\n      secondary: gray\n      success: green\n      info: teal\n      warning: orange\n      danger: purple\n    typography:\n      base:\n        family: Open Sans\n        weight: 300\n    \"\"\"\n)\n\n\nbrand.meta.name\n\nBrandMetaName(full='Posit Software, PBC')\n\n\n\nbrand.color.primary\n\n'blue'\n\n\n\nbrand.typography.base.model_dump()\n\n{'family': 'Open Sans', 'weight': 300, 'size': None, 'line_height': None}",
    "crumbs": [
      "About",
      "Brand YAML Python Package"
    ]
  },
  {
    "objectID": "pkg/py/color.html",
    "href": "pkg/py/color.html",
    "title": "Color Palette and Theme",
    "section": "",
    "text": "BrandColor()\nBrand Colors\nThe brand’s custom color palette and theme. color.palette is a list of named colors used by the brand and color.theme maps brand colors to common theme elements (described in Attributes).\n\n\n\nMinimalWith palette\n\n\nIn this example, we’ve picked colors from Posit’s brand guidelines and mapped them directory to theme colors. This is a minimal approach to applying brand colors to theme colors.\n\n\n_brand.yml\n\ncolor:\n  foreground: \"#151515\"\n  background: \"#FFFFFF\"\n  primary: \"#447099\"\n  secondary: \"#707073\"\n  tertiary: \"#C2C2C4\"\n  success: \"#72994E\"\n  info: \"#419599\"\n  warning: \"#EE6331\"\n  danger: \"#9A4665\"\n  light: \"#FFFFFF\"\n  dark: \"#404041\"\n\n\n\nThis example first defines a color palette from Posit’s brand guidelines and then maps them to theme colors by reference. With this approach, not all brand colors need to be used in the theme, but are still available via the brand.color.palette dictionary. This approach also reduces duplication in brand.color.\n\n\n_brand.yml\n\ncolor:\n  palette:\n    white: \"#FFFFFF\"\n    black: \"#151515\"\n    blue: \"#447099\"\n    orange: \"#EE6331\"\n    green: \"#72994E\"\n    teal: \"#419599\"\n    burgundy: \"#9A4665\"\n\n  foreground: black\n  background: white\n  primary: blue\n  secondary: \"#707073\"\n  tertiary: \"#C2C2C4\"\n  success: green\n  info: teal\n  warning: orange\n  danger: burgundy\n  light: white\n  dark: \"#404041\"\n\n\n\n\n\n\n\nOnce defined in color.palette, you can re-use color definitions in any of the color fields. For example:\n\n\n_brand.yml\n\ncolor:\n  palette:\n    purple: \"#6339E0\"\n  primary: purple\n\nOnce imported via brand_yml.Brand.from_yaml(), you can access the named color palette via brand.color.palette[\"purple\"] and the primary field will be ready for use.\n\n\nbrand.color.palette[\"purple\"]\n\n'#6339E0'\n\n\n\nbrand.color.primary\n\n'#6339E0'\n\n\n\nThis same principle of reuse applies to the color and background-color fields of brand_yml.typography.BrandTypography, where you can refer to any of the colors in color.palette or the theme colors directly.\n\n\n_brand.yml\n\ncolor:\n  palette:\n    purple: \"#6339E0\"\n  primary: purple\ntypography:\n  headings:\n    color: primary\n  link:\n    color: purple\n\nWith this Brand YAML, both headings and links will ultimately be styled with the brand’s purple color.\n\n\nbrand.typography.headings.color\n\n'#6339E0'\n\n\n\nbrand.typography.link.color\n\n'#6339E0'\n\n\n\n\n\n\n\npalette\n\ndict[str, str] | None\nA dictionary of brand colors where each key is a color name and the value is a color string (hex colors are recommended but no specific format is required at this time). These values can be referred to, by name, in the other theme properties\n\nforeground\n\nOptional[str]\nThe foreground color, used for text. For best results, this color should be close to black and should have a high contrast with background.\n\nbackground\n\nOptional[str]\nThe background color, used for the page or main background. For best results, this color should be close to white and should have a high contrast with foreground.\n\nprimary\n\nOptional[str]\nThe primary accent color, i.e. the main theme color. Typically used for hyperlinks, active states, primary action buttons, etc.\n\nsecondary\n\nOptional[str]\nThe secondary accent color. Typically used for lighter text or disabled states.\n\ntertiary\n\nOptional[str]\nThe tertiary accent color. Typically an even lighter color, used for hover states, accents, and wells.\n\nsuccess\n\nOptional[str]\nThe color used for positive or successful actions and information.\n\ninfo\n\nOptional[str]\nThe color used for neutral or informational actions and information.\n\nwarning\n\nOptional[str]\nThe color used for warning or cautionary actions and information.\n\ndanger\n\nOptional[str]\nThe color used for errors, dangerous actions, or negative information.\n\nlight\n\nOptional[str]\nA bright color, used as a high-contrast foreground color on dark elements or low-contrast background color on light elements.\n\ndark\n\nOptional[str]\nA dark color, used as a high-contrast foreground color on light elements or high-contrast background color on light elements.\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nto_dict\nReturns a flat dictionary of color definitions.\n\n\n\n\n\nBrandColor.to_dict(include='all')\nReturns a flat dictionary of color definitions.\n\n\n\ninclude: Literal['all', 'theme', 'palette'] = ‘all’\n\nWhich colors to include: all brand colors (\"all\"), the brand’s theme colors (\"theme\") or the brand’s color palette (\"palette\").\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ndict[str, str]\nA flat dictionary of color definitions. Which colors are returned depends on the value of include: * \"all\" returns a flat dictionary of colors with theme colors overlaid on color.palette. * \"theme\" returns a dictionary of only the theme colors, excluding color.palette. * \"palette\" returns a dictionary of only the palette colors",
    "crumbs": [
      "About",
      "Reference",
      "Color Palette and Theme"
    ]
  },
  {
    "objectID": "pkg/py/color.html#examples",
    "href": "pkg/py/color.html#examples",
    "title": "Color Palette and Theme",
    "section": "",
    "text": "MinimalWith palette\n\n\nIn this example, we’ve picked colors from Posit’s brand guidelines and mapped them directory to theme colors. This is a minimal approach to applying brand colors to theme colors.\n\n\n_brand.yml\n\ncolor:\n  foreground: \"#151515\"\n  background: \"#FFFFFF\"\n  primary: \"#447099\"\n  secondary: \"#707073\"\n  tertiary: \"#C2C2C4\"\n  success: \"#72994E\"\n  info: \"#419599\"\n  warning: \"#EE6331\"\n  danger: \"#9A4665\"\n  light: \"#FFFFFF\"\n  dark: \"#404041\"\n\n\n\nThis example first defines a color palette from Posit’s brand guidelines and then maps them to theme colors by reference. With this approach, not all brand colors need to be used in the theme, but are still available via the brand.color.palette dictionary. This approach also reduces duplication in brand.color.\n\n\n_brand.yml\n\ncolor:\n  palette:\n    white: \"#FFFFFF\"\n    black: \"#151515\"\n    blue: \"#447099\"\n    orange: \"#EE6331\"\n    green: \"#72994E\"\n    teal: \"#419599\"\n    burgundy: \"#9A4665\"\n\n  foreground: black\n  background: white\n  primary: blue\n  secondary: \"#707073\"\n  tertiary: \"#C2C2C4\"\n  success: green\n  info: teal\n  warning: orange\n  danger: burgundy\n  light: white\n  dark: \"#404041\"",
    "crumbs": [
      "About",
      "Reference",
      "Color Palette and Theme"
    ]
  },
  {
    "objectID": "pkg/py/color.html#referencing-colors-in-the-brands-color-palette",
    "href": "pkg/py/color.html#referencing-colors-in-the-brands-color-palette",
    "title": "Color Palette and Theme",
    "section": "",
    "text": "Once defined in color.palette, you can re-use color definitions in any of the color fields. For example:\n\n\n_brand.yml\n\ncolor:\n  palette:\n    purple: \"#6339E0\"\n  primary: purple\n\nOnce imported via brand_yml.Brand.from_yaml(), you can access the named color palette via brand.color.palette[\"purple\"] and the primary field will be ready for use.\n\n\nbrand.color.palette[\"purple\"]\n\n'#6339E0'\n\n\n\nbrand.color.primary\n\n'#6339E0'\n\n\n\nThis same principle of reuse applies to the color and background-color fields of brand_yml.typography.BrandTypography, where you can refer to any of the colors in color.palette or the theme colors directly.\n\n\n_brand.yml\n\ncolor:\n  palette:\n    purple: \"#6339E0\"\n  primary: purple\ntypography:\n  headings:\n    color: primary\n  link:\n    color: purple\n\nWith this Brand YAML, both headings and links will ultimately be styled with the brand’s purple color.\n\n\nbrand.typography.headings.color\n\n'#6339E0'\n\n\n\nbrand.typography.link.color\n\n'#6339E0'",
    "crumbs": [
      "About",
      "Reference",
      "Color Palette and Theme"
    ]
  },
  {
    "objectID": "pkg/py/color.html#attributes",
    "href": "pkg/py/color.html#attributes",
    "title": "Color Palette and Theme",
    "section": "",
    "text": "palette\n\ndict[str, str] | None\nA dictionary of brand colors where each key is a color name and the value is a color string (hex colors are recommended but no specific format is required at this time). These values can be referred to, by name, in the other theme properties\n\nforeground\n\nOptional[str]\nThe foreground color, used for text. For best results, this color should be close to black and should have a high contrast with background.\n\nbackground\n\nOptional[str]\nThe background color, used for the page or main background. For best results, this color should be close to white and should have a high contrast with foreground.\n\nprimary\n\nOptional[str]\nThe primary accent color, i.e. the main theme color. Typically used for hyperlinks, active states, primary action buttons, etc.\n\nsecondary\n\nOptional[str]\nThe secondary accent color. Typically used for lighter text or disabled states.\n\ntertiary\n\nOptional[str]\nThe tertiary accent color. Typically an even lighter color, used for hover states, accents, and wells.\n\nsuccess\n\nOptional[str]\nThe color used for positive or successful actions and information.\n\ninfo\n\nOptional[str]\nThe color used for neutral or informational actions and information.\n\nwarning\n\nOptional[str]\nThe color used for warning or cautionary actions and information.\n\ndanger\n\nOptional[str]\nThe color used for errors, dangerous actions, or negative information.\n\nlight\n\nOptional[str]\nA bright color, used as a high-contrast foreground color on dark elements or low-contrast background color on light elements.\n\ndark\n\nOptional[str]\nA dark color, used as a high-contrast foreground color on light elements or high-contrast background color on light elements.",
    "crumbs": [
      "About",
      "Reference",
      "Color Palette and Theme"
    ]
  },
  {
    "objectID": "pkg/py/color.html#methods",
    "href": "pkg/py/color.html#methods",
    "title": "Color Palette and Theme",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nto_dict\nReturns a flat dictionary of color definitions.\n\n\n\n\n\nBrandColor.to_dict(include='all')\nReturns a flat dictionary of color definitions.\n\n\n\ninclude: Literal['all', 'theme', 'palette'] = ‘all’\n\nWhich colors to include: all brand colors (\"all\"), the brand’s theme colors (\"theme\") or the brand’s color palette (\"palette\").\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ndict[str, str]\nA flat dictionary of color definitions. Which colors are returned depends on the value of include: * \"all\" returns a flat dictionary of colors with theme colors overlaid on color.palette. * \"theme\" returns a dictionary of only the theme colors, excluding color.palette. * \"palette\" returns a dictionary of only the palette colors",
    "crumbs": [
      "About",
      "Reference",
      "Color Palette and Theme"
    ]
  },
  {
    "objectID": "pkg/py/utilities.html#parameters",
    "href": "pkg/py/utilities.html#parameters",
    "title": "Utilities",
    "section": "Parameters",
    "text": "Parameters\n\npath: Path | str\n\nA path to a file or directory where the search for the project’s _brand.yml file should be located.",
    "crumbs": [
      "About",
      "Reference",
      "Utilities"
    ]
  },
  {
    "objectID": "pkg/py/utilities.html#returns",
    "href": "pkg/py/utilities.html#returns",
    "title": "Utilities",
    "section": "Returns",
    "text": "Returns\n\n\n\nName\nType\nDescription\n\n\n\n\n\nPath\nThe path of the found _brand.yml.",
    "crumbs": [
      "About",
      "Reference",
      "Utilities"
    ]
  },
  {
    "objectID": "pkg/py/utilities.html#raises",
    "href": "pkg/py/utilities.html#raises",
    "title": "Utilities",
    "section": "Raises",
    "text": "Raises\n\n\n\nName\nType\nDescription\n\n\n\n\n\nFileNotFoundError\nIf no _brand.yml is found in any of the directories above path.",
    "crumbs": [
      "About",
      "Reference",
      "Utilities"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/posit/index.html",
    "href": "inspiration/brand-guidelines/posit/index.html",
    "title": "Posit",
    "section": "",
    "text": "Posit Brand Guidelines",
    "crumbs": [
      "Posit"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/posit/index.html#highlights",
    "href": "inspiration/brand-guidelines/posit/index.html#highlights",
    "title": "Posit",
    "section": "Highlights",
    "text": "Highlights\n\n\n\nPosit Name Guidance\n\n\n\n\n\nPosit Typography Guidance\n\n\n\n\n\nPosit Color Guidance\n\n\n\n\n\nAdditional Primary Posit Tints\n\n\n\n\n\nAdditional Secondary Posit Tints",
    "crumbs": [
      "Posit"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/posit/index.html#colors",
    "href": "inspiration/brand-guidelines/posit/index.html#colors",
    "title": "Posit",
    "section": "Colors",
    "text": "Colors\nPrimary\n\nPosit Blue #447099\nPosit Orange #EE6331\nPosit Gray #404041\nPure White #FFFFFF\n\nSecondary\n\nPosit Teal #419599\nPosit Green #72994E\nPosit Burgundy #9A4665",
    "crumbs": [
      "Posit"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/posit/index.html#typography",
    "href": "inspiration/brand-guidelines/posit/index.html#typography",
    "title": "Posit",
    "section": "Typography",
    "text": "Typography\n\nPlease use Open Sans, and see the brand guidelines for helpful guidance on font style usage.\nIf you are limited to web-safe fonts, please use Arial. For monospace font use Source Code Pro.",
    "crumbs": [
      "Posit"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/posit/index.html#logo",
    "href": "inspiration/brand-guidelines/posit/index.html#logo",
    "title": "Posit",
    "section": "Logo",
    "text": "Logo\n\n\n\nName\nImage\n\n\n\n\nIcon\n\n\n\nFull\n\n\n\nReverse",
    "crumbs": [
      "Posit"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/home-depot/index.html",
    "href": "inspiration/brand-guidelines/home-depot/index.html",
    "title": "Home Depot",
    "section": "",
    "text": "Home Depot Brand Guidelines\n\n\n\nHome Depot (Foundation) Colors and Typography\n\n\n\n\n\n\n\n\nbrand.yml\n\n\n\n\n\ncolor:\n  palette:\n    orange: \"#F96302\"\n    white: \"#FFFFFF\"\n    black: \"#000000\"\n  theme:\n    primary: orange\n    secondary: \"#747474\"\n    light: white\n    dark: black\n\ntypography:\n  body:\n    family: Helvetica Nueue LT Pro\n  headings:\n    family: Helvetica Nueue LT Pro Condensed\n    weight: bold",
    "crumbs": [
      "Home Depot"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/slack/index.html",
    "href": "inspiration/brand-guidelines/slack/index.html",
    "title": "Slack",
    "section": "",
    "text": "Slack Brand Guidelines",
    "crumbs": [
      "Slack"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/slack/index.html#logos",
    "href": "inspiration/brand-guidelines/slack/index.html#logos",
    "title": "Slack",
    "section": "Logos",
    "text": "Logos\n\n\n\n\n\n\n\n\nName\nVariant\nImage\n\n\n\n\nMark\n\n\n\n\nMark\nBlack\n\n\n\nMark\nWhite\n\n\n\nLogo\nBlack\n\n\n\nLogo\nWhite",
    "crumbs": [
      "Slack"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/slack/index.html#colors",
    "href": "inspiration/brand-guidelines/slack/index.html#colors",
    "title": "Slack",
    "section": "Colors",
    "text": "Colors\n\nCore palette\n\n\n\n\n\n\n\n\n\n\nName\nHex\nRGB\nCMYK\nPMS\n\n\n\n\nAubergine\n#4A154B\nrgb(74 21 75)\n73 100 37 38\n2623 C\n\n\nHorchata\n#F4EDE4\nrgb(244 237 228)\n3 5 9 0\nPMS7604 C at 80%\n\n\nBlack\n#1D1C1D\nrgb(29 28 29)\n0 0 0 100\nBlack\n\n\nWhite\n#FFFFFF\nrgb(255 255 255)\n0 0 0 0\nNA\n\n\nSlack blue\n#36C5F0\nrgb(54 197 240)\n63 0 2 0\n298 C\n\n\nSlack green\n#2EB67D\nrgb(46 182 125)\n74 0 69 0\n2250 C\n\n\nSlack yellow\n#ECB22E\nrgb(236 178 46)\n7 31 95 0\n7409 C\n\n\nSlack red\n#E01E5A\nrgb(224 30 90)\n6 99 51 0\n214 C\n\n\n\n\n\nSecondary palette\n\n\n\n\n\n\n\n\n\n\nName\nHex\nRGB\nCMYK\nPMS\n\n\n\n\nCobalt\n#1E328F\nrgb(30 50 143)\n100 94 9 1\n661 C\n\n\nSky\n#0E9DD3\nrgb(14 157 211)\n76 22 3 0\n7689 C\n\n\nTeal\n#2392A2\nrgb(35 146 162)\n80 26 33 1\n2221 C\n\n\nPool\n#78D7DD\nrgb(120 215 221)\n48 0 16 0\n2225 C\n\n\nEvergreen\n#185F34\nrgb(24 95 52)\n87 37 95 32\n3425 C\n\n\nMoss\n#729C1A\nrgb(114 156 26)\n62 20 100 3\n576 C\n\n\nSandbar\n#FFD57E\nrgb(255 213 126)\n0 16 59 0\n7403 C\n\n\nPeach\n#FED4BE\nrgb(254 212 190)\n0 19 22 0\n489 C\n\n\nSalmon\n#F2606A\nrgb(242 96 106)\n0 78 48 0\n709 C\n\n\nBubblegum\n#FFB6BD\nrgb(225 182 189)\n0 36 13 0\n495 C\n\n\nCrimson\n#921D21\nrgb(146 29 33)\n27 99 95 27\n7623 C\n\n\nTerracotta\n#DE8969\nrgb(222 137 105)\n10 54 61 0\n2439 C\n\n\nBerry\n#7C2852\nrgb(124 40 82)\n45 94 43 25\n7658 C\n\n\nMauve\n#C05B8C\nrgb(192 91 140)\n24 78 19 0\n2060 C",
    "crumbs": [
      "Slack"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/slack/index.html#typography",
    "href": "inspiration/brand-guidelines/slack/index.html#typography",
    "title": "Slack",
    "section": "Typography",
    "text": "Typography\n\nOur brand fonts are Larsseit and Slack Circular. The following tables outline how best to use them.\n\nUse Larsseit for headlines. …\nUse Slack Circular for most other text, including paragraphs. …\nUse Inter for Google Slides presentations\nUse Helvetica Neue for email\n\n\n\n\n\nSlack typography guidelines for headings\n\n\n\n\n\nSlack typography guidelines for content",
    "crumbs": [
      "Slack"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/slack/index.html#shape",
    "href": "inspiration/brand-guidelines/slack/index.html#shape",
    "title": "Slack",
    "section": "Shape",
    "text": "Shape\nFrom https://brand.slackhq.com/brand-shapes\n\n\n\nSlack guidelines for shape\n\n\n\n\n\nSlack guidelines for stroke",
    "crumbs": [
      "Slack"
    ]
  },
  {
    "objectID": "brand/meta.html",
    "href": "brand/meta.html",
    "title": "Metadata",
    "section": "",
    "text": "The meta section in a _brand.yml provides a place to store metadata about the company or project described in the file. This information may be used by tools that support brand.yml to add social media icons, links, footers, etc. It can also be used as a place to store additional context about the company or brand that you’d like to store in a common place.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Metadata"
    ]
  },
  {
    "objectID": "brand/meta.html#about",
    "href": "brand/meta.html#about",
    "title": "Metadata",
    "section": "",
    "text": "The meta section in a _brand.yml provides a place to store metadata about the company or project described in the file. This information may be used by tools that support brand.yml to add social media icons, links, footers, etc. It can also be used as a place to store additional context about the company or brand that you’d like to store in a common place.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Metadata"
    ]
  },
  {
    "objectID": "brand/meta.html#structure",
    "href": "brand/meta.html#structure",
    "title": "Metadata",
    "section": "Structure",
    "text": "Structure\nThe meta section primarily consists of two main components:\n\nname: The name of the company or brand\nlink: URLs to the brand’s online presence\n\nBoth name and link are optional fields, and you can add additional fields as needed for your specific use case.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Metadata"
    ]
  },
  {
    "objectID": "brand/meta.html#examples",
    "href": "brand/meta.html#examples",
    "title": "Metadata",
    "section": "Examples",
    "text": "Examples\nHere are some examples of how you might use the meta section in your brand.yml file:\n\nMinimal Example\n\n\n_brand.yml\n\nmeta:\n  name: Acme Corporation\n  link: https://www.acmecorp.com\n\n\n\nComprehensive Example\n\n\n_brand.yml\n\nmeta:\n  name:\n    full: Acme Corporation International\n    short: Acme\n  link:\n    home: https://www.acmecorp.com\n    docs: https://docs.acmecorp.com\n    github: https://github.com/acmecorp\n    twitter: https://twitter.com/acmecorp\n    linkedin: https://www.linkedin.com/company/acmecorp\n    facebook: https://www.facebook.com/acmecorp\n  description: |\n    Acme Corporation is a leading provider of innovative solutions for cartoon\n    characters worldwide.\n  founded: 1952",
    "crumbs": [
      "About",
      "Brand Elements",
      "Metadata"
    ]
  },
  {
    "objectID": "brand/meta.html#attributes",
    "href": "brand/meta.html#attributes",
    "title": "Metadata",
    "section": "Attributes",
    "text": "Attributes\n\nName\nThe name field can be specified in two ways:\n\nAs a simple string, representing the full name of the company or brand:\n\n\n_brand.yml\n\nmeta:\n  name: Acme Corporation\n\nAs an object with full and short properties:\n\n\n_brand.yml\n\nmeta:\n  name:\n    full: Acme Corporation International\n    short: Acme\n\nThis format is useful when you need to distinguish between a full company name and a shorter version depending on context.\n\n\n\nLink\nThe link field can also be specified in two ways:\n\nAs a simple string, representing the main website of the company or brand:\n\n\n_brand.yml\n\nmeta:\n  link: https://www.acmecorp.com\n\nAs an object with multiple properties representing different online presences:\n\n\n_brand.yml\n\nmeta:\n  link:\n    home: https://www.acmecorp.com\n    github: https://github.com/acmecorp\n    twitter: https://twitter.com/acmecorp\n    linkedin: https://www.linkedin.com/company/acmecorp\n\nThis format allows you to record links to the homepage and related social media accounts used by your brand. Note that links should be full URLs, including the https:// prefix.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Metadata"
    ]
  },
  {
    "objectID": "brand/index.html",
    "href": "brand/index.html",
    "title": "brand.yml Structure",
    "section": "",
    "text": "brand.yml\n\n1meta:\n  name: brand.yml\n  links:\n    home: https://posit-dev.github.io/brand-yml\n    github: https://github.com/posit-dev/brand-yml\n\n2logo:\n  images:\n    icon-color: logos/icon/brand-yml-icon-color.png\n    wide-color: logos/wide/brand-yml-wide-color.png\n    tall-color: logos/wide/brand-yml-tall-color.png\n  small: icon-color\n  medium: wide-color\n  large: tall-color\n\ncolor:\n3  palette:\n    orange: \"#FF6F20\"\n    pink: \"#FF3D7F\"\n    green: \"#28A745\"\n    yellow: \"#FFC107\"\n4  primary: orange\n  success: green\n  warning: yellow\n  danger: pink\n\ntypography:\n5  fonts:\n    - family: Open Sans\n      source: google\n    - family: IBM Plex Mono\n      source: google\n    - family: Rubik\n      source: google\n6  base:\n    family: Open Sans\n    line-height: 1.6\n  headings:\n    family: Rubik\n    weight: normal\n  link:\n    color: purple\n  monospace:\n    family: IBM Plex Mono\n    size: 1em\n\n7defaults:\n  bootstrap:\n    # bootstrap variable definitions\n  quarto:\n    format:\n      # basic format-specific settings\n      html:\n      revealjs:\n  shiny:\n    # shiny specific settings\n\n\n1\n\nmeta: Key identity information, name of the company, links to brand guidelines, etc.\n\n2\n\nlogo: Files or links to the brand’s logo at various sizes.\n\n3\n\ncolor.palette: Named colors in the brand’s color palette.\n\n4\n\ncolor: Semantic colors, e.g. primary, secondary, success, warning, etc.\n\n5\n\ntypography.fonts: Font definitions for Google, remote or bundled fonts.\n\n6\n\ntypography: Font family, weight, style, color, and line height for key elements, e.g. base, headings and monospace text.\n\n7\n\ndefaults: Additional context-specific settings beyond the basic brand colors and typography. These could be options, for example, that are used by Boostrap in Quarto or Shiny. They could also be folded into existing Quarto yaml fields like format or website, or they could be new fields for other contexts like shiny.",
    "crumbs": [
      "About",
      "Structure"
    ]
  },
  {
    "objectID": "brand/index.html#outline",
    "href": "brand/index.html#outline",
    "title": "brand.yml Structure",
    "section": "",
    "text": "brand.yml\n\n1meta:\n  name: brand.yml\n  links:\n    home: https://posit-dev.github.io/brand-yml\n    github: https://github.com/posit-dev/brand-yml\n\n2logo:\n  images:\n    icon-color: logos/icon/brand-yml-icon-color.png\n    wide-color: logos/wide/brand-yml-wide-color.png\n    tall-color: logos/wide/brand-yml-tall-color.png\n  small: icon-color\n  medium: wide-color\n  large: tall-color\n\ncolor:\n3  palette:\n    orange: \"#FF6F20\"\n    pink: \"#FF3D7F\"\n    green: \"#28A745\"\n    yellow: \"#FFC107\"\n4  primary: orange\n  success: green\n  warning: yellow\n  danger: pink\n\ntypography:\n5  fonts:\n    - family: Open Sans\n      source: google\n    - family: IBM Plex Mono\n      source: google\n    - family: Rubik\n      source: google\n6  base:\n    family: Open Sans\n    line-height: 1.6\n  headings:\n    family: Rubik\n    weight: normal\n  link:\n    color: purple\n  monospace:\n    family: IBM Plex Mono\n    size: 1em\n\n7defaults:\n  bootstrap:\n    # bootstrap variable definitions\n  quarto:\n    format:\n      # basic format-specific settings\n      html:\n      revealjs:\n  shiny:\n    # shiny specific settings\n\n\n1\n\nmeta: Key identity information, name of the company, links to brand guidelines, etc.\n\n2\n\nlogo: Files or links to the brand’s logo at various sizes.\n\n3\n\ncolor.palette: Named colors in the brand’s color palette.\n\n4\n\ncolor: Semantic colors, e.g. primary, secondary, success, warning, etc.\n\n5\n\ntypography.fonts: Font definitions for Google, remote or bundled fonts.\n\n6\n\ntypography: Font family, weight, style, color, and line height for key elements, e.g. base, headings and monospace text.\n\n7\n\ndefaults: Additional context-specific settings beyond the basic brand colors and typography. These could be options, for example, that are used by Boostrap in Quarto or Shiny. They could also be folded into existing Quarto yaml fields like format or website, or they could be new fields for other contexts like shiny.",
    "crumbs": [
      "About",
      "Structure"
    ]
  },
  {
    "objectID": "brand/index.html#description",
    "href": "brand/index.html#description",
    "title": "brand.yml Structure",
    "section": "Description",
    "text": "Description\n\nmeta\n\nKey identity information, name of the company, links to brand guidelines, etc.\n\nlogo\n\nFiles or links to the brand’s logo at various sizes.\n\ncolor\n\nSemantic colors, e.g. primary, secondary, success, warning, etc. color.palette: Named colors in the brand’s color palette.\n\ntypography\n\nFont family, weight, style, color, and line height for key elements, e.g. base, headings and monospace text. typography.fonts: Font definitions for Google, remote or bundled fonts.\n\ndefaults\n\nAdditional context-specific settings beyond the basic brand colors and typography. These could be options, for example, that are used by Boostrap in Quarto or Shiny. They could also be folded into existing Quarto yaml fields like format or website, or they could be new fields for other contexts like shiny.",
    "crumbs": [
      "About",
      "Structure"
    ]
  },
  {
    "objectID": "brand/index.html#specification",
    "href": "brand/index.html#specification",
    "title": "brand.yml Structure",
    "section": "Specification",
    "text": "Specification\nWe’ve created a schema for the structure of the brand.yml file in two flavors:\n\nbrand.yml schema as YAML, a YAML variant of JSON Schema used by Quarto to validate the structure _brand.yml files or brand in Quarto metadata.\nbrand.yml schema as JSON, a JSON Schema containing the definitions used in the YAML schema.",
    "crumbs": [
      "About",
      "Structure"
    ]
  },
  {
    "objectID": "brand/defaults.html",
    "href": "brand/defaults.html",
    "title": "Defaults",
    "section": "",
    "text": "Individual formats and outputs can expose format-specific variables or options that are relevant to branding. These options are tied to a specific output format or context, so they can’t be included in the core brand specification. But they are still relevant to the brand and need a place within brand.yml.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Defaults"
    ]
  },
  {
    "objectID": "brand/defaults.html#about",
    "href": "brand/defaults.html#about",
    "title": "Defaults",
    "section": "",
    "text": "Individual formats and outputs can expose format-specific variables or options that are relevant to branding. These options are tied to a specific output format or context, so they can’t be included in the core brand specification. But they are still relevant to the brand and need a place within brand.yml.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Defaults"
    ]
  },
  {
    "objectID": "brand/defaults.html#structure",
    "href": "brand/defaults.html#structure",
    "title": "Defaults",
    "section": "Structure",
    "text": "Structure\n\n\n\n\n\n\nWarning\n\n\n\nThis section of brand.yml is not as well-sepecified as the other sections, by design. As brand.yml adoption grows, new tools will need to be able to store options specific to the tool. This part of the brand.yml spec may change as we learn more about the needs of different tools.\n\n\nCurrently, both Quarto and Shiny support a bootstrap section under defaults that can be used to set default values for Bootstrap Sass variables.\n\n\nbrand.yml\n\ndefaults:\n  bootstrap:\n    defaults:\n      enable-rounded: false\n      link-decoration: none\n\nIn Shiny for Python, an additional shiny.theme section is used to set default values for Shiny-specific theme settings.\n\n\nbrand.yml\n\ncolor:\n  palette:\n    pink: \"#E83E8C\"\ndefaults:\n  shiny:\n    theme:\n      preset: shiny\n      defaults:\n        bslib-dashboard-design: false\n      rules: |\n        .navbar-brand { color: $brand-pink }\n\nNote that in these sections, you can make use of brand features, like the addition of $brand-{color} Sass variables.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Defaults"
    ]
  },
  {
    "objectID": "brand/typography.html",
    "href": "brand/typography.html",
    "title": "Typography",
    "section": "",
    "text": "Typography is a crucial element of any brand’s visual identity. The typography section in _brand.yml allows you to define the fonts, sizes, weights, and other typographic properties.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Typography"
    ]
  },
  {
    "objectID": "brand/typography.html#about",
    "href": "brand/typography.html#about",
    "title": "Typography",
    "section": "",
    "text": "Typography is a crucial element of any brand’s visual identity. The typography section in _brand.yml allows you to define the fonts, sizes, weights, and other typographic properties.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Typography"
    ]
  },
  {
    "objectID": "brand/typography.html#structure",
    "href": "brand/typography.html#structure",
    "title": "Typography",
    "section": "Structure",
    "text": "Structure\nYou can approach translating brand guidelines into a _brand.yml file in two steps:\n\nFirst, specify the fonts used by your brand, using local or online font sources.\n\nfonts: This top-level attribute is where you list font family definitions.\n\nSecond, define the fonts and styles used by different typographic elements (base text, headings, monospace text, etc.). The remaining attributes of typography comprise these settings:\n\nbase: Font and appearance settings for the base (body) text.\nheadings: Font and appearance settings for heading text.\nmonospace: Font and appearance settings for monospaced text.\nmonospace-inline: Font and appearance settings for inline monospaced text.\nmonospace-block: Font and appearance settings for block (multi-line) monospaced text.\nlink: Font and appearance settings for hyperlink text.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Typography"
    ]
  },
  {
    "objectID": "brand/typography.html#examples",
    "href": "brand/typography.html#examples",
    "title": "Typography",
    "section": "Examples",
    "text": "Examples\n\nMinimal Example\nAt its most minimal, you can defines only the font families for base text, headings, and monospace text.\n\n\n_brand.yml\n\ntypography:\n  base: Open Sans\n  headings: Roboto Slab\n  monospace: Fira Code\n\nThis saves a bit of typing and is equivalent to the following.\n\n\n_brand.yml\n\ntypography:\n  base:\n    family: Open Sans\n  headings:\n    family: Roboto Slab\n  monospace:\n    family: Fira Code\n\nCurrently, Quarto and Shiny assume that a font family mentioned in the typography section is available on the user’s system. To use fonts from Google Fonts or Bunny Fonts (a GDPR-compliant Google Fonts replacement), define the font sources in fonts.\n\n\n_brand.yml\n\ntypography:\n  fonts:\n    - family: Open Sans\n      source: google\n    - family: Roboto Slab\n      source: google\n    - family: Fira Code\n      source: google\n  base: Open Sans\n  headings: Roboto Slab\n  monospace: Fira Code\n\n\n\nSimple Example with Additional Properties\nTypography encompasses more than just the font selection. This example also sets typographic properties such as line height, font size, and color:\n\n\n_brand.yml\n\ncolor:\n  primary: blue\ntypography:\n  base:\n    family: Open Sans\n    line-height: 1.25\n    size: 1rem\n  headings:\n    family: Roboto Slab\n    color: primary\n    weight: semi-bold\n  monospace:\n    family: Fira Code\n    size: 0.9em\n\n\n\nComprehensive Example with Font Definitions\nThis example demonstrates how to define fonts from various sources and apply them to different text elements:\n\n\n_brand.yml\n\ncolor:\n  primary: \"#f24242\"\ntypography:\n  fonts:\n1    # Local files\n    - family: Open Sans\n      source: file\n      files:\n        - path: fonts/open-sans/OpenSans-Variable.ttf\n        - path: fonts/open-sans/OpenSans-Variable-Italic.ttf\n          style: italic\n2    # Online files\n    - family: Closed Sans\n      source: file\n      files:\n        - path: https://example.com/Closed-Sans-Bold.woff2\n          weight: bold\n        - path: https://example.com/Closed-Sans-Italic.woff2\n          style: italic\n3    # Google Fonts\n    - family: Roboto Slab\n      source: google\n      weight: [600, 900]\n      style: normal\n      display: block\n4    # Bunny Fonts\n    - family: Fira Code\n      source: bunny\n\n  base:\n5    family: Open Sans\n    line-height: 1.25\n    size: 1rem\n  headings:\n    family: Roboto Slab\n    color: primary\n    weight: 600\n  monospace:\n    family: Fira Code\n    size: 0.9em\n\n\n1\n\nLocal fonts use source: file and typically come as a set of files, each with a weight and style. List each font file under files with a path attribute, optionally specifying the weight and style associated with the font file.\n\n2\n\nOnline font files might be hosted somewhere by the company or brand. These also use source: file (see local fonts above), but the path attribute is a URL.\n\n3\n\nGoogle Fonts define an entire family of fonts. Here weight and style select the weights and styles that should be included in the fonts downloaded from Google Fonts.\n\n4\n\nBunny Fonts follow the same format as Google Fonts but use a GDPR-compliant host.\n\n5\n\nFonts are referenced by family name in the other attributes of typography. Note that not all fonts need to be used, but they’ll be made available by Quarto or Shiny.\n\n\n\n\nExample with Color Definitions\nColors defined in the color section can be referenced by name in the color and background-color attributes of the typography settings. Note that this applies to both theme colors and colors in the brand’s color palette.\n\n\n_brand.yml\n\ncolor:\n  palette:\n    red: \"#FF6F61\"\n  primary: \"#87CEEB\"\n  secondary: \"#50C878\"\n  danger: red\n  foreground: \"#1b1818\"\n  background: \"#f7f4f4\"\n\ntypography:\n  headings:\n    color: primary\n  monospace-inline:\n    color: background\n    background-color: red\n  monospace-block:\n    color: foreground\n    background-color: background\n  link:\n    color: danger",
    "crumbs": [
      "About",
      "Brand Elements",
      "Typography"
    ]
  },
  {
    "objectID": "brand/typography.html#attributes",
    "href": "brand/typography.html#attributes",
    "title": "Typography",
    "section": "Attributes",
    "text": "Attributes\n\nfonts\nThe fonts attribute is a list of font family definitions. Each definition describes a font family that is available to the brand. Fonts may be stored in files (either adjacent to _brand.yml or hosted online) or may be provided by Google Fonts or Bunny Fonts.\nLocal fonts are specified using source: file and typically consist of multiple files, each representing a different weight and style. To use local fonts, list each file under the files section, providing a path attribute and optionally specifying the weight and style for each file.\nFor fonts hosted online by a company or brand, you can use the same source: file approach as local fonts, but instead of a local file path, you’ll use a URL in the path attribute.\ntypography:\n  fonts:\n    # Local files\n    - family: Open Sans\n      source: file\n      files:\n        - path: fonts/open-sans/OpenSans-Variable.ttf\n        - path: fonts/open-sans/OpenSans-Variable-Italic.ttf\n          style: italic\n    # Online files\n    - family: Closed Sans\n      source: file\n      files:\n        - path: https://example.com/Closed-Sans-Bold.woff2\n          weight: bold\n        - path: https://example.com/Closed-Sans-Italic.woff2\n          style: italic\nGoogle Fonts offer entire font families and use a different syntax. With Google Fonts, you can specify which weights and styles should be included in the downloaded font package using the weight and style attributes. Bunny Fonts provide a GDPR-compliant alternative to Google Fonts and follow the same format for implementation.\ntypography:\n  fonts:\n    # Google Fonts\n    - family: Roboto Slab\n      source: google\n1      weight: [600, 900]\n2      style: normal\n    # Bunny Fonts\n    - family: Fira Code\n      source: bunny\n\n1\n\nThe weight attribute specifies the font weights to include in the downloaded font package. In this example, weights 600 and 900 are included. Leaving this empty includes weights from 100 to 900. Variable font weights can be written as a string 600..900.\n\n2\n\nThe style attribute specifies the font styles to include in the downloaded font package. In this example, only the normal style is included. Leaving this empty includes both normal and italic styles as [normal, italic].\n\n\nIn other typography-related attributes, fonts are referenced by their family name. It’s worth noting that while you can define multiple fonts, not all of them need to be actively used in your project. However, Quarto or Shiny will make all defined fonts available for potential use.\n\n\nTypography Attributes\nThe following attributes are used to define the typographic properties of different text elements.\n\n\n\n\n\n\n\n\nAttribute\nDescription\nSupported Fields\n\n\n\n\nbase\nDefault text, primarily used in the document body.\n\nfamily\nsize\nline-height\nweight\n\n\n\nheadings\nAll heading levels (h1, h2, etc.).\n\nfamily\nweight\nstyle\nline-height\ncolor\n\n\n\nmonospace\nGeneral monospaced text, typically used in code blocks and other programming-related content.\n\nfamily\nsize\nweight\n\n\n\nmonospace-inline\nInline monospaced text, usually used for code snippets within regular text. Inherits from monospace.\n\nfamily\nsize\nweight\ncolor\nbackground-color\n\n\n\nmonospace-block\nBlock (multi-line) monospaced text, typically used for code blocks. Inherits from monospace.\n\nfamily\nsize\nweight\nline-height\ncolor\nbackground-color\n\n\n\nlink\nHyperlinks.\n\nweight\ncolor\nbackground-color\ndecoration\n\n\n\n\nThe supported fields are generally described as follows:\n\nfamily: The font family to be used for a typographic element. This should match a font resource declared in typography.fonts.\nsize: The font size for a typographic element. Should be specified using a CSS length unit (e.g., “14px”, “1em”, “0.9rem”).\nweight: The font weight (or boldness) of the text. Can be a numeric value between 100 and 900, or a string like “normal” or “bold”.\nstyle: The font style for the text, typically either “normal” or “italic”.\nline-height: The line height of the text, which refers to the vertical space between lines. Often expressed as a multiple of the font size or in fixed units.\ncolor: The color of the text. Can be any CSS-compatible color definition or a reference to a color defined in the brand’s color palette.\nbackground-color: The background color for the text element. Can be any CSS-compatible color definition or a reference to a color defined in the brand’s color palette.\ndecoration: The text decoration, typically used for links. Common values include “underline”, “none”, or “overline”.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Typography"
    ]
  },
  {
    "objectID": "brand/color.html",
    "href": "brand/color.html",
    "title": "Color",
    "section": "",
    "text": "The color section in _brand.yml is used to define the brand’s color palette and theme colors. This section allows you to codify your brand’s palette with minimal overhead and map these colors to semantic theme fields.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Color"
    ]
  },
  {
    "objectID": "brand/color.html#about",
    "href": "brand/color.html#about",
    "title": "Color",
    "section": "",
    "text": "The color section in _brand.yml is used to define the brand’s color palette and theme colors. This section allows you to codify your brand’s palette with minimal overhead and map these colors to semantic theme fields.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Color"
    ]
  },
  {
    "objectID": "brand/color.html#structure",
    "href": "brand/color.html#structure",
    "title": "Color",
    "section": "Structure",
    "text": "Structure\nThe color section in _brand.yml consists of two main parts.\n\npalette: A set of named colors specific to the brand.\nTheme colors: Semantic color assignments for various UI elements.\n\nYou can approach creating a _brand.yml from your brand guidelines in two steps:\n\nFirst, define the available brand colors in color.palette.\nThen, map the brand colors to theme colors in the color section.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Color"
    ]
  },
  {
    "objectID": "brand/color.html#examples",
    "href": "brand/color.html#examples",
    "title": "Color",
    "section": "Examples",
    "text": "Examples\n\nExample with Palette\nThis example first defines the brand’s color palette and then maps the brand’s colors to theme elements by reference:\n\n\n_brand.yml\n\ncolor:\n  palette:\n    white: \"#FFFFFF\"\n    black: \"#151515\"\n    blue: \"#447099\"\n    orange: \"#EE6331\"\n    green: \"#72994E\"\n    teal: \"#419599\"\n    burgundy: \"#9A4665\"\n\n  foreground: black\n  background: white\n  primary: blue\n  secondary: \"#707073\"\n  tertiary: \"#C2C2C4\"\n  success: green\n  info: teal\n  warning: orange\n  danger: burgundy\n  light: white\n  dark: \"#404041\"\n\nNotice that we can refer to blue and green directly. brand.yml will automatically automatically replace these values with the corresponding value from color.palette, color.palette.blue and color.palette.green respectively.\n\n\nMinimal Example\nOf course, you can also skip creating a brand color palette and pick theme colors directly.\n\n\n_brand.yml\n\ncolor:\n  foreground: \"#151515\"\n  background: \"#FFFFFF\"\n  primary: \"#447099\"\n  secondary: \"#707073\"\n  tertiary: \"#C2C2C4\"\n  success: \"#72994E\"\n  info: \"#419599\"\n  warning: \"#EE6331\"\n  danger: \"#9A4665\"\n  light: \"#FFFFFF\"\n  dark: \"#404041\"",
    "crumbs": [
      "About",
      "Brand Elements",
      "Color"
    ]
  },
  {
    "objectID": "brand/color.html#attributes",
    "href": "brand/color.html#attributes",
    "title": "Color",
    "section": "Attributes",
    "text": "Attributes\n\npalette\nThe palette attribute is a dictionary of brand colors where each key is a color name and the value is a color string (hex colors are recommended).\n\n\n_brand.yml\n\ncolor:\n  palette:\n    blue: \"#447099\"\n    orange: \"#EE6331\"\n    gray: \"#404041\"\n\nThese named colors can be referenced in other parts of the color section and in any color or background-color attributes in the typography section of the _brand.yml file.\n\n\nTheme Colors\nThe remaining attributes in color are used to map brand colors to semantic theme colors. These theme colors can then be used in web apps and reports by tools that support brand.yml to maintain a consistent color scheme across the brand.\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nforeground\nThe main text color. Typically will be close to black and must have high contrast with the background color.\n\n\nbackground\nThe main background color. Tyically will be close to white and must have high contrast with the foreground color.\n\n\nprimary\nThe primary accent color, used for hyperlinks, active states, and primary action buttons.\n\n\nsecondary\nThe secondary accent color, often used for lighter text or disabled states.\n\n\ntertiary\nThe tertiary accent color, used for hover states, accents, and wells.\n\n\nsuccess\nThe color used for positive or successful actions and information.\n\n\ninfo\nThe color used for neutral or informational actions and information.\n\n\nwarning\nThe color used for warning or cautionary actions and information.\n\n\ndanger\nThe color used for errors, dangerous actions, or negative information.\n\n\nlight\nA bright color, used as a high-contrast foreground color on dark elements or low-contrast background color on light elements.\n\n\ndark\nA dark color, used as a high-contrast foreground color on light elements or high-contrast background color on light elements.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Color"
    ]
  },
  {
    "objectID": "brand/color.html#additional-features",
    "href": "brand/color.html#additional-features",
    "title": "Color",
    "section": "Additional Features",
    "text": "Additional Features\n\nAutomatic Color Definitions\nFor specific output formats, the brand color palette will be automatically made available. For example, in HTML/Bootstrap settings, this would create $brand-{name} (Sass) and --brand-{name} (CSS) variables for each color in the palette.\n\n\nReferencing Palette Colors\nColors defined in the palette can be referenced by name in other parts of the color section:\n\n\n_brand.yml\n\ncolor:\n  palette:\n    blue: \"#447099\"\n  primary: blue\n\nThis approach allows for easy reuse of colors and maintains consistency throughout the brand definition.\n\n\nUsing Brand Colors in Typography\nColors defined in the color section can also be used by reference in any color and background-color attributes in the typography section:\n\n\n_brand.yml\n\ncolor:\n  palette:\n    blue: \"#447099\"\n    burgundy: \"#9A4665\"\n  primary: blue\n\ntypography:\n  headings:\n    color: primary\n  link:\n    color: burgundy",
    "crumbs": [
      "About",
      "Brand Elements",
      "Color"
    ]
  },
  {
    "objectID": "brand/logo.html",
    "href": "brand/logo.html",
    "title": "Logo",
    "section": "",
    "text": "The logo section in your _brand.yml file allows you to define and organize the logos and brand images for your project. This flexible system supports various logo sizes, light/dark variants, and the ability to store multiple image resources for different use cases.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Logo"
    ]
  },
  {
    "objectID": "brand/logo.html#about",
    "href": "brand/logo.html#about",
    "title": "Logo",
    "section": "",
    "text": "The logo section in your _brand.yml file allows you to define and organize the logos and brand images for your project. This flexible system supports various logo sizes, light/dark variants, and the ability to store multiple image resources for different use cases.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Logo"
    ]
  },
  {
    "objectID": "brand/logo.html#structure",
    "href": "brand/logo.html#structure",
    "title": "Logo",
    "section": "Structure",
    "text": "Structure\nThe logo field in your _brand.yml file can be structured in several ways, from a simple single-logo setup to a more complex configuration with multiple sizes and variants:\n\nimages: A dictionary of named logo resources\nsmall: Logo for small display contexts (e.g., favicons)\nmedium: Logo for medium display contexts (e.g., website headers)\nlarge: Logo for large display contexts (e.g., title slides, marketing materials)\n\nLogos can be stored locally, adjacent to your _brand.yml file, or hosted online. Local file paths should be relative to the location of your _brand.yml file (I’ll use logos/ as the directory in the examples below). Online images should use full URLs starting with http:// or https://.",
    "crumbs": [
      "About",
      "Brand Elements",
      "Logo"
    ]
  },
  {
    "objectID": "brand/logo.html#examples",
    "href": "brand/logo.html#examples",
    "title": "Logo",
    "section": "Examples",
    "text": "Examples\n\nSimple Single Logo\n\n\n_brand.yml\n\nlogo: posit.png\n\n\n\nBasic Multi-size Configuration\n\n\n_brand.yml\n\nlogo:\n  small: logos/icon.png\n  medium: logos/header-logo.png\n  large: logos/full-logo.svg\n\n\n\nLight/Dark Variants\nYou cn specify different logos for light and dark backgrounds by using giving the small, medium, and large attributes an object with light and dark properties. light means for use on light background (or in a light color mode), and dark means for use on dark background (or in a dark color mode).\n\n\n_brand.yml\n\nlogo:\n  small: logos/icon.png\n  medium:\n    light: logos/header-logo.png\n    dark: logos/header-logo-white.png\n  large: logos/full-logo.svg\n\n\n\nComprehensive Configuration with Named Resources\nIf you define multiple logo resources in the images dictionary, you can reference them by name in the small, medium, and large attributes.\n\n\n_brand.yml\n\nlogo:\n  images:\n    icon: logos/icon.png\n    header: logos/header-logo.png\n    header-white: logos/header-logo-white.png\n    full: logos/full-logo.svg\n  small: icon\n  medium:\n    light: header\n    dark: header-white\n  large: full\n\n\n\nConfiguration with Alternative Text\nLogo images can have associated alternative text for accessibility purposes. This can be specified as an alt property in the image object as the alt text is directly associated with each image. The University of South Carolina provides a great resource on writing effective alt text for logos in their Digital Accessibility Toolbox.\n\n\n_brand.yml\n\nlogo:\n  images:\n    icon:\n      path: logos/icon.png\n      alt: \"Company icon with abstract shapes\"\n    header:\n      path: logos/header-logo.png\n      alt: \"Company name with logo\"\n    header-white:\n      path: logos/header-logo-white.png\n      alt: \"Company name with logo in white\"\n    full:\n      path: logos/full-logo.svg\n      alt: \"Full company logo with tagline\"\n  small: icon\n  medium:\n    light: header\n    dark: header-white\n  large: full",
    "crumbs": [
      "About",
      "Brand Elements",
      "Logo"
    ]
  },
  {
    "objectID": "brand/logo.html#attributes",
    "href": "brand/logo.html#attributes",
    "title": "Logo",
    "section": "Attributes",
    "text": "Attributes\n\nimages\nThe images attribute is a dictionary that allows you to store multiple logo resources with meaningful names. These named resources can then be referenced in the small, medium, and large attributes.\n\n\n_brand.yml\n\nlogo:\n  images:\n    primary: logos/primary-logo.png\n    icon: logos/favicon.png\n    white: logos/white-logo.png\n\nEach image can be specified as a simple string path or as an object with path and alt properties:\n\n\n_brand.yml\n\nlogo:\n  images:\n    primary:\n      path: logos/primary-logo.png\n      alt: \"Company logo with name and icon\"\n\n\n\nsmall\nThe small attribute defines the logo used for small display contexts, such as favicons or mobile app icons.\n\n\n_brand.yml\n\nlogo:\n  small: logos/favicon.png\n\nor\n\n\n_brand.yml\n\nlogo:\n  images:\n    icon: logos/favicon.png\n  small: icon\n\n\n\nmedium\nThe medium attribute specifies the logo for medium-sized display contexts, typically used in website headers or navigation bars. It supports the same format options as the small attribute, with the additional ability to specify light and dark variants.\n\n\n_brand.yml\n\nlogo:\n  medium: logos/header-logo.png\n\nor\n\n\n_brand.yml\n\nlogo:\n  medium:\n    light: logos/header-logo.png\n    dark: logos/header-logo-white.png\n\n\n\nlarge\nThe large attribute defines the logo for large display contexts, such as title slides or marketing materials. It follows the same format options as small and medium.\n\n\n_brand.yml\n\nlogo:\n  large: logos/full-logo.svg\n\nor\n\n\n_brand.yml\n\nlogo:\n  images:\n    full: logos/full-logo.svg\n  large: full",
    "crumbs": [
      "About",
      "Brand Elements",
      "Logo"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/indeed/index.html",
    "href": "inspiration/brand-guidelines/indeed/index.html",
    "title": "Indeed",
    "section": "",
    "text": "Indeed Brand Guidelines",
    "crumbs": [
      "Indeed"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/indeed/index.html#logos",
    "href": "inspiration/brand-guidelines/indeed/index.html#logos",
    "title": "Indeed",
    "section": "Logos",
    "text": "Logos\n\nLarge\n\n\n\nBlue Indeed logo\n\n\n\n\n\nWhite Indeed logo\n\n\n\n\nSmall (icon)\n\n\n\nBlue Indeed icon\n\n\n\n\n\nWhite Indeed icon",
    "crumbs": [
      "Indeed"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/indeed/index.html#swatches",
    "href": "inspiration/brand-guidelines/indeed/index.html#swatches",
    "title": "Indeed",
    "section": "Swatches",
    "text": "Swatches",
    "crumbs": [
      "Indeed"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/dell/index.html",
    "href": "inspiration/brand-guidelines/dell/index.html",
    "title": "Dell",
    "section": "",
    "text": "Dell Brand Guidelines\n\n\n\nDell Principle Color Palette\n\n\n\n\n\nDell Supporting Color Palette\n\n\n\n\n\nDell Typography\n\n\n\n\n\n\n\n\nbrand.yml\n\n\n\n\n\ncolor:\n  palette:\n    blue: \"#0085c3\"\n    gray: \"#aaaaaa\"\n    white: \"#FFFFFF\"\n    green: \"#7ab800\"\n    yellow: \"#f2af00\"\n    orange: \"#ff7700\"\n    red: \"#dc5034\"\n    red-dark: \"#ce1126\"\n    purple: \"#6e2585\"\n    teal: \"#71c6c1\"\n    periwinkle: \"#5482ab\"\n    aqua: \"#009bbb\"\n    gray-dark: \"#444444\"\n    gray-light: \"#eeeeee\"\n  theme:\n    primary: blue\n    secondary: gray\n    light: gray-light\n    dark: gray-dark\n\ntypography:\n  body:\n    family: Museo Sans for Dell\n  headings:\n    family: \"Museo for Dell, Trebuchet\"\n    weight: 700",
    "crumbs": [
      "Dell"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/walmart/index.html",
    "href": "inspiration/brand-guidelines/walmart/index.html",
    "title": "Walmart",
    "section": "",
    "text": "Walmart Brand Guidelines",
    "crumbs": [
      "Walmart"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/walmart/index.html#colors",
    "href": "inspiration/brand-guidelines/walmart/index.html#colors",
    "title": "Walmart",
    "section": "Colors",
    "text": "Colors\n\n\n\nWalmart palette\n\n\n\nPrimary color palette\n\nWe are a blue brand with white & yellow. Walmart Blue is the primary color that should be applied across all communications, to uphold brand consistency.\n\nFor .com &/or digital platforms, use digital blue to accommodate readability & legibility needs.\nWhite complements digital blue & is either a background color or a type color.\nSpark Yellow should be used as an accent color. Note: For yellow headlines used online, please refer to the ADA compliance section below.\n\n\n\n\n\nHex\nCMYK\nPMS\nName\n\n\n\n\n#0071DC\nCMYK 100, 45, 0, 0\nPMS 285 C\nWalmart Blue\n\n\n#FFFFFF\nCMYK 0, 0, 0, 0\nWhite\n\n\n\n#FFC220\nCMYK 0, 25, 100, 0\nPMS 1235 C\nSpark Yellow\n\n\n\n\n\nSecondary color palette\n\nOur secondary color palette is an extension of our primary colors & is used as backgrounds & texture for silhouetted product photography. Where primary colors applied to type fail in legibility & compliance, use Ozark Noir.\n\n\n\n\nHex\nCMYK\nName\n\n\n\n\n#F8E6A5\nCMYK 3, 7, 42, 0\nYellow Tone\n\n\n#8CD1FC\nCMYK 39, 5, 0, 0\nBlue Tone 1\n\n\n#D3EFF8\nCMYK 16, 0, 2, 0\nBlue Tone 2\n\n\n#FAFAFA\nCMYK 1, 1, 1, 0\nOff White\n\n\n#041E42\nCMYK 100, 88, 42, 51\nOzark Noir",
    "crumbs": [
      "Walmart"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/walmart/index.html#logos",
    "href": "inspiration/brand-guidelines/walmart/index.html#logos",
    "title": "Walmart",
    "section": "Logos",
    "text": "Logos\nFull logo documentation\n\n\n\n\n\n\n\nName\nImage\n\n\n\n\nPrimary blue logo\n\n\n\nPrimary white logo\n\n\n\nSpark icon",
    "crumbs": [
      "Walmart"
    ]
  },
  {
    "objectID": "inspiration/brand-guidelines/walmart/index.html#font",
    "href": "inspiration/brand-guidelines/walmart/index.html#font",
    "title": "Walmart",
    "section": "Font",
    "text": "Font\nWalmart uses a custom font named Bogle.",
    "crumbs": [
      "Walmart"
    ]
  },
  {
    "objectID": "inspiration/index.html",
    "href": "inspiration/index.html",
    "title": "Inspiration",
    "section": "",
    "text": "These brand guidelines and design systems served as an inspiration to the design of brand.yml. In the future, we’ll translate these guidelines into _brand.yml example files."
  },
  {
    "objectID": "inspiration/index.html#company-brand-guidelines",
    "href": "inspiration/index.html#company-brand-guidelines",
    "title": "Inspiration",
    "section": "Company Brand Guidelines",
    "text": "Company Brand Guidelines\n\n\n\n\n\n\n\n\nDell\n\n\n\n\n\n\n\n\n\n\n\n\n\nHome Depot\n\n\n\n\n\n\n\n\n\n\n\n\n\nIndeed\n\n\n\n\n\n\n\n\n\n\n\n\n\nPosit\n\n\n\n\n\n\n\n\n\n\n\n\n\nSlack\n\n\n\n\n\n\n\n\n\n\n\n\n\nWalmart\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "inspiration/index.html#design-systems",
    "href": "inspiration/index.html#design-systems",
    "title": "Inspiration",
    "section": "Design Systems",
    "text": "Design Systems\n\n\n\n    \n     \n    \n    \n      \n        gov.uk\n      \n      \n    \n\n\n    \n     \n    \n    \n      \n        Deque\n      \n      \n      Cauldron\n      \n    \n\n\n    \n     \n    \n    \n      \n        US Web Design\n      \n      \n    \n\n\n    \n     \n    \n    \n      \n        Thumbtack\n      \n      \n      Thumbprint\n      \n    \n\n\n    \n     \n    \n    \n      \n        City of Helsinki\n      \n      \n      Helsinki Design System\n      \n    \n\n\n    \n     \n    \n    \n      \n        GitHub\n      \n      \n      Primer\n      \n    \n\n\n    \n     \n    \n    \n      \n        Stack Overflow\n      \n      \n      Stacks\n      \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "pkg/py/typography.html",
    "href": "pkg/py/typography.html",
    "title": "Typography",
    "section": "",
    "text": "BrandTypography()\nRepresents the typographic choices of a brand.\nThis class defines the structure and behavior of typography settings, including fonts, base text, headings, monospace text, and links.\n\n\n\nMinimalMinimal with System FontSimpleWith FontsWith Color\n\n\nThis minimal example chooses only the font family for the base text, headings and monospace. These fonts will be sourced, by default, from Google Fonts.\n\n\n_brand.yml\n\ntypography:\n  base: Open Sans\n  headings: Roboto Slab\n  monospace: Fira Code\n\n\n\nBy default, fonts are sourced from Google Fonts, but you can also provide font sources in fonts. Here we’re using a system font for “Open Sans” and Google Fonts for the others.\n\n\n_brand.yml\n\ntypography:\n  fonts:\n    - family: Open Sans\n      source: system\n  base: Open Sans\n  headings: Roboto Slab\n  monospace: Fira Code\n\n\n\nIn addition to setting the font family for key elements, you can choose other typographic properties. This example sets the line height and font size for base text, uses the primary accent color for headings and reduces the font size for monospace code, in addition to choosing the font family for each.\n\n\n_brand.yml\n\ncolor:\n  primary: blue\ntypography:\n  base:\n    family: Open Sans\n    line-height: 1.25\n    size: 1rem\n  headings:\n    family: Roboto Slab\n    color: primary\n    weight: semi-bold\n  monospace:\n    family: Fira Code\n    size: 0.9em\n\n\n\nFont files may be sourced in a number of different ways.\n\nLocal or hosted (online) files\nFrom Google Fonts\nOr from Bunny Fonts (a GDPR-compliant) alternative to Google Fonts.\n\nEach font family should be declared in a list item provided to typography.fonts. Local font files can be stored adjacent to the _brand.yml file, and each file for a given family needs to be declared in the files key. Typically these font files cover a specific font weight and style.\n\n\n_brand.yml\n\ncolor:\n  primary: '#f24242'\ntypography:\n  fonts:\n    # Local files\n    - family: Open Sans\n      source: file\n      files:\n        - path: fonts/open-sans/OpenSans-Variable.ttf\n        - path: fonts/open-sans/OpenSans-Variable-Italic.ttf\n          style: italic\n\n    # Online files\n    - family: Closed Sans\n      source: file\n      files:\n        - path: https://example.com/Closed-Sans-Bold.woff2\n          weight: bold\n        - path: https://example.com/Closed-Sans-Italic.woff2\n          style: italic\n\n    # Online Font Foundries\n    - family: Roboto Slab\n      source: google\n      weight: 600..900\n      style: normal\n      display: block\n\n    - family: Fira Code\n      source: bunny\n      # weight: [100, 200, 300, 400, 500, 600, 700, 800, 900]\n      # style: [normal, italic]\n\n  base:\n    family: Open Sans\n    line-height: 1.25\n    size: 1rem\n\n  headings:\n    family: Roboto Slab\n    color: primary\n    weight: 600\n\n  monospace:\n    family: Fira Code\n    size: 0.9em\n\n\n\nColors in the typographic elements—color or background-color—can use the names of colors in color.palette or the theme color names in color.\n\n\n_brand.yml\n\ncolor:\n  palette:\n    red: '#FF6F61'\n  primary: '#87CEEB'\n  secondary: '#50C878'\n  danger: red\n  foreground: '#1b1818'\n  background: '#f7f4f4'\n\ntypography:\n  headings:\n    color: primary\n  monospace-inline:\n    color: background\n    background-color: red\n  monospace-block:\n    color: foreground\n    background-color: background\n  link:\n    color: danger\n\n\n\n\n\n\n\n\nfonts\n\nlist[BrandTypographyFontFamily]\nA list of font family definitions. Each definition in the list describes a font family that is available to the brand. Fonts may be stored in files (either adjacent to _brand.yml or hosted online) or may be provided by Google Fonts or Font Bunny (a GDPR-compliant Google Fonts alternative).\n\nbase\n\nBrandTypographyBase | None\nThe type used as the default text, primarily in the document body.\n\nheadings\n\nBrandTypographyHeadings | None\nThe type used for headings. Note that these settings cover all heading levels (h1, h2, etc.).\n\nmonospace\n\nBrandTypographyMonospace | None\nThe type used for code blocks and other monospaced text.\n\nmonospace_inline\n\nBrandTypographyMonospaceInline | None\nThe type used for inline code; inherits properties from monospace.\n\nmonospace_block\n\nBrandTypographyMonospaceBlock | None\nThe type use for code blocks; inherits properties from monospace.\n\nlink\n\nBrandTypographyLink | None\nType settings used for hyperlinks.\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nfonts_css_include\nGenerates CSS include statements for the defined fonts.\n\n\nfonts_html_dependency\nGenerate an HTMLDependency for the font CSS and font files.\n\n\nfonts_write_css\nWrites fonts.css into a directory, with copies of local fonts.\n\n\n\n\n\nBrandTypography.fonts_css_include()\nGenerates CSS include statements for the defined fonts.\nThis method creates CSS @import or @font-face rules for all fonts defined in the typography configuration.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nstr\nA string containing CSS include statements for all defined fonts.\n\n\n\n\n\n\n\nBrandTypography.fonts_html_dependency(\n    path_dir\n    name='brand-fonts'\n    version='0.0.1'\n)\nGenerate an HTMLDependency for the font CSS and font files.\nThis method creates an HTMLDependency object for the font CSS file and supporting font files written by the .fonts_html_dependency() method. It’s useful for integrating the font styles into web or Shiny applications that use htmltools.\n\n\n\npath_dir: str | Path\n\nThe directory path where the CSS file will be written.\n\nname: str = ‘brand-fonts’\n\nThe name of the dependency. Defaults to “brand-fonts”.\n\nversion: str = ‘0.0.1’\n\nThe version of the dependency. Defaults to “0.0.1”.\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nHTMLDependency | None\nAn htmltools.HTMLDependency object if typography includes font file definitions or None if no font CSS is needed.\n\n\n\n\n\n\n\nBrandTypography.fonts_write_css(path_dir, file_css='fonts.css')\nWrites fonts.css into a directory, with copies of local fonts.\nWrites a fonts.css file (or file_css) into path_dir and copies any local fonts into the directory as well.\n\n\n\npath_dir: str | Path\n\nPath to the directory with the CSS file and copies of the local fonts should be written. If it does not exist it will be created.\n\nfile_css: str = ‘fonts.css’\n\nThe name of the CSS file with the font @import and @font-face rules should be written.\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nPath | None\nReturns the path to the directory where the files were written, i.e. path_dir.",
    "crumbs": [
      "About",
      "Reference",
      "Typography"
    ]
  },
  {
    "objectID": "pkg/py/typography.html#examples",
    "href": "pkg/py/typography.html#examples",
    "title": "Typography",
    "section": "",
    "text": "MinimalMinimal with System FontSimpleWith FontsWith Color\n\n\nThis minimal example chooses only the font family for the base text, headings and monospace. These fonts will be sourced, by default, from Google Fonts.\n\n\n_brand.yml\n\ntypography:\n  base: Open Sans\n  headings: Roboto Slab\n  monospace: Fira Code\n\n\n\nBy default, fonts are sourced from Google Fonts, but you can also provide font sources in fonts. Here we’re using a system font for “Open Sans” and Google Fonts for the others.\n\n\n_brand.yml\n\ntypography:\n  fonts:\n    - family: Open Sans\n      source: system\n  base: Open Sans\n  headings: Roboto Slab\n  monospace: Fira Code\n\n\n\nIn addition to setting the font family for key elements, you can choose other typographic properties. This example sets the line height and font size for base text, uses the primary accent color for headings and reduces the font size for monospace code, in addition to choosing the font family for each.\n\n\n_brand.yml\n\ncolor:\n  primary: blue\ntypography:\n  base:\n    family: Open Sans\n    line-height: 1.25\n    size: 1rem\n  headings:\n    family: Roboto Slab\n    color: primary\n    weight: semi-bold\n  monospace:\n    family: Fira Code\n    size: 0.9em\n\n\n\nFont files may be sourced in a number of different ways.\n\nLocal or hosted (online) files\nFrom Google Fonts\nOr from Bunny Fonts (a GDPR-compliant) alternative to Google Fonts.\n\nEach font family should be declared in a list item provided to typography.fonts. Local font files can be stored adjacent to the _brand.yml file, and each file for a given family needs to be declared in the files key. Typically these font files cover a specific font weight and style.\n\n\n_brand.yml\n\ncolor:\n  primary: '#f24242'\ntypography:\n  fonts:\n    # Local files\n    - family: Open Sans\n      source: file\n      files:\n        - path: fonts/open-sans/OpenSans-Variable.ttf\n        - path: fonts/open-sans/OpenSans-Variable-Italic.ttf\n          style: italic\n\n    # Online files\n    - family: Closed Sans\n      source: file\n      files:\n        - path: https://example.com/Closed-Sans-Bold.woff2\n          weight: bold\n        - path: https://example.com/Closed-Sans-Italic.woff2\n          style: italic\n\n    # Online Font Foundries\n    - family: Roboto Slab\n      source: google\n      weight: 600..900\n      style: normal\n      display: block\n\n    - family: Fira Code\n      source: bunny\n      # weight: [100, 200, 300, 400, 500, 600, 700, 800, 900]\n      # style: [normal, italic]\n\n  base:\n    family: Open Sans\n    line-height: 1.25\n    size: 1rem\n\n  headings:\n    family: Roboto Slab\n    color: primary\n    weight: 600\n\n  monospace:\n    family: Fira Code\n    size: 0.9em\n\n\n\nColors in the typographic elements—color or background-color—can use the names of colors in color.palette or the theme color names in color.\n\n\n_brand.yml\n\ncolor:\n  palette:\n    red: '#FF6F61'\n  primary: '#87CEEB'\n  secondary: '#50C878'\n  danger: red\n  foreground: '#1b1818'\n  background: '#f7f4f4'\n\ntypography:\n  headings:\n    color: primary\n  monospace-inline:\n    color: background\n    background-color: red\n  monospace-block:\n    color: foreground\n    background-color: background\n  link:\n    color: danger",
    "crumbs": [
      "About",
      "Reference",
      "Typography"
    ]
  },
  {
    "objectID": "pkg/py/typography.html#attributes",
    "href": "pkg/py/typography.html#attributes",
    "title": "Typography",
    "section": "",
    "text": "fonts\n\nlist[BrandTypographyFontFamily]\nA list of font family definitions. Each definition in the list describes a font family that is available to the brand. Fonts may be stored in files (either adjacent to _brand.yml or hosted online) or may be provided by Google Fonts or Font Bunny (a GDPR-compliant Google Fonts alternative).\n\nbase\n\nBrandTypographyBase | None\nThe type used as the default text, primarily in the document body.\n\nheadings\n\nBrandTypographyHeadings | None\nThe type used for headings. Note that these settings cover all heading levels (h1, h2, etc.).\n\nmonospace\n\nBrandTypographyMonospace | None\nThe type used for code blocks and other monospaced text.\n\nmonospace_inline\n\nBrandTypographyMonospaceInline | None\nThe type used for inline code; inherits properties from monospace.\n\nmonospace_block\n\nBrandTypographyMonospaceBlock | None\nThe type use for code blocks; inherits properties from monospace.\n\nlink\n\nBrandTypographyLink | None\nType settings used for hyperlinks.",
    "crumbs": [
      "About",
      "Reference",
      "Typography"
    ]
  },
  {
    "objectID": "pkg/py/typography.html#methods",
    "href": "pkg/py/typography.html#methods",
    "title": "Typography",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nfonts_css_include\nGenerates CSS include statements for the defined fonts.\n\n\nfonts_html_dependency\nGenerate an HTMLDependency for the font CSS and font files.\n\n\nfonts_write_css\nWrites fonts.css into a directory, with copies of local fonts.\n\n\n\n\n\nBrandTypography.fonts_css_include()\nGenerates CSS include statements for the defined fonts.\nThis method creates CSS @import or @font-face rules for all fonts defined in the typography configuration.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nstr\nA string containing CSS include statements for all defined fonts.\n\n\n\n\n\n\n\nBrandTypography.fonts_html_dependency(\n    path_dir\n    name='brand-fonts'\n    version='0.0.1'\n)\nGenerate an HTMLDependency for the font CSS and font files.\nThis method creates an HTMLDependency object for the font CSS file and supporting font files written by the .fonts_html_dependency() method. It’s useful for integrating the font styles into web or Shiny applications that use htmltools.\n\n\n\npath_dir: str | Path\n\nThe directory path where the CSS file will be written.\n\nname: str = ‘brand-fonts’\n\nThe name of the dependency. Defaults to “brand-fonts”.\n\nversion: str = ‘0.0.1’\n\nThe version of the dependency. Defaults to “0.0.1”.\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nHTMLDependency | None\nAn htmltools.HTMLDependency object if typography includes font file definitions or None if no font CSS is needed.\n\n\n\n\n\n\n\nBrandTypography.fonts_write_css(path_dir, file_css='fonts.css')\nWrites fonts.css into a directory, with copies of local fonts.\nWrites a fonts.css file (or file_css) into path_dir and copies any local fonts into the directory as well.\n\n\n\npath_dir: str | Path\n\nPath to the directory with the CSS file and copies of the local fonts should be written. If it does not exist it will be created.\n\nfile_css: str = ‘fonts.css’\n\nThe name of the CSS file with the font @import and @font-face rules should be written.\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nPath | None\nReturns the path to the directory where the files were written, i.e. path_dir.",
    "crumbs": [
      "About",
      "Reference",
      "Typography"
    ]
  },
  {
    "objectID": "pkg/py/typography.html#attributes-1",
    "href": "pkg/py/typography.html#attributes-1",
    "title": "Typography",
    "section": "Attributes",
    "text": "Attributes\n\n\n\nName\nDescription\n\n\n\n\nBrandTypographyFontFamily\nRuntime representation of an annotated type.",
    "crumbs": [
      "About",
      "Reference",
      "Typography"
    ]
  },
  {
    "objectID": "pkg/py/typography.html#classes",
    "href": "pkg/py/typography.html#classes",
    "title": "Typography",
    "section": "Classes",
    "text": "Classes\n\n\n\nName\nDescription\n\n\n\n\nBrandTypographyFontSource\nA base class representing a font source.\n\n\nBrandTypographyFontFiles\nA font family defined by a collection of font files.\n\n\nBrandTypographyFontGoogle\nA font family provided by Google Fonts.\n\n\nBrandTypographyFontBunny\nA font family provided by Bunny Fonts.\n\n\nBrandTypographyGoogleFontsApi\nA font source that utilizes the Google Fonts (or a compatible) API.\n\n\nBrandTypographyGoogleFontsWeightRange\nRepresents a range of font weights for Google Fonts.\n\n\nBrandTypographyBase\nTypographic settings for base (or body) text.\n\n\nBrandTypographyHeadings\nTypographic settings for headings and titles.\n\n\nBrandTypographyMonospace\nTypographic settings for monospace text.\n\n\nBrandTypographyMonospaceInline\nTypographic settings for inline monospace text.\n\n\nBrandTypographyMonospaceBlock\nTypographic settings for block monospace text.\n\n\nBrandTypographyLink\nTypographic settings for hyperlinks.\n\n\n\n\nBrandTypographyFontSource\ntypography.BrandTypographyFontSource()\nA base class representing a font source.\nThis class serves as a template for various font sources, encapsulating common properties and behaviors.\n\nAttributes\n\n\n\nName\nDescription\n\n\n\n\nfamily\nThe font family name.\n\n\nsource\nThe source of the font family, one of \"system\", \"file\", \"google\", or \"bunny\".\n\n\n\n\n\nMethods\n\n\n\nName\nDescription\n\n\n\n\nto_css\nCreate the CSS declarations needed to use the font family.\n\n\n\n\nto_css\ntypography.BrandTypographyFontSource.to_css()\nCreate the CSS declarations needed to use the font family.\n\n\n\n\nBrandTypographyFontFiles\ntypography.BrandTypographyFontFiles()\nA font family defined by a collection of font files.\nThis class represents a font family that is specified using individual font files, either from local files or files hosted online. A font family is generally composed of multiple font files for different weights and styles within the same family. Currently, TrueType (.ttf), OpenType (.otf), and WOFF (.woff or .woff2) formats are supported.\n\nExamples\ntypography:\n  fonts:\n    # Local font files\n    - family: Open Sans\n      files:\n        - path: fonts/open-sans/OpenSans-Bold.ttf\n          style: bold\n        - path: fonts/open-sans/OpenSans-Italic.ttf\n          style: italic\n\n    # Online files\n    - family: Closed Sans\n      files:\n        - path: https://example.com/Closed-Sans-Bold.woff2\n          weight: bold\n        - path: https://example.com/Closed-Sans-Italic.woff2\n          style: italic\n\n\n\nBrandTypographyFontGoogle\ntypography.BrandTypographyFontGoogle()\nA font family provided by Google Fonts.\nThis class represents a font family that is sourced from Google Fonts. It allows you to specify the font family name, weight range, and style.\nSubclass of brand_yml.typography.BrandTypographyGoogleFontsApi, the generic Google Fonts API font source.\n\nExamples\nIn this example, the Inter font is imported with all font weights and both normal and italic styles (these are the defaults). Additionally, the Roboto Slab font is sourced from Google Fonts with three specific font weights – 400, 600, 800 – and only the normal style.\nyaml typography:   fonts:     - family: Inter source: google     - family: Roboto Slab source: google weight: [400, 600, 800] style:       normal\n\n\n\nBrandTypographyFontBunny\ntypography.BrandTypographyFontBunny()\nA font family provided by Bunny Fonts.\nThis class represents a font family that is sourced from Bunny Fonts. It allows you to specify the font family name, weight range, and style.\nSubclass of brand_yml.typography.BrandTypographyGoogleFontsApi, the generic Google Fonts API font source.\n\nExamples\nIn this example, the Fira Code font is sourced from Bunny Fonts. By default all available weights and styles will be used.\ntypography:\n  fonts:\n    - family: Fira Code\n      source: bunny\n      # weight: [100, 200, 300, 400, 500, 600, 700, 800, 900]\n      # style: [normal, italic]\n\n\n\nBrandTypographyGoogleFontsApi\ntypography.BrandTypographyGoogleFontsApi()\nA font source that utilizes the Google Fonts (or a compatible) API.\nThis class provides a way to fetch and manage typography assets from Google Fonts, allowing for easy integration with brand-specific typographic styles.\n\nAttributes\n\n\n\nName\nDescription\n\n\n\n\ndisplay\nSpecifies how a font face is displayed based on whether and when it is downloaded and ready to use.\n\n\nstyle\nThe font style(s) (italic or normal) to be imported for the font family.\n\n\nurl\nURL of the Google Fonts-compatible API. (Primarily for internal use.)\n\n\nversion\nGoogle Fonts API version. (Primarily for internal use.)\n\n\nweight\nThe desired front weights to be imported for the font family.\n\n\n\n\n\nMethods\n\n\n\nName\nDescription\n\n\n\n\nto_import_url\nReturns the URL for the font family to be used in a CSS @import statement.\n\n\n\n\nto_import_url\ntypography.BrandTypographyGoogleFontsApi.to_import_url()\nReturns the URL for the font family to be used in a CSS @import statement.\n\n\n\n\nBrandTypographyGoogleFontsWeightRange\ntypography.BrandTypographyGoogleFontsWeightRange()\nRepresents a range of font weights for Google Fonts.\nThis class is used to specify a continuous range of font weights to be imported from Google Fonts for variable fonts that support a range of font weights. The weight range is represented as a list of two integers, where the first integer is the start of the range and the second is the end.\n\nExamples\n\n300..700: Represents a range from light (300) to bold (700)\n100..900: Represents the full range of weights from thin to black\n\n\n\nNote\nWhen serialized, this class will convert the range to a string format (e.g., “300..700”) for compatibility with the Google Fonts API.\n\n\nAttributes\n\nroot\n\nlist[BrandTypographyFontWeightInt]\nA list containing two integers representing the start and end of the weight range.\n\n\n\n\nMethods\n\n\n\nName\nDescription\n\n\n\n\nmodel_dump\nUsage docs: https://docs.pydantic.dev/2.9/concepts/serialization/#modelmodel_dump\n\n\n\n\nmodel_dump\ntypography.BrandTypographyGoogleFontsWeightRange.model_dump(\n    mode='python'\n    include=None\n    exclude=None\n    context=None\n    by_alias=False\n    exclude_unset=False\n    exclude_defaults=False\n    exclude_none=False\n    round_trip=False\n    warnings=True\n    serialize_as_any=False\n)\nUsage docs: https://docs.pydantic.dev/2.9/concepts/serialization/#modelmodel_dump\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\nArgs: mode: The mode in which to_python should run. If mode is ‘json’, the output will only contain JSON serializable types. If mode is ‘python’, the output may contain non-JSON-serializable Python objects. include: A set of fields to include in the output. exclude: A set of fields to exclude from the output. context: Additional context to pass to the serializer. by_alias: Whether to use the field’s alias in the dictionary key if defined. exclude_unset: Whether to exclude fields that have not been explicitly set. exclude_defaults: Whether to exclude fields that are set to their default value. exclude_none: Whether to exclude fields that have a value of None. round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T]. warnings: How to handle serialization errors. False/“none” ignores them, True/“warn” logs errors, “error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError]. serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\nReturns: A dictionary representation of the model.\n\n\n\n\nBrandTypographyBase\ntypography.BrandTypographyBase()\nTypographic settings for base (or body) text.\n\nNotes\nIn some cases, you may wish to convert the base font size to an appropriate unit, such as rem (i.e. a font size relative to the root element’s font size). Use typography_base_size_unit in pydantic’s serialization context to request the units for the base font size. (Note that currently only \"rem\" is supported.)\n\nfrom brand_yml import Brand\n\nbrand = Brand.from_yaml_str(\n    f\"\"\"\n    typography:\n      base:\n        size: 18px\n    \"\"\"\n)\n\nbrand.typography.model_dump(\n  exclude_none = True,\n  context={\"typography_base_size_unit\": \"rem\"}\n)\n\n{'fonts': [], 'base': {'size': '1.125rem'}}\n\n\n\n\nAttributes\n\nfamily\n\nThe font family to be used. Note that the font family name should match a resource in typography.fonts.\n\nweight\n\nThe font weight (boldness) of the text.\n\nsize\n\nThe font size of the text. Should be a CSS length unit (e.g., 14px).\n\nline_height\n\nThe line height of the text. Line height refers to the vertical space between lines of text.\n\n\n\n\n\nBrandTypographyHeadings\ntypography.BrandTypographyHeadings()\nTypographic settings for headings and titles.\n\nAttributes\n\nfamily\n\nThe font family used for headings. Note that this should match a resource in typography.fonts.\n\nweight\n\nThe font weight (or boldness) of the text.\n\nstyle\n\nThe font style for the heading, i.e., whether it should be styled in a \"normal\" or \"italic\" style.\n\nline_height\n\nThe line height of the heading. Line height refers to the vertical space between lines of text.\n\ncolor\n\nThe color of the text.\n\n\n\n\nExamples\nThis example sets up typography settings for headings using the Inter font at a weight of 600 and with a line height that is 1.2 times the font size.\ntypography:\n  headings:\n    family: Inter\n    weight: 600\n    line_height: 1.2\n\n\n\nBrandTypographyMonospace\ntypography.BrandTypographyMonospace()\nTypographic settings for monospace text.\nThis class defines general typography options for monospace text, typically used for code blocks and other programming-related content. These choices can be further refined for inline and block monospace text using brand_yml.typography.BrandTypographyMonospaceInline and brand_yml.typography.BrandTypographyMonospaceBlock respectively.\n\nAttributes\n\nfamily\n\nThe font family to be used for monospace text. Note that the font family name should match a resource in typography.fonts.\n\nweight\n\nThe font weight (boldness) of the monospace text. Can be a numeric value between 100 and 900, or a string like “normal” or “bold”.\n\nsize\n\nThe font size of the monospace text. Should be a CSS length unit (e.g., “0.9em”, “14px”).\n\n\n\n\nExamples\nThis example sets up typography settings for monospace text using the Fira Code font at a slightly smaller size than the base text:\ntypography:\n  fonts:\n    - family: Fira Code\n      source: bunny\n  monospace:\n    family: Fira Code\n    size: 0.9em\nYou can also specify additional properties like weight:\ntypography:\n  monospace:\n    family: Fira Code\n    size: 0.9em\n    weight: 400\nFor more complex setups, you can define different styles for inline and block monospace text:\ntypography:\n  monospace:\n    family: Fira Code\n    size: 0.9em\n  monospace-inline:\n    color: \"#7d12ba\" # purple\n    background-color: \"#f8f9fa\" # light gray\n  monospace-block:\n    color: foreground\n    background-color: background\n\n\n\nBrandTypographyMonospaceInline\ntypography.BrandTypographyMonospaceInline()\nTypographic settings for inline monospace text.\nThis class defines typography options for inline monospace text, typically used for code snippets or technical terms within regular text. It inherits properties from brand_yml.typography.BrandTypographyMonospace with additional options for foreground and background colors.\n\nAttributes\n\nfamily\n\nThe font family to be used for inline monospace text. Note that the font family name should match a resource in typography.fonts.\n\nweight\n\nThe font weight (boldness) of the inline monospace text. Can be a numeric value between 100 and 900, or a string like “normal” or “bold”.\n\nsize\n\nThe font size of the inline monospace text. Should be a CSS length unit (e.g., “0.9em”, “14px”).\n\ncolor\n\nThe color of the inline monospace text. Can be any CSS-compatible color definition or a reference to a color defined in the brand’s color palette.\n\nbackground_color\n\nThe background color of the inline monospace text. Can be any CSS-compatible color definition or a reference to a color defined in the brand’s color palette.\n\n\n\n\nExamples\nThis example sets up typography settings for inline monospace text using the Fira Code font at a slightly smaller size than the base text, with custom colors:\ntypography:\n  fonts:\n    - family: Fira Code\n      source: bunny\n  monospace:\n    family: Fira Code\n    size: 0.9em\n  monospace-inline:\n    color: \"#7d12ba\"  # purple\n    background-color: \"#f8f9fa\"  # light gray\nYou can also use color names defined in your brand’s color palette:\ncolor:\n  palette:\n    red-light: \"#fff1f0\"\n  primary: \"#FF6F61\"\n  foreground: \"#1b1818\"\n  background: \"#f7f4f4\"\ntypography:\n  monospace-inline:\n    color: red\n    background-color: red-light\n\n\n\nBrandTypographyMonospaceBlock\ntypography.BrandTypographyMonospaceBlock()\nTypographic settings for block monospace text.\nThis class defines typography options for block monospace text, typically used for code blocks or other larger sections of monospaced content. It inherits properties from brand_yml.typography.BrandTypographyMonospace and adds options for line height, foreground color, and background color.\n\nAttributes\n\nfamily\n\nThe font family to be used for block monospace text. Note that the font family name should match a resource in typography.fonts.\n\nweight\n\nThe font weight (boldness) of the block monospace text. Can be a numeric value between 100 and 900, or a string like “normal” or “bold”.\n\nsize\n\nThe font size of the block monospace text. Should be a CSS length unit (e.g., “0.9em”, “14px”).\n\nline_height\n\nThe line height of the block monospace text. Line height refers to the vertical space between lines of text.\n\ncolor\n\nThe color of the block monospace text. Can be any CSS-compatible color definition or a reference to a color defined in the brand’s color palette.\n\nbackground_color\n\nThe background color of the block monospace text. Can be any CSS-compatible color definition or a reference to a color defined in the brand’s color palette.\n\n\n\n\nExamples\nThis example sets up typography settings for block monospace text using the Fira Code font at a slightly smaller size than the base text, with custom colors:\ntypography:\n  fonts:\n    - family: Fira Code\n      source: bunny\n  monospace:\n    family: Fira Code\n    size: 0.9em\n  monospace-block:\n    color: foreground\n    background-color: background\n    line-height: 1.4\n\n\n\nBrandTypographyLink\ntypography.BrandTypographyLink()\nTypographic settings for hyperlinks.\nThis class defines typography options for hyperlinks, allowing customization of font weight, colors, and text decoration.\n\nAttributes\n\nweight\n\nThe font weight (boldness) of the hyperlink text. Can be a numeric value between 100 and 900, or a string like “normal” or “bold”.\n\ncolor\n\nThe color of the hyperlink text. Can be any CSS-compatible color definition or a reference to a color defined in the brand’s color palette.\n\nbackground_color\n\nThe background color of the hyperlink text. Can be any CSS-compatible color definition or a reference to a color defined in the brand’s color palette.\n\ndecoration\n\nstr | None\nThe text decoration for the hyperlink. Common values include “underline”, “none”, or “underline”.\n\n\n\n\nExamples\nThis example sets up typography settings for hyperlinks with a custom color and text decoration:\ntypography:\n  link:\n    weight: 600\n    color: \"#FF6F61\"\n    decoration: underline\nYou can also use color names defined in your brand’s color palette:\ncolor:\n  palette:\n    red: \"#FF6F61\"\ntypography:\n  link:\n    weight: 600\n    color: red\n    decoration: underline",
    "crumbs": [
      "About",
      "Reference",
      "Typography"
    ]
  },
  {
    "objectID": "pkg/py/Brand.html",
    "href": "pkg/py/Brand.html",
    "title": "Brand",
    "section": "",
    "text": "Brand()\nBrand guidelines in a class.\nA brand instance encapsulates the color, typography and logo preferences for a given brand, typically found in brand guidelines created by a company’s marketing department. brand_yml.Brand organizes this information in a common, fully-specified class instance that makes it easy to re-use for theming any artifact from websites to data visualizations.\nUnified brand information following the Brand YAML specification. Read brand metadata from a YAML file, typically named _brand.yml, with brand_yml.Brand.from_yaml or from a YAML string with brand_yml.Brand.from_yaml_str. Or create a full brand instance directly via this class.",
    "crumbs": [
      "About",
      "Reference",
      "Brand"
    ]
  },
  {
    "objectID": "pkg/py/Brand.html#attributes",
    "href": "pkg/py/Brand.html#attributes",
    "title": "Brand",
    "section": "Attributes",
    "text": "Attributes\n\nmeta\n\nBrandMeta | None\nKey identity information, name of the company, links to brand guidelines, etc.\n\nlogo\n\nBrandLogo | BrandLogoResource | None\nFiles or links to the brand’s logo at various sizes.\n\ncolor\n\nBrandColor | None\nNamed colors in the brand’s color palette and semantic colors (e.g., primary, secondary, success, warning).\n\ntypography\n\nBrandTypography | None\nFont definitions, font family, weight, style, color, and line height for key elements (e.g., base, headings, and monospace text).\n\ndefaults\n\ndict[str, Any] | None\nAdditional context-specific settings beyond the basic brand colors and typography.\n\npath\n\nPath | None\nThe file path of the brand configuration. This attribute is excluded from serialization and representation.",
    "crumbs": [
      "About",
      "Reference",
      "Brand"
    ]
  },
  {
    "objectID": "pkg/py/Brand.html#methods",
    "href": "pkg/py/Brand.html#methods",
    "title": "Brand",
    "section": "Methods",
    "text": "Methods\n\n\n\nName\nDescription\n\n\n\n\nfrom_yaml\nCreate a Brand instance from a Brand YAML file.\n\n\nfrom_yaml_str\nCreate a Brand instance from a string of YAML.\n\n\nmodel_dump_yaml\nSerialize the Brand object to YAML.\n\n\n\n\nfrom_yaml\nBrand.from_yaml(path)\nCreate a Brand instance from a Brand YAML file.\nReads a Brand YAML file or finds and reads a _brand.yml file and returns a validated :class:Brand instance.\nTo find a project-specific _brand.yml file, pass path the project directory or __file__ (the path of the current Python script). brand_yml.Brand.from_yaml will look in that directory or any parent directory for a _brand.yml, brand/_brand.yml or _brand/_brand.yml file (or the same variants with a .yaml extension). Note that it starts the search in the directory passed in and moves upward to find the _brand.yml file; it does not search into subdirectories of the current directory.\n\nParameters\n\npath: str | Path\n\nThe path to the brand.yml file or a directory where _brand.yml is expected to be found. Typically, you can pass __file__ from the calling script to find _brand.yml or _brand.yaml in the current directory or any of its parent directories.\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\n\nA validated Brand object with all fields populated according to the brand.yml file.\n\n\n\n\n\nRaises\n\n\n\nName\nType\nDescription\n\n\n\n\n\nFileNotFoundError\nRaises a FileNotFoundError if no brand configuration file is found within the given path.\n\n\n\nValueError\nRaises ValueError or other validation errors from pydantic if the brand.yml file is invalid.\n\n\n\n\n\nExamples\nfrom brand_yml import Brand\n\nbrand = Brand.from_yaml(__file__)\nbrand = Brand.from_yaml(\"path/to/_brand.yml\")\n\n\n\nfrom_yaml_str\nBrand.from_yaml_str(text, path=None)\nCreate a Brand instance from a string of YAML.\n\nParameters\n\ntext: str\n\nThe text of the Brand YAML file.\n\npath: str | Path | None = None\n\nThe optional path on disk for supporting files like logos and fonts.\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\n\nA validated brand_yml.Brand object with all fields populated according to the Brand YAML text.\n\n\n\n\n\nRaises\n\n\n\nName\nType\nDescription\n\n\n\n\n\nValueError\nRaises ValueError or other validation errors from pydantic if the Brand YAML file is invalid.\n\n\n\n\n\nExamples\n\nfrom brand_yml import Brand\n\nbrand = Brand.from_yaml_str(\"\"\"\nmeta:\n  name: Brand YAML\ncolor:\n  primary: \"#ff0202\"\ntypography:\n  base: Open Sans\n\"\"\")\n\n\nbrand.meta\n\nBrandMeta(name=BrandMetaName(full='Brand YAML'))\n\n\n\nbrand.color.primary\n\n'#ff0202'\n\n\n\n\n\nmodel_dump_yaml\nBrand.model_dump_yaml(stream=None, *, transform=None)\nSerialize the Brand object to YAML.\nWrite the brand_yml.Brand instance to a string or to a file on disk.\n\nExamples\n\nfrom brand_yml import Brand\n\nbrand = Brand.from_yaml_str(\"\"\"\nmeta:\n  name: Brand YAML\ncolor:\n  palette:\n    orange: \"#ff9a02\"\n  primary: orange\ntypography:\n  headings: Raleway\n\"\"\")\n\n\n\nprint(brand.model_dump_yaml())\n\nmeta:\n  name:\n    full: Brand YAML\ncolor:\n  palette:\n    orange: '#ff9a02'\n  primary: '#ff9a02'\ntypography:\n  fonts:\n    - family: Raleway\n  headings:\n    family: Raleway\n\n\n\n\n\n\nParameters\n\nstream: Any = None\n\nPassed to stream parameter of ruamel.yaml.YAML.dump.\n\ntransform: Any = None\n\nPassed to transform parameter of ruamel.yaml.YAML.dump.\n\n\n\n\nReturns\n\n\n\nName\nType\nDescription\n\n\n\n\n\nAny\nA string with the YAML representation of the brand if stream is None. Otherwise, the YAML representation is written to stream, typically a file. Note that the output YAML may not be 100% identical to the input _brand.yml. The output will contain the fully validated Brand instance where default or computed values may be included as well as any values resolved during validation, such as colors.",
    "crumbs": [
      "About",
      "Reference",
      "Brand"
    ]
  },
  {
    "objectID": "pkg/py/api.html",
    "href": "pkg/py/api.html",
    "title": "brand_yml Python Package Reference",
    "section": "",
    "text": "Read a _brand.yml file or create an instance of a Brand.\n\n\n\nBrand\nBrand guidelines in a class.\n\n\nMetadata\n\n\n\nLogos and Images\n\n\n\nColor Palette and Theme\n\n\n\nTypography\n\n\n\nUtilities"
  },
  {
    "objectID": "pkg/py/api.html#reference",
    "href": "pkg/py/api.html#reference",
    "title": "brand_yml Python Package Reference",
    "section": "",
    "text": "Read a _brand.yml file or create an instance of a Brand.\n\n\n\nBrand\nBrand guidelines in a class.\n\n\nMetadata\n\n\n\nLogos and Images\n\n\n\nColor Palette and Theme\n\n\n\nTypography\n\n\n\nUtilities"
  },
  {
    "objectID": "pkg/py/meta.html#attributes",
    "href": "pkg/py/meta.html#attributes",
    "title": "Metadata",
    "section": "Attributes",
    "text": "Attributes\n\nname\n\nBrandMetaName | None\nThe name of the brand. In the YAML, this may be a dictionary with the full and short forms of the brand name.\nmeta:\n  name:\n    full: Very Big Corporation of America\n    short: VBCA\nor a single value as shorthand for meta.name.full.\nmeta:\n  name: Very Big Corporation of America\n\nlink\n\nBrandMetaLink | None\nLinks to additional resources related to the brand, such as its homepage, social media accounts, etc. Like name, this can be a single value or a dictionary with additional keys. If a single value is provided, it is promoted to the home key of brand_yml.meta.BrandMetaLink.\nThese two constructions are equivalent:\nmeta:\n  link: https://www.very-big-corp.com/\nmeta:\n  link:\n    home: https://www.very-big-corp.com/",
    "crumbs": [
      "About",
      "Reference",
      "Metadata"
    ]
  },
  {
    "objectID": "pkg/py/meta.html#notes",
    "href": "pkg/py/meta.html#notes",
    "title": "Metadata",
    "section": "Notes",
    "text": "Notes\nAdditional fields are allowed, so you may store any additional metadata you want to attach to the brand here. Tools that use brand_yml may not know about these fields, however.",
    "crumbs": [
      "About",
      "Reference",
      "Metadata"
    ]
  },
  {
    "objectID": "pkg/py/meta.html#examples",
    "href": "pkg/py/meta.html#examples",
    "title": "Metadata",
    "section": "Examples",
    "text": "Examples\n\nMinimalFull\n\n\n\n\n_brand.yml\n\nmeta:\n  name: Very Big Corp. of America\n  link: https://very-big-corp.com\n\n\n\n\n\n_brand.yml\n\nmeta:\n  name:\n    full: Very Big Corporation of America\n    short: VBC\n  link:\n    home: https://very-big-corp.com\n    mastodon: https://mastodon.social/@VeryBigCorpOfficial\n    github: https://github.com/Very-Big-Corp\n    linkedin: https://linkedin.com/company/very-big-corp\n    twitter: https://twitter.com/VeryBigCorp\n    facebook: https://facebook.com/Very-Big-Corp",
    "crumbs": [
      "About",
      "Reference",
      "Metadata"
    ]
  },
  {
    "objectID": "pkg/py/meta.html#attributes-1",
    "href": "pkg/py/meta.html#attributes-1",
    "title": "Metadata",
    "section": "Attributes",
    "text": "Attributes\n\n\n\nName\nDescription\n\n\n\n\nfull\nFull name of the company or brand.\n\n\nshort\nShort name of the company or brand, for use in space-constrained settings.",
    "crumbs": [
      "About",
      "Reference",
      "Metadata"
    ]
  },
  {
    "objectID": "pkg/py/meta.html#attributes-2",
    "href": "pkg/py/meta.html#attributes-2",
    "title": "Metadata",
    "section": "Attributes",
    "text": "Attributes\n\n\n\nName\nDescription\n\n\n\n\nfacebook\nFacebook link for the brand or company.\n\n\ngithub\nGitHub link for the brand or company.\n\n\nhome\nHome website link for the brand or company.\n\n\nlinkedin\nLinkedIn link for the brand or company.\n\n\nmastodon\nMastodon link for the brand or company.\n\n\ntwitter\nTwitter link for the brand or company.",
    "crumbs": [
      "About",
      "Reference",
      "Metadata"
    ]
  }
]