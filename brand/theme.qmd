---
title: Theme
pagetitle: "theme | brand.yml"
---

## About

While brand guidelines might provide [a set of unique colors](color.qmd), the goal of the `theme` section is to provide color values for a key set of semantic theme fields.
These fields follow Bootstrap conventions closely but are universal and are easily mapped to any themable output format. 

### Inspiration

**Directly themable**

* [Bootstrap theme colors](https://getbootstrap.com/docs/5.3/customize/color/#colors)

* [Quarto HTML basic theme options](https://quarto.org/docs/output-formats/html-themes.html#basic-options)

* [Quarto revealjs Sass variables](https://quarto.org/docs/presentations/revealjs/themes.html#sass-variables)

**Indirectly themable**

* Office templates
    * [Quarto Word documents](https://quarto.org/docs/output-formats/ms-word-templates.html)
    * [Quarto PowerPoint slides](https://quarto.org/docs/presentations/powerpoint.html#powerpoint-templates)
    * Generally users would provide a `reference-doc`.

* [Quarto PDF outputs](https://quarto.org/docs/output-formats/pdf-basics.html#output-options)

* [Quarto Typst custom formats](https://quarto.org/docs/output-formats/typst-custom.html)


## Example

```{.yaml filename="brand.yml (simple)"}
color:
  blue: "#447099"
  orange: "#EE6331"
  gray: "#404041"
  white: "#FFFFFF"
  teal: "#419599"
  green: "#72994E"
  burgundy: "#9A4665"

theme:
  foreground: "#151515"
  background: "#FFFFFF"
  primary: "#447099"
  secondary: "#707073"
  tertiary: "#C2C2C4"
  success: "#72994E"
  info: "#419599"
  warning: "#EE6331"
  danger: "#9A4665"
  light: "#FFFFFF"
  dark: "#404041"
```

The above is simple, but it's easy to imagine that `brand.yml` authors might want to re-use colors in `color` in the `theme`.
In [reusing fields in open questions](open-questions.qmd#reusing-fields) I outlined a possible custom syntax.
Here's an example using the `{{ color['key'] }}` syntax

```{.yaml filename="brand.yml (reusing colors)"}
color:
  blue: "#447099"
  orange: "#EE6331"
  gray: "#404041"
  white: "#FFFFFF"
  teal: "#419599"
  green: "#72994E"
  burgundy: "#9A4665"

theme:
  foreground: "#151515"
  background: "{{ color['white'] }}"
  primary: "{{ color['blue'] }}"
  secondary: "#707073"
  tertiary: "#C2C2C4"
  success: "{{ color['green'] }}"
  info: "{{ color['teal'] }}"
  warning: "{{ color['orange'] }}"
  danger: "{{ color['burgundy'] }}"
  light: "{{ color['white'] }}"
  dark: "{{ color['gray'] }}"
```

And another example using the shortcode-style `{{< brand color ____ >}}`{shortcodes="false"} syntax:

```{.yaml filename="brand.yml (reusing colors)" shortcodes="false"}
color:
  blue: "#447099"
  orange: "#EE6331"
  gray: "#404041"
  white: "#FFFFFF"
  teal: "#419599"
  green: "#72994E"
  burgundy: "#9A4665"

theme:
  foreground: "#151515"
  background: "{{< brand color white >}}"
  primary: "{{< brand color blue >}}"
  secondary: "#707073"
  tertiary: "#C2C2C4"
  success: "{{< brand color green >}}"
  info: "{{< brand color teal >}}"
  warning: "{{< brand color orange >}}"
  danger: "{{< brand color burgundy >}}"
  light: "{{< brand color white >}}"
  dark: "{{< brand color gray >}}"
```

Alternatively, without a custom re-usable field implementation, expert YAML users could use native YAML anchor and alias features.

```{.yaml filename="brand.yml (native yaml)"}
color:
  blue: &blue "#447099"
  orange: &orange "#EE6331"
  gray: &gray "#404041"
  white: &white "#FFFFFF"
  teal: &teal "#419599"
  green: &green "#72994E"
  burgundy: &burgundy "#9A4665"

theme:
  foreground: "#151515"
  background: *white
  primary: *blue
  secondary: "#707073"
  tertiary: "#C2C2C4"
  success: *green
  info: *teal
  warning: *orange
  danger: *burgundy
  light: *white
  dark: *gray
```

## Spec

```{.yaml}
{{< include spec/brand-theme.yml >}}
```
