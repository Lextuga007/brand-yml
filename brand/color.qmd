---
title: Color
pagetitle: "color | brand.yml"
---

## About

### Palette

Brand guidelines often include color palette definitions, ranging from one or two colors to entire palettes.
Often, these colors are given names with specific meaning to the brand.

The `color.palette` section gives `brand.yml` authors a chance to codify their brand's palette with minimal overhead.
In the [theme](#theme) section, they'll apply these colors to parts of the theme.

### Theme

While brand guidelines might provide [a set of unique colors](color.qmd), the goal of the `theme` section is to provide color values for a key set of semantic theme fields.
These fields follow Bootstrap conventions closely but are universal and are easily mapped to any themable output format. 

#### Inspiration

**Directly themable**

* [Bootstrap theme colors](https://getbootstrap.com/docs/5.3/customize/color/#colors)

* [Quarto HTML basic theme options](https://quarto.org/docs/output-formats/html-themes.html#basic-options)

* [Quarto revealjs Sass variables](https://quarto.org/docs/presentations/revealjs/themes.html#sass-variables)

**Indirectly themable**

* Office templates
    * [Quarto Word documents](https://quarto.org/docs/output-formats/ms-word-templates.html)
    * [Quarto PowerPoint slides](https://quarto.org/docs/presentations/powerpoint.html#powerpoint-templates)
    * Generally users would provide a `reference-doc`.

* [Quarto PDF outputs](https://quarto.org/docs/output-formats/pdf-basics.html#output-options)

* [Quarto Typst custom formats](https://quarto.org/docs/output-formats/typst-custom.html)


## Example

### Home Depot

```{.yaml filename="brand_home-depot.yml"}
color:
  palette:
    orange: "#F96302"
    white: "#FFFFFF"
    black: "#000000"
    warm-gray-dark: "#747474"
    warm-gray-light: "#f5f5f5"
    warm-gray-medium: "#c4c4c4"
  theme:
    primary: "#F96302"
    secondary: "#747474"
    tertiary: "#C4C4C4"
    light: "#F5F5F5"
    dark: "#747474"
```

See [Home Depot brand guidelines](../examples/brand-guidelines/home-depot/index.qmd).

### Posit

```{.yaml filename="brand.yml (Posit)"}
color:
  palette:
    blue: "#447099"
    orange: "#EE6331"
    gray: "#404041"
    white: "#FFFFFF"
    teal: "#419599"
    green: "#72994E"
    burgundy: "#9A4665"
  theme:
    foreground: "#151515"
    background: "#FFFFFF"
    primary: "#447099"
    secondary: "#707073"
    tertiary: "#C2C2C4"
    success: "#72994E"
    info: "#419599"
    warning: "#EE6331"
    danger: "#9A4665"
    light: "#FFFFFF"
    dark: "#404041"
```
See [Posit brand guidelines](../examples/brand-guidelines/posit/index.qmd).

## Spec

```{.yaml}
{{< include spec/brand-color.yml >}}
```

## Additional color features

### Shades and tints

We can imagine extending the spec to help create shades and tints of the brand colors.
Users could provide any of `mid`, `light` or `dark` as an anchor point
(but best results if only `mid` or `light` + `dark` or all three).

Initially, we'll only support `mid` because this fits [Bootstrap conventions](https://getbootstrap.com/docs/5.3/customize/color/#all-colors) to create a range of shades (darker variants) and tints (lighter variants), numbered from 900 (dark) to 100 (light).
By default, Bootstrap uses the midpoint to seed the range, e.g. setting `$blue-500` changes the range of blue values.

Note: Bootstrap uses a fixed set of colors for this type of palette -- e.g. `blue`, `indigo`, `red`, etc. -- because their values pass through Sass variables.
For colors in this named list, we'd use `mid` to set the `$*-500` variable.
For other colors, we'd directly set CSS variables, replicating Bootstrap's color logic.

#### Example: Posit Blue

```{.yaml filename="brand_posit.yml"}
color:
  palette:
    blue:
      mid: "#447099"
```

```{=html}
<p class="codepen" data-height="300" data-default-tab="css,result" data-slug-hash="xxedqZY" data-editable="true" data-user="gadenbuie" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">
  <span>See the Pen <a href="https://codepen.io/gadenbuie/pen/xxedqZY">
  Sass lighten() and darken() vs mix() using black and white</a> by Garrick Aden-Buie (<a href="https://codepen.io/gadenbuie">@gadenbuie</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>
<script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
```

#### Example: Home Depot Warm Gray

```{.yaml filename="brand_home-depot.yml"}
color:
  palette:
    warm_gray:
      light: "#f5f5f5"
      mid: "#c4c4c4"
      dark: "#747474"
```

```{=html}
<p class="codepen" data-height="300" data-default-tab="css,result" data-slug-hash="MWRmpqE" data-editable="true" data-user="gadenbuie" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">
  <span>See the Pen <a href="https://codepen.io/gadenbuie/pen/MWRmpqE">
  Sass lighten() and darken() vs mix() using black and white</a> by Garrick Aden-Buie (<a href="https://codepen.io/gadenbuie">@gadenbuie</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>
<script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
```

(This is just a quick example, not the final algorithm.)

## Additional theme features

### Re-using fields

The above is simple, but it's easy to imagine that `brand.yml` authors might want to re-use colors in `color` in the `theme`.
In [reusing fields in open questions](open-questions.qmd#reusing-fields) I outlined a possible custom syntax.
Here's an example using the shortcode-style `{{< brand color palette ____ >}}`{shortcodes="false"} syntax:

```{.yaml filename="brand.yml (reusing colors)" shortcodes="false"}
color:
  palette:
    blue: "#447099"
    orange: "#EE6331"
    gray: "#404041"
    white: "#FFFFFF"
    teal: "#419599"
    green: "#72994E"
    burgundy: "#9A4665"
  theme:
    foreground: "#151515"
    background: "{{< brand color palette white >}}"
    primary: "{{< brand color palette blue >}}"
    secondary: "#707073"
    tertiary: "#C2C2C4"
    success: "{{< brand color palette green >}}"
    info: "{{< brand color palette teal >}}"
    warning: "{{< brand color palette orange >}}"
    danger: "{{< brand color palette burgundy >}}"
    light: "{{< brand color palette white >}}"
    dark: "{{< brand color palette gray >}}"
```

Alternatively, assuming that all the colors in `color.palette` become top-level Sass variables (maybe an only okay idea), we could use Sass-alike custom syntax:

```{.yaml filename="brand.yml (reusing colors)"}
color:
  palette:
    blue: "#447099"
    orange: "#EE6331"
    gray: "#404041"
    white: "#FFFFFF"
    teal: "#419599"
    green: "#72994E"
    burgundy: "#9A4665"
  theme:
    foreground: "#151515"
    background: "$white"
    primary: "$blue"
    secondary: "#707073"
    tertiary: "#C2C2C4"
    success: "$green"
    info: "$teal"
    warning: "$orange"
    danger: "$burgundy"
    light: "$white"
    dark: "$gray"
```

Finally, without a custom re-usable field implementation, expert YAML users could use native YAML anchor and alias features.

```{.yaml filename="brand.yml (native yaml)"}
color:
  palette:
    blue: &blue "#447099"
    orange: &orange "#EE6331"
    gray: &gray "#404041"
    white: &white "#FFFFFF"
    teal: &teal "#419599"
    green: &green "#72994E"
    burgundy: &burgundy "#9A4665"
  theme:
    foreground: "#151515"
    background: *white
    primary: *blue
    secondary: "#707073"
    tertiary: "#C2C2C4"
    success: *green
    info: *teal
    warning: *orange
    danger: *burgundy
    light: *white
    dark: *gray
```
